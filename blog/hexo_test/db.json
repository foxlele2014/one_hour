{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/girl.jpeg","path":"images/girl.jpeg","modified":0,"renderable":0},{"_id":"source/images/vertical_align.jpeg","path":"images/vertical_align.jpeg","modified":0,"renderable":0},{"_id":"source/images/box_pattern.jpeg","path":"images/box_pattern.jpeg","modified":0,"renderable":0},{"_id":"themes/blank/source/fonts/chinese-zodiac.eot","path":"fonts/chinese-zodiac.eot","modified":0,"renderable":1},{"_id":"themes/blank/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/blank/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/blank/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/blank/source/img/favicon1.png","path":"img/favicon1.png","modified":0,"renderable":1},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff","path":"fonts/chinese-zodiac.woff","modified":0,"renderable":1},{"_id":"themes/blank/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/blank/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff2","path":"fonts/chinese-zodiac.woff2","modified":0,"renderable":1},{"_id":"themes/blank/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/blank/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/blank/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/blank/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/blank/source/js/todark.js","path":"js/todark.js","modified":0,"renderable":1},{"_id":"themes/blank/source/js/firework.js","path":"js/firework.js","modified":0,"renderable":1},{"_id":"themes/blank/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/blank/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/dark.styl","path":"css/partial/dark.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/fonts.styl","path":"css/partial/fonts.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/local-search.styl","path":"css/partial/local-search.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/media.styl","path":"css/partial/media.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/post.styl","path":"css/partial/post.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/header.styl","path":"css/partial/header.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight.styl","path":"css/partial/highlight.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/recent-posts.styl","path":"css/partial/recent-posts.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/reward.styl","path":"css/partial/reward.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/a11y-dark.css","path":"css/partial/highlight/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/a11y-light.css","path":"css/partial/highlight/a11y-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/agate.css","path":"css/partial/highlight/agate.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/an-old-hope.css","path":"css/partial/highlight/an-old-hope.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/androidstudio.css","path":"css/partial/highlight/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/arduino-light.css","path":"css/partial/highlight/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/arta.css","path":"css/partial/highlight/arta.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ascetic.css","path":"css/partial/highlight/ascetic.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-dark.css","path":"css/partial/highlight/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-dark.css","path":"css/partial/highlight/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-light.css","path":"css/partial/highlight/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-light.css","path":"css/partial/highlight/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-dark.css","path":"css/partial/highlight/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-light.css","path":"css/partial/highlight/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-dark.css","path":"css/partial/highlight/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-light.css","path":"css/partial/highlight/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-dark.css","path":"css/partial/highlight/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-light.css","path":"css/partial/highlight/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-dark.css","path":"css/partial/highlight/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-light.css","path":"css/partial/highlight/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-dark.css","path":"css/partial/highlight/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-light.css","path":"css/partial/highlight/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-dark.css","path":"css/partial/highlight/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-light.css","path":"css/partial/highlight/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-dark.css","path":"css/partial/highlight/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-light.css","path":"css/partial/highlight/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-dark.css","path":"css/partial/highlight/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-light.css","path":"css/partial/highlight/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark.css","path":"css/partial/highlight/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-light.css","path":"css/partial/highlight/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/brown-paper.css","path":"css/partial/highlight/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/codepen-embed.css","path":"css/partial/highlight/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark-reasonable.css","path":"css/partial/highlight/atom-one-dark-reasonable.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/color-brewer.css","path":"css/partial/highlight/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/default.css","path":"css/partial/highlight/default.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/dark.css","path":"css/partial/highlight/dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/docco.css","path":"css/partial/highlight/docco.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/dracula.css","path":"css/partial/highlight/dracula.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/far.css","path":"css/partial/highlight/far.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/foundation.css","path":"css/partial/highlight/foundation.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/github-gist.css","path":"css/partial/highlight/github-gist.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/github.css","path":"css/partial/highlight/github.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gml.css","path":"css/partial/highlight/gml.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/googlecode.css","path":"css/partial/highlight/googlecode.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/darcula.css","path":"css/partial/highlight/darcula.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gradient-dark.css","path":"css/partial/highlight/gradient-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/grayscale.css","path":"css/partial/highlight/grayscale.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-light.css","path":"css/partial/highlight/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/hopscotch.css","path":"css/partial/highlight/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/hybrid.css","path":"css/partial/highlight/hybrid.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/idea.css","path":"css/partial/highlight/idea.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ir-black.css","path":"css/partial/highlight/ir-black.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-dark.css","path":"css/partial/highlight/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-dark.css","path":"css/partial/highlight/isbl-editor-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-light.css","path":"css/partial/highlight/isbl-editor-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/kimbie.light.css","path":"css/partial/highlight/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/lightfair.css","path":"css/partial/highlight/lightfair.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/lioshi.css","path":"css/partial/highlight/lioshi.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/kimbie.dark.css","path":"css/partial/highlight/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/magula.css","path":"css/partial/highlight/magula.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/mono-blue.css","path":"css/partial/highlight/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/monokai.css","path":"css/partial/highlight/monokai.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/night-owl.css","path":"css/partial/highlight/night-owl.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nnfx-dark.css","path":"css/partial/highlight/nnfx-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/monokai-sublime.css","path":"css/partial/highlight/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nnfx.css","path":"css/partial/highlight/nnfx.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nord.css","path":"css/partial/highlight/nord.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ocean.css","path":"css/partial/highlight/ocean.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/paraiso-dark.css","path":"css/partial/highlight/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/obsidian.css","path":"css/partial/highlight/obsidian.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/paraiso-light.css","path":"css/partial/highlight/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/pojoaque.css","path":"css/partial/highlight/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_dark.css","path":"css/partial/highlight/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_light.css","path":"css/partial/highlight/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/railscasts.css","path":"css/partial/highlight/railscasts.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/purebasic.css","path":"css/partial/highlight/purebasic.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/rainbow.css","path":"css/partial/highlight/rainbow.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/routeros.css","path":"css/partial/highlight/routeros.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/shades-of-purple.css","path":"css/partial/highlight/shades-of-purple.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/solarized-dark.css","path":"css/partial/highlight/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/solarized-light.css","path":"css/partial/highlight/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/school-book.css","path":"css/partial/highlight/school-book.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/srcery.css","path":"css/partial/highlight/srcery.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/sunburst.css","path":"css/partial/highlight/sunburst.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-bright.css","path":"css/partial/highlight/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-eighties.css","path":"css/partial/highlight/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-blue.css","path":"css/partial/highlight/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night.css","path":"css/partial/highlight/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow.css","path":"css/partial/highlight/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/vs2015.css","path":"css/partial/highlight/vs2015.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/xcode.css","path":"css/partial/highlight/xcode.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/vs.css","path":"css/partial/highlight/vs.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/xt256.css","path":"css/partial/highlight/xt256.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/zenburn.css","path":"css/partial/highlight/zenburn.css","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/tag_plugin/note.styl","path":"css/partial/tag_plugin/note.styl","modified":0,"renderable":1},{"_id":"themes/blank/source/css/partial/tag_plugin/tags.styl","path":"css/partial/tag_plugin/tags.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/.gitignore","hash":"d6cc8c2730e89bbee83e01a5a4490f8dbf12c332","modified":1709715821914},{"_id":"source/_posts/css基础属性解析.md","hash":"538eb8934eb7094f0c921c940341e10463e9f071","modified":1709791654646},{"_id":"source/archives/index.md","hash":"203766457b6ae8f89b6da01589002d97fe341cad","modified":1709781467531},{"_id":"source/_posts/css奇淫技巧.md","hash":"f618836c6ca694ef13dabae2afa07f6eb2aadc4d","modified":1709696742543},{"_id":"source/_posts/js原型链.md","hash":"d3b4137ede674c33748ce31a523e073955662364","modified":1736840787925},{"_id":"source/_posts/cron时间格式的记录.md","hash":"8fd786ec97cb44ba5f816ded0e11c06627c1f17a","modified":1736735072029},{"_id":"source/_posts/debug的各种姿势.md","hash":"04f44a78927b072d16e7581cd28cb6ae343d423e","modified":1736838302244},{"_id":"source/_posts/js里的this.md","hash":"fe5cb80ab0620f870acabace1d81058d26707cf0","modified":1736841738776},{"_id":"source/_posts/js闭包.md","hash":"d06391fb09e431c8059d577afa6ed8b6eaef541c","modified":1709696742547},{"_id":"source/_posts/test.md","hash":"79a6882d1924b11f1302b6ec3c843353783ade64","modified":1709717442408},{"_id":"source/_posts/js异步编程.md","hash":"a83c5b0ca02d8f4807490aaccd1415e3d6e48db0","modified":1737107680006},{"_id":"source/_posts/webpack注意事项.md","hash":"6b609674269fcc11a8c4ce112c2c234fefb9a730","modified":1737364412270},{"_id":"source/_posts/图片格式的区别.md","hash":"65f30d14d6db497ada285926ec92899bef127636","modified":1709696742547},{"_id":"source/_posts/事件流.md","hash":"3e20e01b54602dce9b85f1a6b1fd8c9aa158472d","modified":1709696742547},{"_id":"source/_posts/web常见的安全问题.md","hash":"57a4f0ed070268d33b71e791e30c3fbd971f97c4","modified":1737112568952},{"_id":"source/_posts/基础算法.md","hash":"2a36053a7a648f365a891492b86c0a55223db18f","modified":1709696742547},{"_id":"source/_posts/在浏览器输入URL后发生了什么.md","hash":"73eeb294cb7443e459911fdd66655a3dc97ced06","modified":1709696742547},{"_id":"source/_posts/数据作为电信号存储的知识.md","hash":"bae0cb65c054caa424db275a5c5e98863c4fde49","modified":1736153800650},{"_id":"source/_posts/数据分析的学习路径.md","hash":"3ba64f9bcb900e5b583272c01847892bc1f7a23c","modified":1736739211361},{"_id":"source/_posts/脚手架实现.md","hash":"13c857112be836e89a7e30022908832c9d3187af","modified":1709696742547},{"_id":"source/_posts/自动化测试.md","hash":"046acec247c3d7c92b6428c6fa2840862096eeb4","modified":1737361892481},{"_id":"source/_posts/谷歌插件编写.md","hash":"8a5c68f6136948a288b6bd2c47d7aed53fdc150a","modified":1736759935786},{"_id":"source/_posts/英语单词记录1.md","hash":"d956e45847cce6b49cc2365b4d66512b1e10b5e0","modified":1736737242027},{"_id":"source/_posts/跨域问题.md","hash":"e81b89545bf59efb6093ca0923c105fefee88ebe","modified":1709696742547},{"_id":"source/_posts/路由实现.md","hash":"7748657605ef1a32a507b3083447a9f234fc79ff","modified":1709696742547},{"_id":"source/link/index.md","hash":"cd3d31d5a3f6528d05ec5517870305f3dbccff88","modified":1709783349498},{"_id":"source/_posts/页面布局.md","hash":"6cbf07b338f7ff3f0165915584b55fc45fa2ab83","modified":1709717408649},{"_id":"source/about/index.md","hash":"8de7774eb9bd807e42232b712b81963d6b5fa3d8","modified":1709783603698},{"_id":"source/categories/index.md","hash":"0ddff680e9c342648ed497092783557382a36b9b","modified":1709783523874},{"_id":"source/tags/index.md","hash":"d4ed347c10ccb02f7e3495cac9348a3e6728d249","modified":1709783484262},{"_id":"source/images/box_pattern.jpeg","hash":"8243a2157dc838939b2d31651554067855325ad8","modified":1709696742604},{"_id":"source/images/girl.jpeg","hash":"c9d5c65a0e577c6d6e593dca5dfca3f7c28f8e77","modified":1709696742608},{"_id":"source/images/vertical_align.jpeg","hash":"3107af2816ee82233464bcb8950699e3ea8f3842","modified":1709696742608},{"_id":"themes/blank/_config.yml","hash":"45eb990ce483a499797441457f96b601da51bb7a","modified":1709783515935},{"_id":"themes/blank/README.md","hash":"230d00c59382e38a0bfb23d174772402eee87506","modified":1709780759204},{"_id":"themes/blank/languages/en.yml","hash":"e0d12361d230a271defd9618b1c645df63f5d3ef","modified":1709780759207},{"_id":"themes/blank/scripts/mermaid.js","hash":"90fc166acbaa8b3ec61c8d042ff43af1c0db039f","modified":1709780759227},{"_id":"themes/blank/LICENSE","hash":"7306544691069be1d116c2b38daecdcb012fd0dd","modified":1709780759204},{"_id":"themes/blank/languages/zh-CN.yml","hash":"aed84280f7b8dc71f57db01ff4b43daebc5f9c77","modified":1709780759207},{"_id":"themes/blank/scripts/404.js","hash":"e2e5a51c45dc0aa0e6a03e92cb16d84fc5460508","modified":1709780759227},{"_id":"themes/blank/scripts/year.js","hash":"a931302e8702644d0c80e8f85d379145f2a8cf09","modified":1709780759231},{"_id":"themes/blank/layout/archive.ejs","hash":"23d476da388281955ed84dd842b33e886b1c7da7","modified":1709780759208},{"_id":"themes/blank/layout/404.ejs","hash":"4153b9d446d6c4e10691d479184853975792f450","modified":1709780759207},{"_id":"themes/blank/scripts/replace_config.js","hash":"0ff46c45db709a6e8c64601dc1096b920f617f20","modified":1709780759228},{"_id":"themes/blank/scripts/wordcount.js","hash":"6bf77eedbaf12f78d6dae2f0c48e85707a73b4cd","modified":1709780759230},{"_id":"themes/blank/scripts/post_lazyload.js","hash":"989aaee619bc83b0f22cf17297282fbd5726135a","modified":1709780759228},{"_id":"themes/blank/layout/category.ejs","hash":"16480bc7ff1b0ffbce4cf384eebdfa9485a78abc","modified":1709780759208},{"_id":"themes/blank/layout/post.ejs","hash":"910e1eab4ae13e3d9d937ba8ac9b56c8ba5d9c28","modified":1709780759226},{"_id":"themes/blank/layout/tag.ejs","hash":"cc4df43f5b2af885f56500b6a6d1c9ba38f88398","modified":1709780759226},{"_id":"themes/blank/scripts/tags/note.js","hash":"b435f1edd9f3ba77af4c05e0191efd130fb5255f","modified":1709780759230},{"_id":"themes/blank/layout/page.ejs","hash":"12b2f3acfc43332f32c6ae82aab00a8324a3a363","modified":1709780759209},{"_id":"themes/blank/layout/layout.ejs","hash":"d3956666af7fcdb11bff5689a23f6bb0a5f3d32f","modified":1709780759209},{"_id":"themes/blank/scripts/tags/folding.js","hash":"161550da7b428d0d1b0ae4216bef5219751d1b54","modified":1709780759230},{"_id":"themes/blank/layout/index.ejs","hash":"fdaf171dc0309a64fa0e537420339015ce924207","modified":1709780759208},{"_id":"themes/blank/scripts/tags/tabs.js","hash":"6ddb21fe88dab585f4be3ac372494fd74cb530cb","modified":1709780759230},{"_id":"themes/blank/scripts/tags/btns.js","hash":"1634b36c52d25bd028c352c0fbc7a0042263466d","modified":1709780759229},{"_id":"themes/blank/scripts/tags/checkbox.js","hash":"c89b133be596c1fd93d79004f91e915bf6142d73","modified":1709780759230},{"_id":"themes/blank/source/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1709780759268},{"_id":"themes/blank/source/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1709780759271},{"_id":"themes/blank/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1709780759272},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1709780759268},{"_id":"themes/blank/source/img/favicon.png","hash":"94a13021be3f2c839691e5a153b3311ea7f46fcd","modified":1709791359607},{"_id":"themes/blank/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1709780759271},{"_id":"themes/blank/source/img/loading.gif","hash":"dabf141cac0a42a8dbfb8844e9a8fb1d1f3fceab","modified":1709780759272},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1709780759269},{"_id":"themes/blank/source/js/local-search.js","hash":"affa02ea82b2d5c2331e309aa8f6a7e77d2494e5","modified":1709780759275},{"_id":"themes/blank/source/img/wechat.svg","hash":"6d08667c5881e66d20df72bf2214bae55396554b","modified":1709780759274},{"_id":"themes/blank/source/js/firework.js","hash":"038d20368a9ee07eb9af9a1a15fd86aa506e8a1a","modified":1709780759275},{"_id":"themes/blank/source/js/todark.js","hash":"d910646651c9f749ff7b8045d1e57487b3fe48bb","modified":1709780759276},{"_id":"themes/blank/source/img/paypal.svg","hash":"1dfd643ce13dec27c63847acd6acf3eb17bb598e","modified":1709780759272},{"_id":"themes/blank/layout/partial/archive.ejs","hash":"4c97df9059eec52cf2837bc5bc72d7967a3d65c9","modified":1709780759220},{"_id":"themes/blank/layout/partial/categories.ejs","hash":"312c0125e09e6c0f9be7fadbf434e816c41bc4ee","modified":1709780759220},{"_id":"themes/blank/layout/partial/header.ejs","hash":"956d5fa8ac05189973f61a37a306993f1a10373a","modified":1709780759222},{"_id":"themes/blank/source/js/script.js","hash":"cbeb616c07dfbd74f5ce0aec7a2158e041e5eba1","modified":1709780759275},{"_id":"themes/blank/layout/partial/head.ejs","hash":"00d6ac0c57d14f7d890121f61324d1ef0dc145d5","modified":1709780759221},{"_id":"themes/blank/layout/partial/footer.ejs","hash":"195d8d8ea1e1f17f586dd9dc2ec1cd57bf041d09","modified":1736739061689},{"_id":"themes/blank/layout/partial/gotop.ejs","hash":"fa16fa8d0bebeb39c85bf56249323ce8ffd7973d","modified":1709780759221},{"_id":"themes/blank/layout/partial/article.ejs","hash":"80e49811682c805b7823033c4471df2d14c15935","modified":1709780759220},{"_id":"themes/blank/layout/partial/mobile-header.ejs","hash":"fc681d602911b69406935845f61897605e9c0e70","modified":1709780759222},{"_id":"themes/blank/layout/partial/link.ejs","hash":"4f2be13551a04d43d8998446bc8ff64553d5ec75","modified":1709780759222},{"_id":"themes/blank/layout/partial/post-meta.ejs","hash":"74f71905ef4762f5220be324e62b085643b1dc3e","modified":1709780759224},{"_id":"themes/blank/layout/partial/page.ejs","hash":"c281bd8ed5c3883363588df916892459a3f275e5","modified":1709780759223},{"_id":"themes/blank/layout/partial/recent-posts.ejs","hash":"98cb6264e01a6a50992e4099c7929038bedb1fc0","modified":1709780759224},{"_id":"themes/blank/layout/partial/script.ejs","hash":"2c7909df68d5c7099a97d562ac6f9447e52c3e78","modified":1709780759225},{"_id":"themes/blank/layout/partial/paginator.ejs","hash":"935b7bc0da2ab34893b15c048bc4df9e35892594","modified":1709780759223},{"_id":"themes/blank/source/css/var.styl","hash":"ffc6591955c06ff6bd1e7ec41b3700a015a63904","modified":1709780759267},{"_id":"themes/blank/layout/partial/tags.ejs","hash":"16d8d762ae14ba488179d5684786059afefc8c0d","modified":1709780759225},{"_id":"themes/blank/source/css/style.styl","hash":"6cda87e8af243e192c195c74be98788112f61952","modified":1709780759267},{"_id":"themes/blank/layout/partial/_maths/mermaid.ejs","hash":"91fe441e9dce2a67550b87d7c7d1d69cfa95c4e9","modified":1709780759211},{"_id":"themes/blank/layout/partial/_comment/index.ejs","hash":"9bb8110bf015e1e1ed0e0185139a26ef1ba7384c","modified":1709780759210},{"_id":"themes/blank/layout/partial/_maths/mathjax.ejs","hash":"fc5d45d621e43406894a3d67665a271460827091","modified":1709780759211},{"_id":"themes/blank/layout/partial/_comment/waline.ejs","hash":"c5a2080804a59ebe589514218e5d7937080531f8","modified":1709780759211},{"_id":"themes/blank/layout/partial/_modify/fancybox.ejs","hash":"267c9c0e272b2506f666bd53d3eccb4e0be194a0","modified":1709780759214},{"_id":"themes/blank/layout/partial/_comment/valine.ejs","hash":"99a997833dee225a82c2685feac4baa02513605e","modified":1709780759210},{"_id":"themes/blank/layout/partial/_search/local-search.ejs","hash":"5b3506051d3298b1b4e569e4020d18ccefcf6744","modified":1709780759217},{"_id":"themes/blank/layout/partial/_search/local-searchjs.ejs","hash":"a6aa5505a80a29245b69a37372f45ea9c900f950","modified":1709780759218},{"_id":"themes/blank/layout/partial/_third-party/baidu-analytics.ejs","hash":"5b0b97b24878160ccf4ca392ac5103719110d74b","modified":1709780759218},{"_id":"themes/blank/layout/partial/_modify/sharejs.ejs","hash":"d33cb5e12a4ec8a3e815cea09e7466fa5c0e79cf","modified":1709780759217},{"_id":"themes/blank/layout/partial/_modify/lazyload.ejs","hash":"89b90290a1d491defa247a54ff80a9d9ed404cbc","modified":1709780759214},{"_id":"themes/blank/layout/partial/_third-party/baidu-push.ejs","hash":"96908d8c44f84deb42735d5a6db1154fadd51e7e","modified":1709780759219},{"_id":"themes/blank/source/css/partial/dark.styl","hash":"06d1bf80b27c47fde7b0fcce7c4b4f2fa313e364","modified":1709780759232},{"_id":"themes/blank/source/css/partial/fonts.styl","hash":"a9f8b10fafb5cd6d70572c1bf0d6cd9507c779b0","modified":1709780759232},{"_id":"themes/blank/layout/partial/_third-party/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1709780759219},{"_id":"themes/blank/layout/partial/_modify/audio.ejs","hash":"a36d2adae20fecc4839d217ea576e7b69f7e98c1","modified":1709780759213},{"_id":"themes/blank/source/css/partial/local-search.styl","hash":"573d2714c55f381e3c92acb143a839fd3718aa8e","modified":1709780759264},{"_id":"themes/blank/source/css/partial/media.styl","hash":"1e881b0484768fd7d3ebb4e99bd78cdfd0f15949","modified":1709780759265},{"_id":"themes/blank/source/css/partial/header.styl","hash":"ba1bfb7863938a0f7ca5d6a62c299f54eb109315","modified":1709780759232},{"_id":"themes/blank/source/css/partial/recent-posts.styl","hash":"74b532f862b3122835732f6affd5337f41967218","modified":1709780759265},{"_id":"themes/blank/source/css/partial/highlight.styl","hash":"eafd0965ad02dee18325f0a22998b1ab16ea3b99","modified":1709780759233},{"_id":"themes/blank/layout/partial/_modify/copy.ejs","hash":"efc46186b2845fba38cbefc6fb5a9091e94644b9","modified":1709780759213},{"_id":"themes/blank/source/css/partial/reward.styl","hash":"cba0a0833b396f91cbc13be109f3e815e964de70","modified":1709780759266},{"_id":"themes/blank/layout/partial/_modify/rewards/rewardjs.ejs","hash":"382b0c71c0c91d58777bf00b4219de661f6232b8","modified":1709780759217},{"_id":"themes/blank/layout/partial/_modify/rewards/reward.ejs","hash":"3bd17a0bc81243d580bd14b267b763dd053f04fe","modified":1709780759215},{"_id":"themes/blank/source/css/partial/post.styl","hash":"6c9fc3e739607de3549918344f5a56ceacd573b5","modified":1709780759265},{"_id":"themes/blank/source/css/partial/highlight/a11y-dark.css","hash":"6d0c9b42bb12c36095fb765daeae680f6264dc3a","modified":1709780759233},{"_id":"themes/blank/source/css/partial/highlight/agate.css","hash":"a2e0c77549f832217cc1d70bf23c033dd007acdc","modified":1709780759234},{"_id":"themes/blank/source/css/partial/highlight/arduino-light.css","hash":"34643df1a21951859eef3182a6e771352d9b07fa","modified":1709780759235},{"_id":"themes/blank/source/css/partial/highlight/an-old-hope.css","hash":"94c46eea4ab15cb0f093361bb3c4279cac5f1fe1","modified":1709780759234},{"_id":"themes/blank/source/css/partial/highlight/arta.css","hash":"84b10a804a198e9f3010971bc7cfaabbf4299d75","modified":1709780759235},{"_id":"themes/blank/source/css/partial/highlight/ascetic.css","hash":"23edee489d7d42ac15e94f2c0df8af9e1bbdecf7","modified":1709780759236},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-dark.css","hash":"4a7e94f97c73bdb807cb3b3fde8cb3ebf9fabb9c","modified":1709780759236},{"_id":"themes/blank/source/css/partial/highlight/a11y-light.css","hash":"96010219f371f28085e1f222aa1a7eb001805bcc","modified":1709780759234},{"_id":"themes/blank/source/css/partial/highlight/androidstudio.css","hash":"0deff643b52a52605b78d54a081707d39df03bed","modified":1709780759235},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-dark.css","hash":"f6769c7b68f938059ec7257a8f07aa214d9569a3","modified":1709780759236},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-dark.css","hash":"2e0a7cdcca2a1d2c4b3e2e8a4249f50cfe59410a","modified":1709780759238},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-light.css","hash":"e54adb3a7061bb9c40398d15b4166f94b13edc6a","modified":1709780759237},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-light.css","hash":"1b76cb6fe52cb4e505ededdcb8b0b8981a9002ed","modified":1709780759238},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-dark.css","hash":"23cb99fb223dd7d3c36ab12a1e2e8c9801d87f6b","modified":1709780759237},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-dark.css","hash":"ede696513d4997a143e479d7c09cd89749c99933","modified":1709780759238},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-light.css","hash":"ff964bba2eb5a4281d4f273f1af33c7b7cba720f","modified":1709780759236},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-light.css","hash":"0e85bb6e24f9f2cc1b00a488be3d83e55fcd47b3","modified":1709780759238},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-light.css","hash":"711dfeb0edbe6f57c570367470b6ab907cf46cf1","modified":1709780759237},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-dark.css","hash":"22cb142ef6f6f4f8687214e15729d6b704bf2b0c","modified":1709780759239},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-dark.css","hash":"58e579c0121eedeead5baf31ecb3213b592b019f","modified":1709780759239},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-dark.css","hash":"c686abc9c55ec430cae77d7da9e5ad90c1f593e8","modified":1709780759240},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-light.css","hash":"0455d731fb3af3fee0cc489860528fb4919c69ca","modified":1709780759240},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-light.css","hash":"25934f2bfe7f71282495569f2173b172f04dc35e","modified":1709780759239},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-light.css","hash":"b519a41e09b5449f03520b043443652b9ee5dc91","modified":1709780759240},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-dark.css","hash":"a8f0182bff79292ba8ab6c65c562a6692333891d","modified":1709780759241},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark.css","hash":"031c3c1e59406e0658e7f1197fe6d6a5029c3055","modified":1709780759242},{"_id":"themes/blank/source/css/partial/highlight/atom-one-light.css","hash":"c206ead3be5954f4c125311217d8e250edf6e63c","modified":1709780759243},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-light.css","hash":"f06168bf8e89838c31910697a1f637b30099986f","modified":1709780759242},{"_id":"themes/blank/source/css/partial/highlight/brown-paper.css","hash":"05b31c40094f2912a370a12ce252b1f56a4b8f38","modified":1709780759243},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-dark.css","hash":"d56391073d8ea82dc91bdb461c83631a47cca82f","modified":1709780759241},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-light.css","hash":"0e88d434a404bb1f2c84ab935342c2f4f3901a28","modified":1709780759241},{"_id":"themes/blank/source/css/partial/highlight/codepen-embed.css","hash":"d3e1fec332a44f96817129e7ff4c9f23defcbd40","modified":1709780759243},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark-reasonable.css","hash":"e86ca6ffcdb5371eba9e99e88d7ddb2412950aa1","modified":1709780759242},{"_id":"themes/blank/source/css/partial/highlight/dark.css","hash":"cd37c30905f983490a7f0d4647a11171f483f812","modified":1709780759244},{"_id":"themes/blank/source/css/partial/highlight/default.css","hash":"daab0ef2a4a5e7c856209bcc35de1dbff9665d22","modified":1709780759245},{"_id":"themes/blank/source/css/partial/highlight/color-brewer.css","hash":"1c952672bafab7dff6da2354741e813cc045d8d7","modified":1709780759244},{"_id":"themes/blank/source/css/partial/highlight/dracula.css","hash":"83cb7632a977d99c40596ffe366c171f7a5c15e2","modified":1709780759245},{"_id":"themes/blank/source/css/partial/highlight/docco.css","hash":"a8fc483604b2cab5ffe166bb598e922024f79014","modified":1709780759245},{"_id":"themes/blank/source/css/partial/highlight/github.css","hash":"29c4f2ac5fadf5146021eefb44984ac08e9e9688","modified":1709780759247},{"_id":"themes/blank/source/css/partial/highlight/far.css","hash":"9a2331bd7def5bb1ef35c2575ba5ea1cccab8acf","modified":1709780759245},{"_id":"themes/blank/source/css/partial/highlight/foundation.css","hash":"4f04dcb43a3144ae0c22c82d971eef24c48363a0","modified":1709780759247},{"_id":"themes/blank/source/css/partial/highlight/github-gist.css","hash":"23fc125b60162b14781d356ce84c096c0212f1a3","modified":1709780759247},{"_id":"themes/blank/source/css/partial/highlight/darcula.css","hash":"5a8a0f2b61c9c935d92d34ef38b989805a6e978e","modified":1709780759244},{"_id":"themes/blank/source/css/partial/highlight/grayscale.css","hash":"e71b26a8c2f0c675598552551c1a6ffa9790a5d0","modified":1709780759249},{"_id":"themes/blank/source/css/partial/highlight/gml.css","hash":"fee6d7a0e8d8cbbfb147e9af2812808f9853dd71","modified":1709780759248},{"_id":"themes/blank/source/css/partial/highlight/gradient-dark.css","hash":"5b59633a52e52151686a2bf6aa04ec4324f3d03e","modified":1709780759248},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-light.css","hash":"363141bbcb1dd986c69bc356f1b5e195c46a1a44","modified":1709780759249},{"_id":"themes/blank/source/css/partial/highlight/idea.css","hash":"f75a28d7216218341a8319b2a267f5781ae98397","modified":1709780759250},{"_id":"themes/blank/source/css/partial/highlight/hopscotch.css","hash":"13a20a61be2c23166d2adc34a0fcd11ffb967073","modified":1709780759250},{"_id":"themes/blank/source/css/partial/highlight/ir-black.css","hash":"0d7d59283979b9fc3b6204973b3a344264bfda47","modified":1709780759251},{"_id":"themes/blank/source/css/partial/highlight/googlecode.css","hash":"7162f4d01403326754b0ec13cf1b67dbd69fb576","modified":1709780759248},{"_id":"themes/blank/source/css/partial/highlight/lightfair.css","hash":"b00d0919e5370462bb4a490493750b8b4c17ff03","modified":1709780759252},{"_id":"themes/blank/source/css/partial/highlight/hybrid.css","hash":"8315bc3988bebb758771174b185cee950d27067f","modified":1709780759250},{"_id":"themes/blank/source/css/partial/highlight/kimbie.light.css","hash":"a254e40ae09f0b639d00cbd7e99f90469b53de41","modified":1709780759252},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-dark.css","hash":"3c742bdc0fad6cae97bdf30dae7f36d42f9758d9","modified":1709780759251},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-light.css","hash":"0ca0cc52b5536788e1d898fa3c9256b652d09ce4","modified":1709780759251},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-dark.css","hash":"79b9188de6f9806b986a6847b736898ddee09441","modified":1709780759249},{"_id":"themes/blank/source/css/partial/highlight/lioshi.css","hash":"48459e415a1c5c9e5c5ccdaa1de16b71abf92891","modified":1709780759253},{"_id":"themes/blank/source/css/partial/highlight/mono-blue.css","hash":"d684208c3fc2e3724421ad342d6fc15875f23fc5","modified":1709780759253},{"_id":"themes/blank/source/css/partial/highlight/kimbie.dark.css","hash":"61bd80ed7c41b5122d543620784aadf4e44d2b8e","modified":1709780759252},{"_id":"themes/blank/source/css/partial/highlight/monokai.css","hash":"4598a4e47a74a650eab69fee0eebfe8efee7d5a6","modified":1709780759254},{"_id":"themes/blank/source/css/partial/highlight/magula.css","hash":"3297dd14312ea8c36f1e4602c9516f414077055a","modified":1709780759253},{"_id":"themes/blank/source/css/partial/highlight/nnfx-dark.css","hash":"0328bdb2744dc5cf28e700e0e6ba23777ad701ba","modified":1709780759254},{"_id":"themes/blank/source/css/partial/highlight/nord.css","hash":"82148093d2954ab685a8e82602631b551a8777b5","modified":1709780759255},{"_id":"themes/blank/source/css/partial/highlight/night-owl.css","hash":"2f5c43199055deb5966ca5412c7a9a39f2c68b88","modified":1709780759254},{"_id":"themes/blank/source/css/partial/highlight/obsidian.css","hash":"48890593dd858ed8d47b40e34487edf0899ece35","modified":1709780759255},{"_id":"themes/blank/source/css/partial/highlight/monokai-sublime.css","hash":"a0742650bb27f05d1d9572decaa0bb931f9bead3","modified":1709780759254},{"_id":"themes/blank/source/css/partial/highlight/nnfx.css","hash":"da49d999c92643a41894fe0265cc8f155ad0842f","modified":1709780759254},{"_id":"themes/blank/source/css/partial/highlight/paraiso-dark.css","hash":"3d553a29acc72cd0f5db4ad9c70d755d481b0687","modified":1709780759256},{"_id":"themes/blank/source/css/partial/highlight/paraiso-light.css","hash":"568814940dfdd36118a7f8665656ac36b643190e","modified":1709780759256},{"_id":"themes/blank/source/css/partial/highlight/pojoaque.css","hash":"3a06d371ea4b1e097860e4a9747d817cd3c5e888","modified":1709780759256},{"_id":"themes/blank/source/css/partial/highlight/rainbow.css","hash":"093bec82c2577df4d0d761dee30d5472c4f697f1","modified":1709780759258},{"_id":"themes/blank/source/css/partial/highlight/ocean.css","hash":"21472b75fd4eb1810764fdc2704522fe249877ca","modified":1709780759255},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_dark.css","hash":"f963aae29d81512550ff699a63b2f3a2439bf404","modified":1709780759257},{"_id":"themes/blank/source/css/partial/highlight/routeros.css","hash":"170a0c7f80668f3012676bb29ef6cdcd098183e3","modified":1709780759258},{"_id":"themes/blank/source/css/partial/highlight/shades-of-purple.css","hash":"41d8f8210d7b13bb1d31c0be2c10427954535b80","modified":1709780759259},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_light.css","hash":"edef0e3036cf276b3f70bb4df55003f6a27e56e1","modified":1709780759257},{"_id":"themes/blank/source/css/partial/highlight/railscasts.css","hash":"2b8d2c1faadc51d312cb0bd7058c5431400c2924","modified":1709780759258},{"_id":"themes/blank/source/css/partial/highlight/purebasic.css","hash":"2f578beb25d16c45ca0774519df3fe50f3c35760","modified":1709780759257},{"_id":"themes/blank/source/css/partial/highlight/solarized-light.css","hash":"3a8097995857f8557a1ab53db360175227a638cb","modified":1709780759260},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-eighties.css","hash":"217f8dd94f955b452d6055b3a3a802e9f2459f82","modified":1709780759262},{"_id":"themes/blank/source/css/partial/highlight/solarized-dark.css","hash":"a624f1a85e915db688949b648754a84b215efa72","modified":1709780759259},{"_id":"themes/blank/source/css/partial/highlight/school-book.css","hash":"ebfec3f0e1f473593595c8146dcf79e0c445a8b3","modified":1709780759259},{"_id":"themes/blank/source/css/partial/highlight/srcery.css","hash":"c1634ac1680f6df5efc1fecb51a7912d46aceaa8","modified":1709780759260},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-bright.css","hash":"d89269a86b0587c8011ea4940ebf90bd99d825bf","modified":1709780759261},{"_id":"themes/blank/source/css/partial/highlight/sunburst.css","hash":"57e3690fe439c511c2585869f2b8f4f62cb3535e","modified":1709780759260},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night.css","hash":"9012ab4e1d73ed9d71ef9c11ed69d82f70f746cc","modified":1709780759262},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-blue.css","hash":"873e26f5cb802d941f88d4e83f2695bf23e17401","modified":1709780759261},{"_id":"themes/blank/source/css/partial/highlight/tomorrow.css","hash":"19c7cbb02b4486b3bc1e9cdda6fc77acb69f0b85","modified":1709780759263},{"_id":"themes/blank/source/css/partial/highlight/vs2015.css","hash":"401f8ccde362ac62a3b1b3bfe79299de16a665db","modified":1709780759263},{"_id":"themes/blank/source/css/partial/highlight/vs.css","hash":"0b06af7596e05b5d2928475fbb6902917ef3ed3f","modified":1709780759263},{"_id":"themes/blank/source/css/partial/tag_plugin/note.styl","hash":"0d295163c86a09d3df21f30a893b2c3bd058cf83","modified":1709780759266},{"_id":"themes/blank/source/css/partial/highlight/xcode.css","hash":"e31ee8ee5e865909d89a06e776e4c95b084318a0","modified":1709780759264},{"_id":"themes/blank/source/css/partial/highlight/zenburn.css","hash":"4fb2d4fc4e3e17d1b8c191c4965bed15191bbb61","modified":1709780759264},{"_id":"themes/blank/source/css/partial/highlight/xt256.css","hash":"63fde91354b505bc96fb6562f31397c6605a47d8","modified":1709780759264},{"_id":"themes/blank/source/css/partial/tag_plugin/tags.styl","hash":"cd60b8d86aa6a038ee629663d57c3334bb1c04fe","modified":1709780759266},{"_id":"themes/blank/source/img/wechat.jpg","hash":"4cd2f1b5c12750f66f32a1bf150dc755beb0ff58","modified":1709780759273},{"_id":"themes/blank/source/img/alipay.jpg","hash":"432585449232dd4fd89a5e4761332747ba5ecc73","modified":1709780759270},{"_id":"public/search.xml","hash":"d93f52b5b851f277ba40385ef3c2ddd41ee22746","modified":1737365274325},{"_id":"public/archives/index.html","hash":"b2b6d10672c3a459e29f445e1542da042b50a202","modified":1736841763104},{"_id":"public/link/index.html","hash":"747c1dbd04d9f34330d2de0f06953f9265acb691","modified":1736739100690},{"_id":"public/tags/index.html","hash":"e126975e1fee367c799475d948a1139d72f1e76a","modified":1736739100690},{"_id":"public/about/index.html","hash":"6e3c3be9955c6c64e0f8525b1f85c16844227d7f","modified":1736739100690},{"_id":"public/categories/index.html","hash":"bea614fcc3b0b1a17e634b57b4346dfc3beda455","modified":1736739100690},{"_id":"public/2025/01/13/数据分析的学习路径/index.html","hash":"568a3e75ac1e11154d7b7778f0c90060d4feba72","modified":1736841763104},{"_id":"public/2025/01/13/谷歌插件编写/index.html","hash":"becce7a69ade536385565bd03d601385e0be1f8d","modified":1736759942210},{"_id":"public/2025/01/13/cron时间格式的记录/index.html","hash":"f935f4eaf2e04b63af95130c1dba53ef7ce227df","modified":1736739100690},{"_id":"public/2025/01/02/数据作为电信号存储的知识/index.html","hash":"ced1b32ff5af2bfd14da0d24510a96fc0fe3dc99","modified":1736739100690},{"_id":"public/2018/02/07/debug的各种姿势/index.html","hash":"3bcde9ef3946ac0813aff0fc670f0e875866ab70","modified":1736841763104},{"_id":"public/2018/02/07/自动化测试/index.html","hash":"614331b7a6bf505cdd4cd172cc1b0602240a0b5b","modified":1737365274325},{"_id":"public/2018/02/07/路由实现/index.html","hash":"eb74368ed9c987579515960b63ea7b85d00b9fcf","modified":1736739100690},{"_id":"public/2018/02/07/脚手架实现/index.html","hash":"ae2e60f86afe5813b03e20b75357e912b346efa6","modified":1736739100690},{"_id":"public/2018/02/07/跨域问题/index.html","hash":"059d7b2098940e478208771c229686bc8fa03bbc","modified":1736739100690},{"_id":"public/2018/02/07/js原型链/index.html","hash":"53cb5dcc4a002a5ce73a3233aa2fc2b9b50097be","modified":1736841763104},{"_id":"public/2018/02/07/js异步编程/index.html","hash":"73fe72e939997f468d99e647e0367752dc582e99","modified":1737107770528},{"_id":"public/2018/02/07/js里的this/index.html","hash":"cd2fe64464a5d383da4dce6918895aabb7f09ba5","modified":1736841763104},{"_id":"public/2018/02/07/js闭包/index.html","hash":"96b53f8a3e3bb859ec70d495ba37f15f00acc7f9","modified":1736739100690},{"_id":"public/2018/02/07/事件流/index.html","hash":"f3f03d6742583d9ff0f132a5445950672a44f8f1","modified":1736739100690},{"_id":"public/2018/02/07/基础算法/index.html","hash":"f9fef5312a5aa0dd6d3310f9187fa0745129c0ea","modified":1736739100690},{"_id":"public/2018/02/07/webpack注意事项/index.html","hash":"276720269aece8c9d932faf73a9a459c479b6a4c","modified":1737365274325},{"_id":"public/2018/02/07/web常见的安全问题/index.html","hash":"75650bd42f2f2ffaf9acf3010d44c273b23a745e","modified":1737112712955},{"_id":"public/2018/02/07/在浏览器输入URL后发生了什么/index.html","hash":"3f95faa1ceeabeff8efc679a6e91d28bb87f08cd","modified":1736739100690},{"_id":"public/2018/02/07/图片格式的区别/index.html","hash":"903f9bd54fec6d27fb4c06cab4e59778b7cf4462","modified":1736739100690},{"_id":"public/2018/02/07/css奇淫技巧/index.html","hash":"11f5003f38c2c3f7a55c7e366e36579e89b7cf7d","modified":1736739100690},{"_id":"public/2018/02/07/css基础属性解析/index.html","hash":"ab5fe898f7bc5f1e8272a750f3f784f02b6460dd","modified":1736739100690},{"_id":"public/2018/02/05/test/index.html","hash":"e5305a964d205d320766e961bbe2cddfbd243cf7","modified":1736739100690},{"_id":"public/categories/时间/index.html","hash":"c2a2055ce0302ce1da985e653d227b492f0c3436","modified":1736739100690},{"_id":"public/categories/css/index.html","hash":"400050f53d4e07187451797e353e4b213e6376b1","modified":1736739100690},{"_id":"public/categories/javascript/index.html","hash":"d990ecc24631afac1b29a17897fe8801d21e0ba5","modified":1736739100690},{"_id":"public/categories/test/index.html","hash":"c8a6e8e00425eb3e5685384d8eb4e261fce5f911","modified":1736739100690},{"_id":"public/categories/debug/index.html","hash":"8293f3db5ad77ec2a1c5bc37701942885f871dcc","modified":1736739100690},{"_id":"public/categories/自动化/index.html","hash":"714ea7fcd64ad3e5f166cf46f35309fa8453d817","modified":1736739100690},{"_id":"public/categories/科普/index.html","hash":"a0f98f81e4d351e3e886b85293192e71cf4082a5","modified":1736739100690},{"_id":"public/categories/web安全/index.html","hash":"24c5e0f68aa70602d1f3f03f4267ae3d8b109142","modified":1736739100690},{"_id":"public/categories/算法/index.html","hash":"2858643a2e0976f9904e0721dd65b74298ae0bb3","modified":1736739100690},{"_id":"public/categories/计算机/index.html","hash":"d09f0abad603d1a894f2ab1532cf5514abe4d721","modified":1736739100690},{"_id":"public/categories/自动化测试/index.html","hash":"918022c887275fff1716e3e6b829a2db00c26dfc","modified":1736739100690},{"_id":"public/categories/英语/index.html","hash":"21741025894b3bdb21cadccbea34483f2446629f","modified":1736739100690},{"_id":"public/archives/page/2/index.html","hash":"2dce4a73abb20c96252e47ad959cf409f22e7ce2","modified":1736841763104},{"_id":"public/archives/page/3/index.html","hash":"04a46efb7be2b6f8117f877bc71e770c1de7c093","modified":1736841763104},{"_id":"public/archives/2018/index.html","hash":"5100cacb7ff4e4f4b0cb0e920ae8fee82c742a78","modified":1736739100690},{"_id":"public/archives/2018/page/2/index.html","hash":"2aee1583f1cbb7fedb279a3d587a506f93daa80f","modified":1736739100690},{"_id":"public/archives/2018/02/index.html","hash":"a25f2931a0e1c5fa141d5261d84e3eaa5cd07c98","modified":1736739100690},{"_id":"public/archives/2018/02/page/2/index.html","hash":"0c67b097f885c94018983362bd2f63f484fcc69c","modified":1736739100690},{"_id":"public/archives/2025/index.html","hash":"6c47f571bb9a91e1edf9f2aab45acc509b2ffb51","modified":1736841763104},{"_id":"public/archives/2025/01/index.html","hash":"756fe9550f5b5e6a1b963b7f927d18cf96b738eb","modified":1736841763104},{"_id":"public/tags/cron/index.html","hash":"02aaf26a37e70eb8bdf7a28bb0d82f4fa7e93218","modified":1736739100690},{"_id":"public/tags/奇淫技巧/index.html","hash":"20acb82be1e2fb1c73d60f09df50bde6d57741ea","modified":1736739100690},{"_id":"public/tags/基础属性/index.html","hash":"bc97b72019fa0aa86536f298dabe419e6db1423a","modified":1736739100690},{"_id":"public/tags/js/index.html","hash":"26dc7febf9ff9163641368a011a0268c1d00e2df","modified":1736739100690},{"_id":"public/tags/this/index.html","hash":"a1535490b1a8436cd5c8d9ca0eca5dd3522e5786","modified":1736739100690},{"_id":"public/tags/原型链/index.html","hash":"c63924cbbcbd8186b8659e981a8067b580b7683e","modified":1736739100690},{"_id":"public/tags/test/index.html","hash":"85c5dc529f2e808af82b4ba00b7a91c02936c5f7","modified":1736739100690},{"_id":"public/tags/异步编程/index.html","hash":"732ad1240a66af0420990eb189251d3aea3c5b92","modified":1736739100690},{"_id":"public/tags/闭包/index.html","hash":"726d6acb91130f2db53185f4f6501c1e4fcbb3d5","modified":1736739100690},{"_id":"public/tags/debug/index.html","hash":"0e7c35ac739a5886e48cf5b8cfee48c1b1e65dfb","modified":1736739100690},{"_id":"public/tags/webpack/index.html","hash":"5c4e2f075d80b50eae0fbea9c33730832332c21f","modified":1736739100690},{"_id":"public/tags/图片/index.html","hash":"bfdd41f1029818602ed55a2cfe42de873dabdfa7","modified":1736739100690},{"_id":"public/tags/web安全/index.html","hash":"d5c202bf936023a486b806303c0ac2b3dbc43d05","modified":1736739100690},{"_id":"public/tags/数据结构/index.html","hash":"3c5ca26394af30f939bf339815da2157503a45cd","modified":1736739100690},{"_id":"public/tags/数据分析/index.html","hash":"f1768e33853755fb6090bce78d18dcde73cb23f9","modified":1736739100690},{"_id":"public/tags/事件流/index.html","hash":"c9c9d73adf2cd92dcde579bec49235d58e5d9f23","modified":1736739100690},{"_id":"public/tags/测试/index.html","hash":"94cecc0bbaf06a87f97e705d0e9ae866dc080edd","modified":1736739100690},{"_id":"public/tags/自动化/index.html","hash":"51194d2159a26ff052640d3e212eb627a39cf593","modified":1736739100690},{"_id":"public/tags/脚手架/index.html","hash":"30e26e24538b9fb3148b29ff844ae65efa457fe3","modified":1736739100690},{"_id":"public/tags/http/index.html","hash":"22ff3fb5242d8a2e13022666338bef57a74cd93f","modified":1736739100690},{"_id":"public/tags/跨域/index.html","hash":"77322ff5b53ecbc0a26568fb65f06788d79caeab","modified":1736739100690},{"_id":"public/tags/谷歌插件/index.html","hash":"9ba19bc9cf4508462d4df97c06bb93e1e80444c7","modified":1736739100690},{"_id":"public/tags/cursor/index.html","hash":"a85c5e7758789e9eeb901ab38a205f222a2587e8","modified":1736739100690},{"_id":"public/tags/路由/index.html","hash":"85fbe47b3b6cce0f912e2735ef6c5ff63ddb6afc","modified":1736739100690},{"_id":"public/tags/flex/index.html","hash":"b2140a5843bcefd8a9ef6969c76860cef4fef4b0","modified":1736739100690},{"_id":"public/tags/float/index.html","hash":"e61f563384586f4614d15de046ffaaac711847f9","modified":1736739100690},{"_id":"public/tags/前端/index.html","hash":"2cdfade758aec88486d1b8380547f42d78d32df8","modified":1736739100690},{"_id":"public/tags/布局/index.html","hash":"f17d55d4bd455d78d76b6a5d3b37ac7892a634ad","modified":1736739100690},{"_id":"public/tags/英语单词/index.html","hash":"33287f56703d8ff9ff050e17d83aaafb2ed301f1","modified":1736739100690},{"_id":"public/tags/计算机原理/index.html","hash":"8eb7f494c74d1f4d67b1191553d1ed01b576aaeb","modified":1736739100690},{"_id":"public/tags/计算机基础知识/index.html","hash":"64beac30d5b03aa78ab21c937b95b23425bc72b5","modified":1736739100690},{"_id":"public/2025/01/13/英语单词记录1/index.html","hash":"dfec5e033bd294d6b16527fa19c9a6232814f2ed","modified":1736739100690},{"_id":"public/2018/02/07/页面布局/index.html","hash":"028cf1b8ee5c4bee6304865fc89772e7061b7af4","modified":1736739100690},{"_id":"public/index.html","hash":"82ab4e80a2e2ecb45857d3fef6eaad982fb4c313","modified":1737365274325},{"_id":"public/page/2/index.html","hash":"c7dfa0cf08b304e7d8157f2cefdd07032757a3b4","modified":1737365274325},{"_id":"public/page/3/index.html","hash":"dd0fd0700aec7dddebc0b8542a109d9e8555f668","modified":1736841763104},{"_id":"public/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1736739100690},{"_id":"public/img/favicon.png","hash":"94a13021be3f2c839691e5a153b3311ea7f46fcd","modified":1736739100690},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1736739100690},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1736739100690},{"_id":"public/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1736739100690},{"_id":"public/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1736739100690},{"_id":"public/img/wechat.svg","hash":"6d08667c5881e66d20df72bf2214bae55396554b","modified":1736739100690},{"_id":"public/img/loading.gif","hash":"dabf141cac0a42a8dbfb8844e9a8fb1d1f3fceab","modified":1736739100690},{"_id":"public/img/paypal.svg","hash":"1dfd643ce13dec27c63847acd6acf3eb17bb598e","modified":1736739100690},{"_id":"public/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1736739100690},{"_id":"public/js/local-search.js","hash":"7235f78007bde4ddc94911596128346364eefe3b","modified":1736739100690},{"_id":"public/js/firework.js","hash":"e9f29679ebb2f581ccadd39ef18c89cfc44e0710","modified":1736739100690},{"_id":"public/js/script.js","hash":"7bdd6dcc73e8d756961a1dfc6d80700a7112c45a","modified":1736739100690},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1736739100690},{"_id":"public/css/partial/dark.css","hash":"c217e67aebe0eb5b3e39c893a41822630343af6d","modified":1736739100690},{"_id":"public/css/partial/local-search.css","hash":"a7a352b4086aef84a7db40032db0e25017d51c67","modified":1736739100690},{"_id":"public/js/todark.js","hash":"09d8e17071e73aeeff1957827c46e39c1fb050f5","modified":1736739100690},{"_id":"public/css/partial/fonts.css","hash":"2718dc708c8a838af3c649e9737289467a1439d1","modified":1736739100690},{"_id":"public/css/partial/highlight.css","hash":"8b41ab31476e1cf2ca195733d0cfb7316708be53","modified":1736739100690},{"_id":"public/css/partial/header.css","hash":"84e3557546f3d654a11bde08f83c0ca59feac9d2","modified":1736739100690},{"_id":"public/css/partial/media.css","hash":"61f59c34250aa5e3a76cb3d23d521ec688398214","modified":1736739100690},{"_id":"public/css/partial/post.css","hash":"ef9c5e4eee46cc0582f2e5e7592f787ab92e8d84","modified":1736739100690},{"_id":"public/css/partial/highlight/a11y-dark.css","hash":"367b81c201179eb6b9e8448be7d9afe900324d0e","modified":1736739100690},{"_id":"public/css/partial/reward.css","hash":"844196795eb7251f53b120b406dbd411b592800d","modified":1736739100690},{"_id":"public/css/partial/highlight/an-old-hope.css","hash":"b77c50f80832cd26919775863cc49e694e84b888","modified":1736739100690},{"_id":"public/css/partial/recent-posts.css","hash":"06471b0f4d18c702eb3a149ba9add2cf40ec069f","modified":1736739100690},{"_id":"public/css/partial/highlight/a11y-light.css","hash":"6b964117406a7ddab93d598e14441eb9f1f6929a","modified":1736739100690},{"_id":"public/css/partial/highlight/agate.css","hash":"2c53b6f63569eb43a3d3c32b0d2920389e9ec397","modified":1736739100690},{"_id":"public/css/partial/highlight/androidstudio.css","hash":"4cf3233b038bbd5083471904025eb4446c08e983","modified":1736739100690},{"_id":"public/css/style.css","hash":"f470a3c5e6911958243d3fd44807766c59dfa1d4","modified":1736739100690},{"_id":"public/images/box_pattern.jpeg","hash":"8243a2157dc838939b2d31651554067855325ad8","modified":1736739100690},{"_id":"public/img/wechat.jpg","hash":"4cd2f1b5c12750f66f32a1bf150dc755beb0ff58","modified":1736739100690},{"_id":"public/css/partial/highlight/arta.css","hash":"4dea73980726ac09d27927b8d38f6196644b6821","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-cave-dark.css","hash":"9fb89fd8a8109a7c7c2450b1ebc55f5cee9d4a59","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-dune-dark.css","hash":"4bae8ae51072e23b81ee860671ac28a951620c57","modified":1736739100690},{"_id":"public/css/partial/highlight/ascetic.css","hash":"5e2ac91bc9c3852359ccf4ce7eefdea012a903ab","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-estuary-dark.css","hash":"d9f91f0f440a838cc189eca4fe90dae85f1da6a0","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-dune-light.css","hash":"c9c95f9665bf6bc52fed3a2141fbe600fc6a25f8","modified":1736739100690},{"_id":"public/css/partial/highlight/arduino-light.css","hash":"a6b27a3e53fe933317531b6bba1ec0887508f0b6","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-forest-light.css","hash":"c47a06662c4bba5b24d5982bf9280b0c65d7b8f0","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-estuary-light.css","hash":"594a205e0c988db4ca461131573525185208587f","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-lakeside-dark.css","hash":"8de3d9a1e817bdeb73c0234bf6672b4b381af8ac","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-heath-light.css","hash":"fb2f704e83309a0886a933b2f9c1efe25078f67e","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-heath-dark.css","hash":"0d079c2ab3a7c308186923a205a31fcfab3a7ce4","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-cave-light.css","hash":"135f95e783576f0d4721702c2af6b2c03204efc4","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-forest-dark.css","hash":"931630149abdee4fdcc8469705af6a4205fe7fbf","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-lakeside-light.css","hash":"3340cb6b25a35adfe377e7f24b8ee6729b8aaaf1","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-seaside-light.css","hash":"5f7d74ade8accb86da766ecc8616b29b2c365c8a","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-plateau-dark.css","hash":"9f941857191f79cec8bc2899181ce0aadfdcf3dd","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-savanna-light.css","hash":"42438235ccf575c31c80710b5fd2dff2973159c2","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-savanna-dark.css","hash":"62ae162ac812e39b3c739d7d9e8d06c10883d8a9","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-seaside-dark.css","hash":"ef85351aaffa777ad7c4f2ecc107e429abe6de6a","modified":1736739100690},{"_id":"public/css/partial/highlight/color-brewer.css","hash":"bfe58ef6622dd52d03530eb1a39a754e9b819fa9","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-sulphurpool-dark.css","hash":"aad41fad6f7e1c9624f31f17dbcad6f8c3489a78","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-plateau-light.css","hash":"e7d8ba7ba12a5ed46353e647a6f9eec54e039cf0","modified":1736739100690},{"_id":"public/css/partial/highlight/atelier-sulphurpool-light.css","hash":"04061783a48ee2f07225b7d46209a1fc222ca6d4","modified":1736739100690},{"_id":"public/css/partial/highlight/brown-paper.css","hash":"2a17689adfeee7cf84362855c02a200be2d7456d","modified":1736739100690},{"_id":"public/css/partial/highlight/codepen-embed.css","hash":"c6bc815b975213b5ea318097e985dadd69bee815","modified":1736739100690},{"_id":"public/css/partial/highlight/atom-one-dark.css","hash":"6d02e151baa92610cb313e54241178464a2f69be","modified":1736739100690},{"_id":"public/css/partial/highlight/atom-one-light.css","hash":"c394de897c2807066e334b6b01e77d3a11a7217c","modified":1736739100690},{"_id":"public/css/partial/highlight/docco.css","hash":"028e4784745ad867cb9d0cd217a4d136fcdc753b","modified":1736739100690},{"_id":"public/css/partial/highlight/atom-one-dark-reasonable.css","hash":"95edd5336a61bf3676cbae6c918cf939379720cd","modified":1736739100690},{"_id":"public/css/partial/highlight/default.css","hash":"5e21e8bdb737a7aa21abaa308723f3b48d193f0f","modified":1736739100690},{"_id":"public/css/partial/highlight/far.css","hash":"a35ee476520d0ccb73b0db2f4fb1ef78eed128bc","modified":1736739100690},{"_id":"public/css/partial/highlight/foundation.css","hash":"642fe4ccbb66961ae8c1b42a7b27c777a4e0e97e","modified":1736739100690},{"_id":"public/css/partial/highlight/github-gist.css","hash":"7a725cdf0a5a7fe6a4c89dfed0dd39eaee66cf28","modified":1736739100690},{"_id":"public/css/partial/highlight/dark.css","hash":"d64ff770effb3a4e7ac0e90874cca3c01d64d73f","modified":1736739100690},{"_id":"public/css/partial/highlight/github.css","hash":"b809480f9810347dfab9f59e5c2130ee79e38447","modified":1736739100690},{"_id":"public/css/partial/highlight/dracula.css","hash":"c1f03c28c6c1175e1ab9ab791732496706781ad5","modified":1736739100690},{"_id":"public/css/partial/highlight/googlecode.css","hash":"d4249c5c0cb209198b1ae39070d4ac0494bd75d3","modified":1736739100690},{"_id":"public/css/partial/highlight/gml.css","hash":"c5b0d8ccb337a7083dbfefd16c156e5ea8865a09","modified":1736739100690},{"_id":"public/css/partial/highlight/gradient-dark.css","hash":"8f52973d429abfb6c40877e33bbcd4d376d75c8d","modified":1736739100690},{"_id":"public/css/partial/highlight/hopscotch.css","hash":"bb42de173ac5d1fa98a58a6106d492e5246bf37e","modified":1736739100690},{"_id":"public/css/partial/highlight/darcula.css","hash":"e1eb3d715fff66e16e045dadfe185c168413962f","modified":1736739100690},{"_id":"public/css/partial/highlight/idea.css","hash":"b30e1d3146011d366e9b9b6e23c37a517e49dade","modified":1736739100690},{"_id":"public/css/partial/highlight/gruvbox-light.css","hash":"6e7b8002c973f285c1e1aac467935c3c436eebef","modified":1736739100690},{"_id":"public/css/partial/highlight/grayscale.css","hash":"eeadee4c164d031af437a4efa328a46005295069","modified":1736739100690},{"_id":"public/css/partial/highlight/gruvbox-dark.css","hash":"8efce969f84bce90b94b2b314fb53ffd1e4c7b7f","modified":1736739100690},{"_id":"public/css/partial/highlight/isbl-editor-light.css","hash":"0db445b5c066fc3d6f352d709f7d90bd3d7ba4f6","modified":1736739100690},{"_id":"public/css/partial/highlight/ir-black.css","hash":"390ed2b3efbac173d11951045bd90b9a044ea820","modified":1736739100690},{"_id":"public/css/partial/highlight/kimbie.light.css","hash":"1a76eadba3c337fd4ccf6aa3b433c1b7668a6310","modified":1736739100690},{"_id":"public/css/partial/highlight/hybrid.css","hash":"eda993d88b47ec034a4f6aed869659b1ea867026","modified":1736739100690},{"_id":"public/css/partial/highlight/isbl-editor-dark.css","hash":"1fe15d663c00100aaf908f6188d2893a15524b86","modified":1736739100690},{"_id":"public/css/partial/highlight/magula.css","hash":"495d8f104ab5df5d0dcf65f53048d653d9dfadd8","modified":1736739100690},{"_id":"public/css/partial/highlight/kimbie.dark.css","hash":"2463bb13e10c97b94a639f7044b04d6b391a64bc","modified":1736739100690},{"_id":"public/css/partial/highlight/lightfair.css","hash":"eaebc4f9cfdadd9acb0751d0a47188da8ad1ac4d","modified":1736739100690},{"_id":"public/css/partial/highlight/mono-blue.css","hash":"e973d7daa3c1b74af50c67f0b97785ae5685d439","modified":1736739100690},{"_id":"public/css/partial/highlight/monokai.css","hash":"936b3ae6c4c4950fea3198155b30b57a19b5c055","modified":1736739100690},{"_id":"public/css/partial/highlight/nord.css","hash":"6a530eb93c40437100aa7439fd24e49c02df47d0","modified":1736739100690},{"_id":"public/css/partial/highlight/night-owl.css","hash":"1f0b40ea850d6859217a6b0d7f1ef34a30247179","modified":1736739100690},{"_id":"public/css/partial/highlight/nnfx.css","hash":"c5af08d34fc8ca4c67a11f331d695ad17583c033","modified":1736739100690},{"_id":"public/css/partial/highlight/lioshi.css","hash":"709ad976d4b7382c422e7bca97abfc31b04681ca","modified":1736739100690},{"_id":"public/css/partial/highlight/monokai-sublime.css","hash":"6e2bad0d17a40791131d1c5e750301daed1835c5","modified":1736739100690},{"_id":"public/css/partial/highlight/obsidian.css","hash":"2c0a9736f49e437632fd4a227905d9ed717580c1","modified":1736739100690},{"_id":"public/css/partial/highlight/ocean.css","hash":"b00ee1c8c10e9ba41c4e486385c32a93c4797ea2","modified":1736739100690},{"_id":"public/css/partial/highlight/nnfx-dark.css","hash":"588aae57cb53e3fb14c3083124b6926f145750a6","modified":1736739100690},{"_id":"public/css/partial/highlight/paraiso-dark.css","hash":"1cbd1d197fe2590e3961f5d69702831b3f94bea4","modified":1736739100690},{"_id":"public/css/partial/highlight/pojoaque.css","hash":"74122ef5f293a8090501f557cc0ef746a6baa650","modified":1736739100690},{"_id":"public/css/partial/highlight/paraiso-light.css","hash":"04eb75b6505d05177417eb106e9a011b0aaad433","modified":1736739100690},{"_id":"public/css/partial/highlight/qtcreator_light.css","hash":"2f1992092014efa68e89f348f5941f30f497ca60","modified":1736739100690},{"_id":"public/css/partial/highlight/qtcreator_dark.css","hash":"6e218a94e5faad66c32027091538a136a0e288b5","modified":1736739100690},{"_id":"public/css/partial/highlight/railscasts.css","hash":"d234cb0568e7978c91b87dbf0fef95b236e1c7a5","modified":1736739100690},{"_id":"public/css/partial/highlight/rainbow.css","hash":"b4d98e83c87685c2c265c1fae28977f110447ec2","modified":1736739100690},{"_id":"public/css/partial/highlight/purebasic.css","hash":"e0c272f695a8f2c5602a29fdda8886e74678cbdc","modified":1736739100690},{"_id":"public/css/partial/highlight/routeros.css","hash":"40c1ea8a64e8116fd198ba838f42e4b55523be22","modified":1736739100690},{"_id":"public/css/partial/highlight/shades-of-purple.css","hash":"bf790e81c1b8afacf5e4e5a5255293f74509aec0","modified":1736739100690},{"_id":"public/css/partial/highlight/solarized-dark.css","hash":"ab2bc774a8e87a9ffe44dda605ac199d5886eb3f","modified":1736739100690},{"_id":"public/css/partial/highlight/solarized-light.css","hash":"aeced4941ebbf08aca54217ab23bed26688541c0","modified":1736739100690},{"_id":"public/css/partial/highlight/sunburst.css","hash":"bf7115046b33b271912c1c39a78fd0390066e400","modified":1736739100690},{"_id":"public/css/partial/highlight/tomorrow-night-bright.css","hash":"e5f1bfe6a4687a0550c5e9e8e6dee84783a4704d","modified":1736739100690},{"_id":"public/css/partial/highlight/srcery.css","hash":"478313579d78c3b80e6a8c91b82037885bd145df","modified":1736739100690},{"_id":"public/css/partial/highlight/school-book.css","hash":"9714b72124d6938bbe618bf9b53dd9efed7d99f4","modified":1736739100690},{"_id":"public/css/partial/highlight/tomorrow-night-eighties.css","hash":"8837ee6872ebd55426709ec09d853b0d9085d1e8","modified":1736739100690},{"_id":"public/css/partial/highlight/tomorrow-night-blue.css","hash":"43ab7bc48046b19ba1f4d8eaa687010993f875e0","modified":1736739100690},{"_id":"public/css/partial/highlight/tomorrow-night.css","hash":"271b0b04244e1413ce2cd4ea490f8977829f4bfd","modified":1736739100690},{"_id":"public/css/partial/highlight/tomorrow.css","hash":"899dfaf57008e078e28983a36c8cd4a4bbdff877","modified":1736739100690},{"_id":"public/css/partial/highlight/vs2015.css","hash":"e534297cb05adb51668933f9a3076f2489111e20","modified":1736739100690},{"_id":"public/css/partial/highlight/xt256.css","hash":"868a0c5befc4ee888692c65734f0326d14841fab","modified":1736739100690},{"_id":"public/css/partial/highlight/xcode.css","hash":"09c36aa7f35c5959c2c1418deee2053b7dbf24d4","modified":1736739100690},{"_id":"public/css/partial/highlight/zenburn.css","hash":"161020d112780b3f5243ba8fc4e4599d88769fe4","modified":1736739100690},{"_id":"public/css/partial/highlight/vs.css","hash":"f85a1da5246d6aadd3913e47c307c20022480226","modified":1736739100690},{"_id":"public/css/partial/tag_plugin/note.css","hash":"5029617b4fddf2c3e88686d15be13e3b5b283e9e","modified":1736739100690},{"_id":"public/css/partial/tag_plugin/tags.css","hash":"60995fb4af0be08a146d153862a90a3758cbfd7f","modified":1736739100690},{"_id":"public/images/girl.jpeg","hash":"c9d5c65a0e577c6d6e593dca5dfca3f7c28f8e77","modified":1736739100690},{"_id":"public/img/alipay.jpg","hash":"432585449232dd4fd89a5e4761332747ba5ecc73","modified":1736739100690},{"_id":"public/images/vertical_align.jpeg","hash":"3107af2816ee82233464bcb8950699e3ea8f3842","modified":1736739100690},{"_id":"source/_posts/人生如逆旅，我亦是行人.md","hash":"52a09a69c2da762d775f0e1ce9db89101d740d79","modified":1736761412115},{"_id":"public/2025/01/13/人生如逆旅，我亦是行人/index.html","hash":"2eb04ae46d8e40b2695686167e523680aef028cf","modified":1736841763104}],"Category":[{"name":"时间","_id":"cm5uhmavq0004tkugc6tfa13a"},{"name":"css","_id":"cm5uhmavu000ctkuger1lbggf"},{"name":"javascript","_id":"cm5uhmavy000ntkugdjoq50qz"},{"name":"test","_id":"cm5uhmaw3000ytkugcg5eg03b"},{"name":"debug","_id":"cm5uhmaw7001dtkug093cdhmi"},{"name":"自动化","_id":"cm5uhmaw8001jtkug0s6n23it"},{"name":"科普","_id":"cm5uhmaw8001mtkug5ips03v5"},{"name":"web安全","_id":"cm5uhmaw9001qtkug63hbalq5"},{"name":"算法","_id":"cm5uhmawb001utkugdcm4avne"},{"name":"计算机","_id":"cm5uhmawc001ztkugg54452z0"},{"name":"自动化测试","_id":"cm5uhmax9002itkug4r0gbvy6"},{"name":"英语","_id":"cm5uhmaxh0031tkugh7ia1up5"}],"Data":[],"Page":[{"title":"归档","date":"2024-03-07T03:17:15.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2024-03-07 11:17:15\ntype: 'archives'\ncomments: false\n---","updated":"2024-03-07T03:17:47.531Z","path":"archives/index.html","layout":"page","_id":"cm5uhmavk0000tkughb1w36fw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2024-03-07T03:16:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-03-07 11:16:04\ntype: 'tags'\ncomments: false\n---","updated":"2024-03-07T03:51:24.262Z","path":"tags/index.html","layout":"page","_id":"cm5uhmavo0002tkug8wy4av9u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2024-03-07T03:18:00.000Z","type":"link","_content":"\n1:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n\n2:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n\n3:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2024-03-07 11:18:00\ntype: link\n---\n\n1:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n\n2:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n\n3:\n  name: DmxZ\n  link: https://dmx.pub\n  avatar: https://dmx.pub/img/avatar.png\n  info:  欢迎来到 DmxZ 的自留地！\n","updated":"2024-03-07T03:49:09.498Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm5uhmavr0006tkugd34i11qw","content":"<p>1:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n<p>2:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n<p>3:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n<p>2:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n<p>3:<br>  name: DmxZ<br>  link: <a href=\"https://dmx.pub/\">https://dmx.pub</a><br>  avatar: <a href=\"https://dmx.pub/img/avatar.png\">https://dmx.pub/img/avatar.png</a><br>  info:  欢迎来到 DmxZ 的自留地！</p>\n"},{"title":"关于","date":"2024-03-07T03:17:15.000Z","type":"about","comments":0,"_content":"\n<i class=\"fa fa-user\"></i> nickname：[厘米](http://www.timeisgone.com)\n\n<i class=\"fa fa-envelope\"></i> email ：<a href=\"mailto:503275769@qq.com\" target=\"_blank\" rel=\"noopener\">503275769@qq.com</a>\n\n<i class=\"fa fa-github\"></i> github：[@foxlele2014](https://github.com/foxlele2014)","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2024-03-07 11:17:15\ntype: 'about'\ncomments: false\n---\n\n<i class=\"fa fa-user\"></i> nickname：[厘米](http://www.timeisgone.com)\n\n<i class=\"fa fa-envelope\"></i> email ：<a href=\"mailto:503275769@qq.com\" target=\"_blank\" rel=\"noopener\">503275769@qq.com</a>\n\n<i class=\"fa fa-github\"></i> github：[@foxlele2014](https://github.com/foxlele2014)","updated":"2024-03-07T03:53:23.698Z","path":"about/index.html","layout":"page","_id":"cm5uhmavs0008tkughvqi6kv9","content":"<p><i class=\"fa fa-user\"></i> nickname：<a href=\"http://www.timeisgone.com/\">厘米</a></p>\n<p><i class=\"fa fa-envelope\"></i> email ：<a href=\"mailto:503275769@qq.com\" target=\"_blank\" rel=\"noopener\">503275769@qq.com</a></p>\n<p><i class=\"fa fa-github\"></i> github：<a href=\"https://github.com/foxlele2014\">@foxlele2014</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><i class=\"fa fa-user\"></i> nickname：<a href=\"http://www.timeisgone.com/\">厘米</a></p>\n<p><i class=\"fa fa-envelope\"></i> email ：<a href=\"mailto:503275769@qq.com\" target=\"_blank\" rel=\"noopener\">503275769@qq.com</a></p>\n<p><i class=\"fa fa-github\"></i> github：<a href=\"https://github.com/foxlele2014\">@foxlele2014</a></p>\n"},{"title":"分类","date":"2024-03-07T03:17:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-03-07 11:17:15\ntype: 'categories'\ncomments: false\n---","updated":"2024-03-07T03:52:03.874Z","path":"categories/index.html","layout":"page","_id":"cm5uhmavt000atkug96gs3ih1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"cron时间格式的记录","date":"2025-01-13T02:23:31.000Z","_content":"\n1. 凌晨3点每天\n\n┌───────────── 分钟 (0-59)\n│ ┌───────────── 小时 (0-23)\n│ │ ┌───────────── 日期 (1-31)\n│ │ │ ┌───────────── 月份 (1-12)\n│ │ │ │ ┌───────────── 星期 (0-6) (周日=0)\n│ │ │ │ │\n0 3 * * *\n\n第一个 0 表示分钟数为0\n第二个 3 表示小时数为3\n第三个 * 表示每天\n第四个 * 表示每月\n第五个 * 表示每周的每一天","source":"_posts/cron时间格式的记录.md","raw":"---\ntitle: cron时间格式的记录\ndate: 2025-01-13 10:23:31\ntags:\n- cron\ncategory: \n- 时间\n---\n\n1. 凌晨3点每天\n\n┌───────────── 分钟 (0-59)\n│ ┌───────────── 小时 (0-23)\n│ │ ┌───────────── 日期 (1-31)\n│ │ │ ┌───────────── 月份 (1-12)\n│ │ │ │ ┌───────────── 星期 (0-6) (周日=0)\n│ │ │ │ │\n0 3 * * *\n\n第一个 0 表示分钟数为0\n第二个 3 表示小时数为3\n第三个 * 表示每天\n第四个 * 表示每月\n第五个 * 表示每周的每一天","slug":"cron时间格式的记录","published":1,"updated":"2025-01-13T02:24:32.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmavm0001tkug4rjr8wiy","content":"<ol>\n<li>凌晨3点每天</li>\n</ol>\n<p>┌───────────── 分钟 (0-59)<br>│ ┌───────────── 小时 (0-23)<br>│ │ ┌───────────── 日期 (1-31)<br>│ │ │ ┌───────────── 月份 (1-12)<br>│ │ │ │ ┌───────────── 星期 (0-6) (周日&#x3D;0)<br>│ │ │ │ │<br>0 3 * * *</p>\n<p>第一个 0 表示分钟数为0<br>第二个 3 表示小时数为3<br>第三个 * 表示每天<br>第四个 * 表示每月<br>第五个 * 表示每周的每一天</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>凌晨3点每天</li>\n</ol>\n<p>┌───────────── 分钟 (0-59)<br>│ ┌───────────── 小时 (0-23)<br>│ │ ┌───────────── 日期 (1-31)<br>│ │ │ ┌───────────── 月份 (1-12)<br>│ │ │ │ ┌───────────── 星期 (0-6) (周日&#x3D;0)<br>│ │ │ │ │<br>0 3 * * *</p>\n<p>第一个 0 表示分钟数为0<br>第二个 3 表示小时数为3<br>第三个 * 表示每天<br>第四个 * 表示每月<br>第五个 * 表示每周的每一天</p>\n"},{"title":"css奇淫技巧","date":"2018-02-07T07:03:22.000Z","_content":"\n### border实现三角小图标\n- 原理\n\n### display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果\n\n","source":"_posts/css奇淫技巧.md","raw":"---\ntitle: css奇淫技巧\ndate: 2018-02-07 15:03:22\ntags:\n- 奇淫技巧\ncategory: \n- css\n---\n\n### border实现三角小图标\n- 原理\n\n### display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果\n\n","slug":"css奇淫技巧","published":1,"updated":"2024-03-06T03:45:42.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmavp0003tkugfdxeg4nz","content":"<h3 id=\"border实现三角小图标\"><a href=\"#border实现三角小图标\" class=\"headerlink\" title=\"border实现三角小图标\"></a>border实现三角小图标</h3><ul>\n<li>原理</li>\n</ul>\n<h3 id=\"display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果\"><a href=\"#display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果\" class=\"headerlink\" title=\"display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果\"></a>display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"border实现三角小图标\"><a href=\"#border实现三角小图标\" class=\"headerlink\" title=\"border实现三角小图标\"></a>border实现三角小图标</h3><ul>\n<li>原理</li>\n</ul>\n<h3 id=\"display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果\"><a href=\"#display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果\" class=\"headerlink\" title=\"display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果\"></a>display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果</h3>"},{"title":"css基础属性解析","date":"2018-02-07T07:02:38.000Z","_content":"\n### 块元素\n\n    常见的`div、p、ul、li、ol、h1~h6、`\n    特点：\n    - 定义`width、height`有效\n    ### 行内元素\n    `span、a、i`\n    特点：\n    - 定义`width、height`无效。\n    - padding有效，margin只有左右的有效，上下的无效\n\n元素类型由以下两项定义：\n\n- [Catagories](https://www.w3.org/TR/html/dom.html#element-dfn-categories)\n- [Content Model](https://www.w3.org/TR/html/dom.html#element-dfn-content-model)\n\n### 元素包含规则\n\n由Content Model决定，\n\n\n### Catagories\n\n### Content Model \n\n\n- text-align基于文本元素\n- line-height\n- vertical-align：设置元素的垂直对齐方式\n该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。\n![image](/images/vertical_align.jpeg)\n\n### 参考\n\n> [元素的使用姿势](https://www.zhihu.com/question/48130783/answer/109271752)\n> [line-height 和vertical-align](http://www.cnblogs.com/xiaohuochai/p/5271217.html)\n> [line-height 和vertical-align](https://zhuanlan.zhihu.com/p/25808995)\n> [字体设计的视频](http://v.youku.com/v_show/id_XMzg4NDUzMDUy.html)","source":"_posts/css基础属性解析.md","raw":"---\ntitle: css基础属性解析\ndate: 2018-02-07 15:02:38\ntags:\n- 基础属性\ncategory: \n- css\n---\n\n### 块元素\n\n    常见的`div、p、ul、li、ol、h1~h6、`\n    特点：\n    - 定义`width、height`有效\n    ### 行内元素\n    `span、a、i`\n    特点：\n    - 定义`width、height`无效。\n    - padding有效，margin只有左右的有效，上下的无效\n\n元素类型由以下两项定义：\n\n- [Catagories](https://www.w3.org/TR/html/dom.html#element-dfn-categories)\n- [Content Model](https://www.w3.org/TR/html/dom.html#element-dfn-content-model)\n\n### 元素包含规则\n\n由Content Model决定，\n\n\n### Catagories\n\n### Content Model \n\n\n- text-align基于文本元素\n- line-height\n- vertical-align：设置元素的垂直对齐方式\n该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。\n![image](/images/vertical_align.jpeg)\n\n### 参考\n\n> [元素的使用姿势](https://www.zhihu.com/question/48130783/answer/109271752)\n> [line-height 和vertical-align](http://www.cnblogs.com/xiaohuochai/p/5271217.html)\n> [line-height 和vertical-align](https://zhuanlan.zhihu.com/p/25808995)\n> [字体设计的视频](http://v.youku.com/v_show/id_XMzg4NDUzMDUy.html)","slug":"css基础属性解析","published":1,"updated":"2024-03-07T06:07:34.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmavr0007tkugd69ea86l","content":"<h3 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h3><pre><code>常见的`div、p、ul、li、ol、h1~h6、`\n特点：\n- 定义`width、height`有效\n### 行内元素\n`span、a、i`\n特点：\n- 定义`width、height`无效。\n- padding有效，margin只有左右的有效，上下的无效\n</code></pre>\n<p>元素类型由以下两项定义：</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/html/dom.html#element-dfn-categories\">Catagories</a></li>\n<li><a href=\"https://www.w3.org/TR/html/dom.html#element-dfn-content-model\">Content Model</a></li>\n</ul>\n<h3 id=\"元素包含规则\"><a href=\"#元素包含规则\" class=\"headerlink\" title=\"元素包含规则\"></a>元素包含规则</h3><p>由Content Model决定，</p>\n<h3 id=\"Catagories\"><a href=\"#Catagories\" class=\"headerlink\" title=\"Catagories\"></a>Catagories</h3><h3 id=\"Content-Model\"><a href=\"#Content-Model\" class=\"headerlink\" title=\"Content Model\"></a>Content Model</h3><ul>\n<li>text-align基于文本元素</li>\n<li>line-height</li>\n<li>vertical-align：设置元素的垂直对齐方式<br>该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。<br><img src= \"/one_hour/img/loading.gif\" data-src=\"/one_hour/images/vertical_align.jpeg\" alt=\"image\"></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p><a href=\"https://www.zhihu.com/question/48130783/answer/109271752\">元素的使用姿势</a><br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5271217.html\">line-height 和vertical-align</a><br><a href=\"https://zhuanlan.zhihu.com/p/25808995\">line-height 和vertical-align</a><br><a href=\"http://v.youku.com/v_show/id_XMzg4NDUzMDUy.html\">字体设计的视频</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h3><pre><code>常见的`div、p、ul、li、ol、h1~h6、`\n特点：\n- 定义`width、height`有效\n### 行内元素\n`span、a、i`\n特点：\n- 定义`width、height`无效。\n- padding有效，margin只有左右的有效，上下的无效\n</code></pre>\n<p>元素类型由以下两项定义：</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/html/dom.html#element-dfn-categories\">Catagories</a></li>\n<li><a href=\"https://www.w3.org/TR/html/dom.html#element-dfn-content-model\">Content Model</a></li>\n</ul>\n<h3 id=\"元素包含规则\"><a href=\"#元素包含规则\" class=\"headerlink\" title=\"元素包含规则\"></a>元素包含规则</h3><p>由Content Model决定，</p>\n<h3 id=\"Catagories\"><a href=\"#Catagories\" class=\"headerlink\" title=\"Catagories\"></a>Catagories</h3><h3 id=\"Content-Model\"><a href=\"#Content-Model\" class=\"headerlink\" title=\"Content Model\"></a>Content Model</h3><ul>\n<li>text-align基于文本元素</li>\n<li>line-height</li>\n<li>vertical-align：设置元素的垂直对齐方式<br>该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。<br><img src=\"/one_hour/images/vertical_align.jpeg\" alt=\"image\"></li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p><a href=\"https://www.zhihu.com/question/48130783/answer/109271752\">元素的使用姿势</a><br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5271217.html\">line-height 和vertical-align</a><br><a href=\"https://zhuanlan.zhihu.com/p/25808995\">line-height 和vertical-align</a><br><a href=\"http://v.youku.com/v_show/id_XMzg4NDUzMDUy.html\">字体设计的视频</a></p>\n</blockquote>\n"},{"title":"js里的this","date":"2018-02-07T08:09:51.000Z","_content":"\n### 计划内容\n- bind\n- es5里的，es6里的\n\n### 默认绑定\n```javascript\n// 非严格模式下，this指向全局对象\nfunction test() {\n    console.log(this);  // window/global\n}\n\n// 严格模式下，this指向undefined\n'use strict';\nfunction test() {\n    console.log(this);  // undefined\n}\n```\n\n### 隐式绑定\n```javascript\n// 作为对象方法调用时，this指向该对象\nconst obj = {\n    name: '张三',\n    sayHi() {\n        console.log(this.name);\n    }\n};\nobj.sayHi();  // '张三'\n\n// 注意：方法单独使用会丢失this\nconst say = obj.sayHi;\nsay();  // undefined，this指向全局\n```\n\n### 显式绑定\n```javascript\n// call/apply/bind 可以指定this\nfunction greet() {\n    console.log(this.name);\n}\n\nconst person = { name: '李四' };\ngreet.call(person);    // '李四'\ngreet.apply(person);   // '李四'\ngreet.bind(person)();  // '李四'\n```\n\n### new绑定\n```javascript\n// 构造函数中的this指向新创建的实例\nfunction Person(name) {\n    this.name = name;\n}\nconst p = new Person('王五');  // this指向p\n```\n\n\n### 箭头函数\n箭头函数没有自己的this，它的this继承自外层作用域的this。\n\n```javascript\nconst obj = {\n    name: '张三',\n    sayHi: () => {\n        console.log(this.name);  // undefined，this指向全局\n    }\n};\nobj.sayHi();  // undefined\n```\n\n假如想要在sayHi里读取到obj的name\n1. 使用普通函数\n```javascript\nconst obj = {\n    name: '张三',\n    sayHi: function() {\n        console.log(this.name);  // '张三'\n    }\n};\nobj.sayHi();  // '张三'\n```\n2. 保存外部引用\n```javascript\nconst obj = {\n    name: '赵六',\n    sayHi: () => {\n        console.log(obj.name);  // 直接引用obj\n    }\n};\n```\n### 优先级\n- new绑定\n- 显式绑定（call/apply/bind）\n- 隐式绑定（对象方法）\n- 默认绑定（全局/undefined）","source":"_posts/js里的this.md","raw":"---\ntitle: js里的this\ndate: 2018-02-07 16:09:51\ntags:\n- js\n- this\ncategory: \n- javascript\n---\n\n### 计划内容\n- bind\n- es5里的，es6里的\n\n### 默认绑定\n```javascript\n// 非严格模式下，this指向全局对象\nfunction test() {\n    console.log(this);  // window/global\n}\n\n// 严格模式下，this指向undefined\n'use strict';\nfunction test() {\n    console.log(this);  // undefined\n}\n```\n\n### 隐式绑定\n```javascript\n// 作为对象方法调用时，this指向该对象\nconst obj = {\n    name: '张三',\n    sayHi() {\n        console.log(this.name);\n    }\n};\nobj.sayHi();  // '张三'\n\n// 注意：方法单独使用会丢失this\nconst say = obj.sayHi;\nsay();  // undefined，this指向全局\n```\n\n### 显式绑定\n```javascript\n// call/apply/bind 可以指定this\nfunction greet() {\n    console.log(this.name);\n}\n\nconst person = { name: '李四' };\ngreet.call(person);    // '李四'\ngreet.apply(person);   // '李四'\ngreet.bind(person)();  // '李四'\n```\n\n### new绑定\n```javascript\n// 构造函数中的this指向新创建的实例\nfunction Person(name) {\n    this.name = name;\n}\nconst p = new Person('王五');  // this指向p\n```\n\n\n### 箭头函数\n箭头函数没有自己的this，它的this继承自外层作用域的this。\n\n```javascript\nconst obj = {\n    name: '张三',\n    sayHi: () => {\n        console.log(this.name);  // undefined，this指向全局\n    }\n};\nobj.sayHi();  // undefined\n```\n\n假如想要在sayHi里读取到obj的name\n1. 使用普通函数\n```javascript\nconst obj = {\n    name: '张三',\n    sayHi: function() {\n        console.log(this.name);  // '张三'\n    }\n};\nobj.sayHi();  // '张三'\n```\n2. 保存外部引用\n```javascript\nconst obj = {\n    name: '赵六',\n    sayHi: () => {\n        console.log(obj.name);  // 直接引用obj\n    }\n};\n```\n### 优先级\n- new绑定\n- 显式绑定（call/apply/bind）\n- 隐式绑定（对象方法）\n- 默认绑定（全局/undefined）","slug":"js里的this","published":1,"updated":"2025-01-14T08:02:18.776Z","_id":"cm5uhmavs0009tkugatnq4573","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>bind</li>\n<li>es5里的，es6里的</li>\n</ul>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非严格模式下，this指向全局对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window/global</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 严格模式下，this指向undefined</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作为对象方法调用时，this指向该对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：方法单独使用会丢失this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = obj.<span class=\"property\">sayHi</span>;</span><br><span class=\"line\"><span class=\"title function_\">say</span>();  <span class=\"comment\">// undefined，this指向全局</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call/apply/bind 可以指定this</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span> &#125;;</span><br><span class=\"line\">greet.<span class=\"title function_\">call</span>(person);    <span class=\"comment\">// &#x27;李四&#x27;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">apply</span>(person);   <span class=\"comment\">// &#x27;李四&#x27;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">bind</span>(person)();  <span class=\"comment\">// &#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数中的this指向新创建的实例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;王五&#x27;</span>);  <span class=\"comment\">// this指向p</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数没有自己的this，它的this继承自外层作用域的this。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);  <span class=\"comment\">// undefined，this指向全局</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>假如想要在sayHi里读取到obj的name</p>\n<ol>\n<li>使用普通函数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>保存外部引用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;赵六&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);  <span class=\"comment\">// 直接引用obj</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ul>\n<li>new绑定</li>\n<li>显式绑定（call&#x2F;apply&#x2F;bind）</li>\n<li>隐式绑定（对象方法）</li>\n<li>默认绑定（全局&#x2F;undefined）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>bind</li>\n<li>es5里的，es6里的</li>\n</ul>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非严格模式下，this指向全局对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window/global</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 严格模式下，this指向undefined</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作为对象方法调用时，this指向该对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：方法单独使用会丢失this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = obj.<span class=\"property\">sayHi</span>;</span><br><span class=\"line\"><span class=\"title function_\">say</span>();  <span class=\"comment\">// undefined，this指向全局</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call/apply/bind 可以指定this</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span> &#125;;</span><br><span class=\"line\">greet.<span class=\"title function_\">call</span>(person);    <span class=\"comment\">// &#x27;李四&#x27;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">apply</span>(person);   <span class=\"comment\">// &#x27;李四&#x27;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">bind</span>(person)();  <span class=\"comment\">// &#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数中的this指向新创建的实例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;王五&#x27;</span>);  <span class=\"comment\">// this指向p</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数没有自己的this，它的this继承自外层作用域的this。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);  <span class=\"comment\">// undefined，this指向全局</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>假如想要在sayHi里读取到obj的name</p>\n<ol>\n<li>使用普通函数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>();  <span class=\"comment\">// &#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>保存外部引用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;赵六&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);  <span class=\"comment\">// 直接引用obj</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ul>\n<li>new绑定</li>\n<li>显式绑定（call&#x2F;apply&#x2F;bind）</li>\n<li>隐式绑定（对象方法）</li>\n<li>默认绑定（全局&#x2F;undefined）</li>\n</ul>\n"},{"title":"js原型链","date":"2018-02-07T08:13:17.000Z","_content":"\n- prototype\n- constructor\n- new\n\n## 原型链的构成\n对象.__proto__ -> 原型对象\n原型对象.constructor -> 构造函数\n构造函数.prototype -> 原型对象\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\nconst p1 = new Person('张三');\n\nconsole.log(p1.__proto__ === Person.prototype);  // true\nconsole.log(Person.prototype.constructor === Person);  // true\n```\n## 继承\n```javascript\n// 原型继承\nfunction Animal(name) {\n    this.name = name;\n}\nAnimal.prototype.eat = function() {\n    console.log(this.name + ' eating');\n}\n\nfunction Dog(name) {\n    Animal.call(this, name);  // 继承属性\n}\n// 继承方法\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n## 检查\n```javascript\n// 检查原型链\nObject.getPrototypeOf(obj)    // 获取原型\nobj.hasOwnProperty('prop')    // 是否自身属性\nobj instanceof Constructor     // 是否在原型链上\nObject.create(proto)          // 创建指定原型的对象\n```\n## 属性查找过程\nobj.prop \n-> obj自身属性\n-> obj.__proto__属性\n-> obj.__proto__.__proto__属性\n-> ... 直到null\n\n\n### constructor属性\n- 标识对象由哪个构造函数创建\n- 维护正确的原型链关系\n- 方便实例识别其构造函数\n\n### new\n- 创建空对象\n- 将空对象的__proto__指向构造函数的prototype\n- 将构造函数的this指向空对象\n- 执行构造函数\n- 返回空对象\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\n\n// new Person('张三') 实际上做了：\nfunction newOperator(Constructor, ...args) {\n    // 1. 创建一个空对象，原型指向构造函数的prototype\n    const obj = Object.create(Constructor.prototype);\n    \n    // 2. 将构造函数的this指向这个对象\n    // 3. 执行构造函数\n    const result = Constructor.apply(obj, args);\n    \n    // 4. 如果构造函数返回对象，则返回该对象\n    // 否则返回第一步创建的对象\n    return (typeof result === 'object' && result !== null) ? result : obj;\n}\n```\n\n1. 函数都可以作为构造函数，但是箭头函数不行\n2. 箭头函数没有自己的this\n3. 箭头函数的this是在定义时就确定的，指向外层作用域的this\n4. 箭头函数没有prototype属性\n5. 不能通过call/apply/bind改变箭头函数的this\n\n```javascript\n// call：立即执行，参数列表\nfunction.call(thisArg, arg1, arg2, ...)\n\n// apply：立即执行，参数数组\nfunction.apply(thisArg, [arg1, arg2, ...])\n\n// bind：返回新函数，参数列表\nfunction.bind(thisArg, arg1, arg2, ...)\n```\n\n## 类和原型\n```javascript\n// ES6 class\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\n// 等同于\nfunction Animal(name) {\n    this.name = name;\n}\n```\n","source":"_posts/js原型链.md","raw":"---\ntitle: js原型链\ndate: 2018-02-07 16:13:17\ntags:\n- js\n- 原型链\ncategory: \n- javascript\n---\n\n- prototype\n- constructor\n- new\n\n## 原型链的构成\n对象.__proto__ -> 原型对象\n原型对象.constructor -> 构造函数\n构造函数.prototype -> 原型对象\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\nconst p1 = new Person('张三');\n\nconsole.log(p1.__proto__ === Person.prototype);  // true\nconsole.log(Person.prototype.constructor === Person);  // true\n```\n## 继承\n```javascript\n// 原型继承\nfunction Animal(name) {\n    this.name = name;\n}\nAnimal.prototype.eat = function() {\n    console.log(this.name + ' eating');\n}\n\nfunction Dog(name) {\n    Animal.call(this, name);  // 继承属性\n}\n// 继承方法\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n## 检查\n```javascript\n// 检查原型链\nObject.getPrototypeOf(obj)    // 获取原型\nobj.hasOwnProperty('prop')    // 是否自身属性\nobj instanceof Constructor     // 是否在原型链上\nObject.create(proto)          // 创建指定原型的对象\n```\n## 属性查找过程\nobj.prop \n-> obj自身属性\n-> obj.__proto__属性\n-> obj.__proto__.__proto__属性\n-> ... 直到null\n\n\n### constructor属性\n- 标识对象由哪个构造函数创建\n- 维护正确的原型链关系\n- 方便实例识别其构造函数\n\n### new\n- 创建空对象\n- 将空对象的__proto__指向构造函数的prototype\n- 将构造函数的this指向空对象\n- 执行构造函数\n- 返回空对象\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n}\n\n// new Person('张三') 实际上做了：\nfunction newOperator(Constructor, ...args) {\n    // 1. 创建一个空对象，原型指向构造函数的prototype\n    const obj = Object.create(Constructor.prototype);\n    \n    // 2. 将构造函数的this指向这个对象\n    // 3. 执行构造函数\n    const result = Constructor.apply(obj, args);\n    \n    // 4. 如果构造函数返回对象，则返回该对象\n    // 否则返回第一步创建的对象\n    return (typeof result === 'object' && result !== null) ? result : obj;\n}\n```\n\n1. 函数都可以作为构造函数，但是箭头函数不行\n2. 箭头函数没有自己的this\n3. 箭头函数的this是在定义时就确定的，指向外层作用域的this\n4. 箭头函数没有prototype属性\n5. 不能通过call/apply/bind改变箭头函数的this\n\n```javascript\n// call：立即执行，参数列表\nfunction.call(thisArg, arg1, arg2, ...)\n\n// apply：立即执行，参数数组\nfunction.apply(thisArg, [arg1, arg2, ...])\n\n// bind：返回新函数，参数列表\nfunction.bind(thisArg, arg1, arg2, ...)\n```\n\n## 类和原型\n```javascript\n// ES6 class\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\n// 等同于\nfunction Animal(name) {\n    this.name = name;\n}\n```\n","slug":"js原型链","published":1,"updated":"2025-01-14T07:46:27.925Z","_id":"cm5uhmavt000btkug0zmn6qge","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>prototype</li>\n<li>constructor</li>\n<li>new</li>\n</ul>\n<h2 id=\"原型链的构成\"><a href=\"#原型链的构成\" class=\"headerlink\" title=\"原型链的构成\"></a>原型链的构成</h2><p>对象.<strong>proto</strong> -&gt; 原型对象<br>原型对象.constructor -&gt; 构造函数<br>构造函数.prototype -&gt; 原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型继承</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">eat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; eating&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承方法</span></span><br><span class=\"line\"><span class=\"title class_\">Dog</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Dog</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Dog</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查原型链</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(obj)    <span class=\"comment\">// 获取原型</span></span><br><span class=\"line\">obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;prop&#x27;</span>)    <span class=\"comment\">// 是否自身属性</span></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>     <span class=\"comment\">// 是否在原型链上</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(proto)          <span class=\"comment\">// 创建指定原型的对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性查找过程\"><a href=\"#属性查找过程\" class=\"headerlink\" title=\"属性查找过程\"></a>属性查找过程</h2><p>obj.prop<br>-&gt; obj自身属性<br>-&gt; obj.__proto__属性<br>-&gt; obj.<strong>proto</strong>.__proto__属性<br>-&gt; … 直到null</p>\n<h3 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h3><ul>\n<li>标识对象由哪个构造函数创建</li>\n<li>维护正确的原型链关系</li>\n<li>方便实例识别其构造函数</li>\n</ul>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><ul>\n<li>创建空对象</li>\n<li>将空对象的__proto__指向构造函数的prototype</li>\n<li>将构造函数的this指向空对象</li>\n<li>执行构造函数</li>\n<li>返回空对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new Person(&#x27;张三&#x27;) 实际上做了：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">newOperator</span>(<span class=\"params\">Constructor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建一个空对象，原型指向构造函数的prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 将构造函数的this指向这个对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, args);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 如果构造函数返回对象，则返回该对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则返回第一步创建的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; result !== <span class=\"literal\">null</span>) ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>函数都可以作为构造函数，但是箭头函数不行</li>\n<li>箭头函数没有自己的this</li>\n<li>箭头函数的this是在定义时就确定的，指向外层作用域的this</li>\n<li>箭头函数没有prototype属性</li>\n<li>不能通过call&#x2F;apply&#x2F;bind改变箭头函数的this</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call：立即执行，参数列表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">call</span>(thisArg, arg1, arg2, ...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply：立即执行，参数数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">apply</span>(thisArg, [arg1, arg2, ...])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind：返回新函数，参数列表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类和原型\"><a href=\"#类和原型\" class=\"headerlink\" title=\"类和原型\"></a>类和原型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 class</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>prototype</li>\n<li>constructor</li>\n<li>new</li>\n</ul>\n<h2 id=\"原型链的构成\"><a href=\"#原型链的构成\" class=\"headerlink\" title=\"原型链的构成\"></a>原型链的构成</h2><p>对象.<strong>proto</strong> -&gt; 原型对象<br>原型对象.constructor -&gt; 构造函数<br>构造函数.prototype -&gt; 原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型继承</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">eat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; eating&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承方法</span></span><br><span class=\"line\"><span class=\"title class_\">Dog</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Dog</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Dog</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查原型链</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(obj)    <span class=\"comment\">// 获取原型</span></span><br><span class=\"line\">obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;prop&#x27;</span>)    <span class=\"comment\">// 是否自身属性</span></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>     <span class=\"comment\">// 是否在原型链上</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(proto)          <span class=\"comment\">// 创建指定原型的对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性查找过程\"><a href=\"#属性查找过程\" class=\"headerlink\" title=\"属性查找过程\"></a>属性查找过程</h2><p>obj.prop<br>-&gt; obj自身属性<br>-&gt; obj.__proto__属性<br>-&gt; obj.<strong>proto</strong>.__proto__属性<br>-&gt; … 直到null</p>\n<h3 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h3><ul>\n<li>标识对象由哪个构造函数创建</li>\n<li>维护正确的原型链关系</li>\n<li>方便实例识别其构造函数</li>\n</ul>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><ul>\n<li>创建空对象</li>\n<li>将空对象的__proto__指向构造函数的prototype</li>\n<li>将构造函数的this指向空对象</li>\n<li>执行构造函数</li>\n<li>返回空对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new Person(&#x27;张三&#x27;) 实际上做了：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">newOperator</span>(<span class=\"params\">Constructor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建一个空对象，原型指向构造函数的prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 将构造函数的this指向这个对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, args);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 如果构造函数返回对象，则返回该对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则返回第一步创建的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; result !== <span class=\"literal\">null</span>) ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>函数都可以作为构造函数，但是箭头函数不行</li>\n<li>箭头函数没有自己的this</li>\n<li>箭头函数的this是在定义时就确定的，指向外层作用域的this</li>\n<li>箭头函数没有prototype属性</li>\n<li>不能通过call&#x2F;apply&#x2F;bind改变箭头函数的this</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call：立即执行，参数列表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">call</span>(thisArg, arg1, arg2, ...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply：立即执行，参数数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">apply</span>(thisArg, [arg1, arg2, ...])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind：返回新函数，参数列表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>.<span class=\"title function_\">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类和原型\"><a href=\"#类和原型\" class=\"headerlink\" title=\"类和原型\"></a>类和原型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 class</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"test hexo","date":"2018-02-05T06:53:58.000Z","_content":"\n- 诞生日：2018/02/05\n![image](/images/girl.jpeg)\n","source":"_posts/test.md","raw":"---\ntitle: test hexo\ndate: 2018-02-05 14:53:58\ntags: \n- test\ncategory: \n- test\n---\n\n- 诞生日：2018/02/05\n![image](/images/girl.jpeg)\n","slug":"test","published":1,"updated":"2024-03-06T09:30:42.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmavu000ftkug8e2iexes","content":"<ul>\n<li>诞生日：2018&#x2F;02&#x2F;05<br><img src= \"/one_hour/img/loading.gif\" data-src=\"/one_hour/images/girl.jpeg\" alt=\"image\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>诞生日：2018&#x2F;02&#x2F;05<br><img src=\"/one_hour/images/girl.jpeg\" alt=\"image\"></li>\n</ul>\n"},{"title":"js异步编程","date":"2018-02-07T08:11:29.000Z","_content":"\n### 计划内容\n- 单线程\n- 事件驱动\n- callback\n- setTimeout、setInterval\n- Promise\n- generator\n- async/await\n\n### JavaScript的单线程特性\nJavaScript是一门单线程的编程语言，这意味着它只有一个主线程来处理所有的任务。这种设计是由其最初在浏览器环境下的应用场景决定的。\n\n### 事件驱动\nJavaScript通过事件驱动的方式来处理异步操作：\n- 事件循环（Event Loop）\n- 事件队列（Event Queue）\n- 宏任务（Macro-task）和微任务（Micro-task）\n\n#### 1. 事件循环（Event Loop）\n事件循环是JavaScript实现异步的核心机制，它主要负责：\n- 执行同步代码\n- 检查宏任务队列\n- 执行微任务队列\n- 更新渲染\n\n执行顺序：\n1. 执行同步代码（主线程）\n2. 清空微任务队列（micro-task queue）\n3. 执行一个宏任务（macro-task queue）\n4. 重复步骤2-3\n```javascript\n// 事件循环示例\nconsole.log('1'); // 同步代码\nsetTimeout(() => {\nconsole.log('2'); // 宏任务\n}, 0);\nPromise.resolve().then(() => {\nconsole.log('3'); // 微任务\n});\nconsole.log('4'); // 同步代码\n// 输出顺序：1 -> 4 -> 3 -> 2\n```\n\n\n#### 2. 事件队列（Event Queue）\nJavaScript中有两种主要的任务队列：\n\n1. **宏任务队列（Macro-task Queue）**\n   - setTimeout/setInterval\n   - setImmediate (Node.js)\n   - requestAnimationFrame (浏览器)\n   - I/O操作\n   - UI渲染\n   - script标签\n\n2. **微任务队列（Micro-task Queue）**\n   - Promise.then/catch/finally\n   - process.nextTick (Node.js)\n   - MutationObserver\n   - queueMicrotask\n\n```javascript \n// 宏任务和微任务的执行顺序\nsetTimeout(() => {\nconsole.log('宏任务1');\nPromise.resolve().then(() => {\nconsole.log('微任务2');\n});\n}, 0);\nPromise.resolve().then(() => {\nconsole.log('微任务1');\nsetTimeout(() => {\nconsole.log('宏任务2');\n}, 0);\n});\n// 输出顺序：微任务1 -> 宏任务1 -> 微任务2 -> 宏任务2\n\n```\n\n\n#### 3. 实际应用示例\n\n1. **异步操作的优先级控制**\n\n```javascript\n// 高优先级任务使用微任务\nfunction highPriorityTask() {\nqueueMicrotask(() => {\nconsole.log('高优先级任务执行');\n});\n}\n// 低优先级任务使用宏任务\nfunction lowPriorityTask() {\nsetTimeout(() => {\nconsole.log('低优先级任务执行');\n}, 0);\n}\n```\n\n2. **避免回调地狱的最佳实践**\n```javascript\n// 不好的实践\n// 回调地狱示例\nsetTimeout(() => {\n    console.log('1');\n    setTimeout(() => {\n        console.log('2');\n        setTimeout(() => {\n            console.log('3');\n        }, 0);\n    }, 0);\n}, 0);\n\n// 使用Promise改写\nnew Promise(resolve => {\n    setTimeout(() => {\n        console.log('1');\n        resolve();\n    }, 0);\n}).then(() => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            console.log('2');\n            resolve();\n        }, 0);\n    });\n}).then(() => {\n    setTimeout(() => {\n        console.log('3');\n    }, 0);\n});\n\n// 使用async/await改写（最优雅）\nasync function sequence() {\n    await new Promise(resolve => setTimeout(() => {\n        console.log('1');\n        resolve();\n    }, 0));\n    \n    await new Promise(resolve => setTimeout(() => {\n        console.log('2');\n        resolve();\n    }, 0));\n    \n    await new Promise(resolve => setTimeout(() => {\n        console.log('3');\n        resolve();\n    }, 0));\n}\n\n// 执行\nsequence();\n// 好的实践\nasync function betterWay() {\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('1');\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('2');\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('3');\n}\n```\n\n#### 4. 注意事项\n\n1. **性能考虑**\n- 微任务优先级高，但不要过度使用\n- 避免在微任务中执行耗时操作\n- 合理使用宏任务分散负载\n\n2. **常见陷阱**\n```javascript\n// 死循环微任务\nfunction deadlock() {\nPromise.resolve().then(() => deadlock());\n}\n// 这会阻塞事件循环，导致宏任务无法执行\n```\n\n3. **最佳实践**\n- 耗时操作放入宏任务队列\n- 需要即时响应的放入微任务队列\n- 合理组合async/await与Promise\n- 避免同步阻塞操作\n\n### 回调函数（Callback）\n最基础的异步编程方式，但可能导致回调地狱：\n```javascript\n// 回调地狱示例\ngetData(function(a) {\n  getMoreData(a, function(b) {\n    getMoreData(b, function(c) {\n      getMoreData(c, function(d) {\n      console.log('数据获取完成');\n      });\n    });\n  });\n});\n\n```\n\n### setTimeout和setInterval\n用于延时执行和周期性执行任务的定时器函数：\n```javascript\n// setTimeout示例\nsetTimeout(function() {\n  console.log('延时执行');\n}, 1000);\n```\n\n### Promise\nPromise是一种更优雅的异步编程解决方案，可以有效避免回调地狱：\n```javascript\n// Promise示例\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('数据获取完成');\n  }, 1000);\n});\n```\n\n### Generator\n生成器函数提供了一种可以暂停和恢复执行的方式：\n```javascript\nfunction dataGenerator() {\nconst data1 = yield getData();\nconst data2 = yield getMoreData(data1);\nconst data3 = yield getMoreData(data2);\nreturn data3;\n}\n\n// 使用生成器\nconst gen = dataGenerator();\ngen.next().value.then(data1 => {\n  gen.next(data1).value.then(data2 => {\n    gen.next(data2).value.then(data3 => {\n      console.log('最终数据:', data3);\n    });\n  });\n});\n```\n\n### async/await\nasync/await是ES2017引入的一种更简洁的异步编程方式,它是Generator的语法糖:\n```javascript\n// async/await示例\nasync function fetchData() {\n  const data1 = await getData();\n  const data2 = await getMoreData(data1);\n  const data3 = await getMoreData(data2);\n  return data3;\n}\n```\n\n### 实践建议\n1. 优先使用async/await进行异步编程\n2. 合理使用Promise.all()处理并发请求\n3. 注意错误处理和异常捕获\n4. 避免回调地狱\n5. 合理使用定时器，注意及时清除不需要的定时器\n\n### 总结\nJavaScript的异步编程经历了从回调函数、Promise、Generator到async/await的演进过程，每种方式都有其适用场景：\n- 回调函数：简单场景\n- Promise：中等复杂度的异步操作\n- Generator：需要精细控制执行流程的场景\n- async/await：复杂的异步流程控制\n\n\n### 异步编程方案对比\n\n#### 1. 回调函数（Callback）\n优点：\n- 简单直接，容易理解\n- 适用于简单的异步操作\n- 基础代码量少\n\n缺点：\n- 容易产生回调地狱\n- 错误处理复杂\n- 代码可读性差\n- 不能使用try-catch捕获错误\n\n适用场景：\n- 简单的一次性异步操作\n- 事件监听处理\n\n\n#### 2. Promise\n优点：\n- 链式调用，避免回调地狱\n- 统一的错误处理机制\n- 多个异步操作的状态管理\n- 支持并行操作（Promise.all/race）\n\n缺点：\n- 无法取消执行\n- 无法获取执行进度\n- 代码较callback略微复杂\n\n适用场景：\n- 多个依赖异步操作\n- 需要错误统一处理\n- 并行异步操作\n\n\n#### 3. Generator\n默认执行之后会返回一个迭代器，\n优点：\n- 可以暂停和恢复执行\n- 提供了更好的异步流程控制\n- 可以在生成器函数内部捕获错误\n\n缺点：\n- 需要手动执行next()\n- 代码较复杂\n- 不直观，理解成本高\n\n适用场景：\n- 需要精确控制异步流程\n- 需要实现迭代器\n- 复杂的状态管理\n```javascript\n// 1.创建自定义的迭代规则\n// 创建一个范围迭代器\nfunction* range(start, end) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n// 使用迭代器\nconst iterator = range(1, 5);\nfor (const value of iterator) {\n  console.log(value);\n}\n\n// 2状态机管理：\nfunction* playerStateMachine() {\n    let state = 'IDLE';\n    \n    while(true) {\n        switch(state) {\n            case 'IDLE':\n                state = yield '等待操作';\n                break;\n            case 'RUNNING':\n                state = yield '正在奔跑';\n                break;\n            case 'JUMPING':\n                state = yield '正在跳跃';\n                break;\n        }\n    }\n}\nconst player = playerStateMachine();\nconsole.log(player.next().value); // \"等待操作\"\nconsole.log(player.next('RUNNING').value); // \"正在奔跑\"\nconsole.log(player.next('JUMPING').value); // \"正在跳跃\"\n\n// 3. 异步操作控制\nfunction* dataFetchFlow() {\n    try {\n        // 显示加载状态\n        yield showLoading();\n        \n        // 获取数据\n        const data = yield fetchData();\n        \n        // 处理数据\n        yield processData(data);\n        \n        // 隐藏加载状态\n        yield hideLoading();\n    } catch (error) {\n        yield handleError(error);\n    }\n}\n\n// 4. 工作流程控制\nfunction* uploadProcess() {\n    // 检查文件\n    const file = yield '检查文件';\n    if (!file) throw new Error('文件不存在');\n    \n    // 压缩文件\n    yield '压缩文件';\n    \n    // 上传\n    const result = yield '上传中';\n    \n    // 更新界面\n    yield '更新完成';\n}\n// 表单验证流程\nfunction* formValidation() {\n    // 验证用户名\n    const username = yield '请输入用户名';\n    if (!username) yield '用户名不能为空';\n    \n    // 验证密码\n    const password = yield '请输入密码';\n    if (password.length < 6) yield '密码太短';\n    \n    // 验证邮箱\n    const email = yield '请输入邮箱';\n    if (!email.includes('@')) yield '邮箱格式错误';\n    \n    return '验证通过';\n}\n```\n#### 疑问\n1. for of这里为啥没有使用next()?\n可以手动使用next，也可以直接使用for of，Generator函数自动实现了迭代器协议，返回的对象自动实现Symbol.iterator方法;for of 循环内部自动调用next了;展开运算符；解构赋值；Array.from都会自动调用迭代器\n```javascript\n// for...of 循环内部大致相当于：\nfunction forOf(iterator) {\n    let result = iterator.next();\n    while(!result.done) {\n        console.log(result.value);\n        result = iterator.next();\n    }\n}\n// 这些语法都会自动调用迭代器：\nconst numbers = [...range(1, 5)];  // 展开运算符\nconst [a, b, c] = range(1, 3);     // 解构赋值\nArray.from(range(1, 5));           // Array.from\n```\n2. Generator函数是为啥没有显式的return，但是却可以调用它的返回值？\nGenerator函数的隐式返回是Javascript引擎在调用时自动完成的，创建迭代器对象，设置内部状态，实现迭代器协议，返回这个迭代器对象。所以它总是会返回一个迭代器对象。\n```javascript\n// 1. Generator函数的简化实现原理\nfunction* simpleGenerator() {\n    console.log('开始执行');\n    yield 1;    // 第一个暂停点\n    yield 2;    // 第二个暂停点\n    console.log('结束执行');\n}\n\n// 当我们调用Generator函数时，JavaScript引擎实际上会：\n// 1. 创建一个迭代器对象\n// 2. 设置初始状态\n// 大致相当于以下代码：\n\nfunction createGenerator() {\n    // 创建迭代器对象\n    const iterator = {\n        // 内部状态\n        _state: 0,\n        \n        // next方法实现\n        next: function() {\n            switch(this._state) {\n                case 0:\n                    this._state = 1;\n                    return { value: 1, done: false };\n                case 1:\n                    this._state = 2;\n                    return { value: 2, done: false };\n                case 2:\n                    return { value: undefined, done: true };\n            }\n        },\n        \n        // 实现迭代器协议\n        [Symbol.iterator]: function() {\n            return this;\n        }\n    };\n    \n    return iterator;\n}\n```\n3. 有什么更真实的场景会使用到状态机呢？（TODO: 还需要更深入的学习了解）\n游戏角色的状态（初始化，攻击，受伤，死亡等），中间可以加入其他不是这几个的动作或者事件。（状态可以自动保存在闭包中，不需要额外的状态管理代码）其他的需要手动维护状态，保存和恢复需要显示编写。\n\n#### 使用Generator的关键考虑因素\n\n1. 何时使用：\n- 需要延迟计算\n- 需要控制执行流程\n- 需要自定义迭代逻辑\n- 处理大量数据时需要分步处理\n\n2. 何时不使用：\n- 简单的异步操作（用async/await更合适）\n- 不需要暂停/恢复的操作\n- 团队对Generator不熟悉的情况\n\n3. 注意事项：\n- Generator函数的错误处理需要特别注意\n- 需要考虑内存使用（特别是无限序列）\n- 调试可能比普通函数更复杂\n\n\n#### 4. Async/Await\n优点：\n- 同步代码风格编写异步\n- 简洁直观，易于理解\n- 更好的错误处理机制\n- 支持try-catch捕获异常\n- 便于调试\n\n缺点：\n- 可能导致性能问题（如果使用不当）\n- 无法处理取消操作\n- await会阻塞后续代码执行\n\n适用场景：\n- 复杂的异步业务逻辑\n- 需要顺序执行的异步操作\n- 依赖前一个异步结果的操作\n\n\n#### 如何取消异步操作 \n如果是fetch请求，优先使用AbortController\n如果需要精细控制，考虑Generator\n如果是复杂的异步流程，考虑RxJS\n如果是简单场景，可以使用自定义Promise","source":"_posts/js异步编程.md","raw":"---\ntitle: js异步编程\ndate: 2018-02-07 16:11:29\ntags:\n- js\n- 异步编程\ncategory: \n- javascript\n---\n\n### 计划内容\n- 单线程\n- 事件驱动\n- callback\n- setTimeout、setInterval\n- Promise\n- generator\n- async/await\n\n### JavaScript的单线程特性\nJavaScript是一门单线程的编程语言，这意味着它只有一个主线程来处理所有的任务。这种设计是由其最初在浏览器环境下的应用场景决定的。\n\n### 事件驱动\nJavaScript通过事件驱动的方式来处理异步操作：\n- 事件循环（Event Loop）\n- 事件队列（Event Queue）\n- 宏任务（Macro-task）和微任务（Micro-task）\n\n#### 1. 事件循环（Event Loop）\n事件循环是JavaScript实现异步的核心机制，它主要负责：\n- 执行同步代码\n- 检查宏任务队列\n- 执行微任务队列\n- 更新渲染\n\n执行顺序：\n1. 执行同步代码（主线程）\n2. 清空微任务队列（micro-task queue）\n3. 执行一个宏任务（macro-task queue）\n4. 重复步骤2-3\n```javascript\n// 事件循环示例\nconsole.log('1'); // 同步代码\nsetTimeout(() => {\nconsole.log('2'); // 宏任务\n}, 0);\nPromise.resolve().then(() => {\nconsole.log('3'); // 微任务\n});\nconsole.log('4'); // 同步代码\n// 输出顺序：1 -> 4 -> 3 -> 2\n```\n\n\n#### 2. 事件队列（Event Queue）\nJavaScript中有两种主要的任务队列：\n\n1. **宏任务队列（Macro-task Queue）**\n   - setTimeout/setInterval\n   - setImmediate (Node.js)\n   - requestAnimationFrame (浏览器)\n   - I/O操作\n   - UI渲染\n   - script标签\n\n2. **微任务队列（Micro-task Queue）**\n   - Promise.then/catch/finally\n   - process.nextTick (Node.js)\n   - MutationObserver\n   - queueMicrotask\n\n```javascript \n// 宏任务和微任务的执行顺序\nsetTimeout(() => {\nconsole.log('宏任务1');\nPromise.resolve().then(() => {\nconsole.log('微任务2');\n});\n}, 0);\nPromise.resolve().then(() => {\nconsole.log('微任务1');\nsetTimeout(() => {\nconsole.log('宏任务2');\n}, 0);\n});\n// 输出顺序：微任务1 -> 宏任务1 -> 微任务2 -> 宏任务2\n\n```\n\n\n#### 3. 实际应用示例\n\n1. **异步操作的优先级控制**\n\n```javascript\n// 高优先级任务使用微任务\nfunction highPriorityTask() {\nqueueMicrotask(() => {\nconsole.log('高优先级任务执行');\n});\n}\n// 低优先级任务使用宏任务\nfunction lowPriorityTask() {\nsetTimeout(() => {\nconsole.log('低优先级任务执行');\n}, 0);\n}\n```\n\n2. **避免回调地狱的最佳实践**\n```javascript\n// 不好的实践\n// 回调地狱示例\nsetTimeout(() => {\n    console.log('1');\n    setTimeout(() => {\n        console.log('2');\n        setTimeout(() => {\n            console.log('3');\n        }, 0);\n    }, 0);\n}, 0);\n\n// 使用Promise改写\nnew Promise(resolve => {\n    setTimeout(() => {\n        console.log('1');\n        resolve();\n    }, 0);\n}).then(() => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            console.log('2');\n            resolve();\n        }, 0);\n    });\n}).then(() => {\n    setTimeout(() => {\n        console.log('3');\n    }, 0);\n});\n\n// 使用async/await改写（最优雅）\nasync function sequence() {\n    await new Promise(resolve => setTimeout(() => {\n        console.log('1');\n        resolve();\n    }, 0));\n    \n    await new Promise(resolve => setTimeout(() => {\n        console.log('2');\n        resolve();\n    }, 0));\n    \n    await new Promise(resolve => setTimeout(() => {\n        console.log('3');\n        resolve();\n    }, 0));\n}\n\n// 执行\nsequence();\n// 好的实践\nasync function betterWay() {\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('1');\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('2');\nawait new Promise(resolve => setTimeout(resolve, 0));\nconsole.log('3');\n}\n```\n\n#### 4. 注意事项\n\n1. **性能考虑**\n- 微任务优先级高，但不要过度使用\n- 避免在微任务中执行耗时操作\n- 合理使用宏任务分散负载\n\n2. **常见陷阱**\n```javascript\n// 死循环微任务\nfunction deadlock() {\nPromise.resolve().then(() => deadlock());\n}\n// 这会阻塞事件循环，导致宏任务无法执行\n```\n\n3. **最佳实践**\n- 耗时操作放入宏任务队列\n- 需要即时响应的放入微任务队列\n- 合理组合async/await与Promise\n- 避免同步阻塞操作\n\n### 回调函数（Callback）\n最基础的异步编程方式，但可能导致回调地狱：\n```javascript\n// 回调地狱示例\ngetData(function(a) {\n  getMoreData(a, function(b) {\n    getMoreData(b, function(c) {\n      getMoreData(c, function(d) {\n      console.log('数据获取完成');\n      });\n    });\n  });\n});\n\n```\n\n### setTimeout和setInterval\n用于延时执行和周期性执行任务的定时器函数：\n```javascript\n// setTimeout示例\nsetTimeout(function() {\n  console.log('延时执行');\n}, 1000);\n```\n\n### Promise\nPromise是一种更优雅的异步编程解决方案，可以有效避免回调地狱：\n```javascript\n// Promise示例\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('数据获取完成');\n  }, 1000);\n});\n```\n\n### Generator\n生成器函数提供了一种可以暂停和恢复执行的方式：\n```javascript\nfunction dataGenerator() {\nconst data1 = yield getData();\nconst data2 = yield getMoreData(data1);\nconst data3 = yield getMoreData(data2);\nreturn data3;\n}\n\n// 使用生成器\nconst gen = dataGenerator();\ngen.next().value.then(data1 => {\n  gen.next(data1).value.then(data2 => {\n    gen.next(data2).value.then(data3 => {\n      console.log('最终数据:', data3);\n    });\n  });\n});\n```\n\n### async/await\nasync/await是ES2017引入的一种更简洁的异步编程方式,它是Generator的语法糖:\n```javascript\n// async/await示例\nasync function fetchData() {\n  const data1 = await getData();\n  const data2 = await getMoreData(data1);\n  const data3 = await getMoreData(data2);\n  return data3;\n}\n```\n\n### 实践建议\n1. 优先使用async/await进行异步编程\n2. 合理使用Promise.all()处理并发请求\n3. 注意错误处理和异常捕获\n4. 避免回调地狱\n5. 合理使用定时器，注意及时清除不需要的定时器\n\n### 总结\nJavaScript的异步编程经历了从回调函数、Promise、Generator到async/await的演进过程，每种方式都有其适用场景：\n- 回调函数：简单场景\n- Promise：中等复杂度的异步操作\n- Generator：需要精细控制执行流程的场景\n- async/await：复杂的异步流程控制\n\n\n### 异步编程方案对比\n\n#### 1. 回调函数（Callback）\n优点：\n- 简单直接，容易理解\n- 适用于简单的异步操作\n- 基础代码量少\n\n缺点：\n- 容易产生回调地狱\n- 错误处理复杂\n- 代码可读性差\n- 不能使用try-catch捕获错误\n\n适用场景：\n- 简单的一次性异步操作\n- 事件监听处理\n\n\n#### 2. Promise\n优点：\n- 链式调用，避免回调地狱\n- 统一的错误处理机制\n- 多个异步操作的状态管理\n- 支持并行操作（Promise.all/race）\n\n缺点：\n- 无法取消执行\n- 无法获取执行进度\n- 代码较callback略微复杂\n\n适用场景：\n- 多个依赖异步操作\n- 需要错误统一处理\n- 并行异步操作\n\n\n#### 3. Generator\n默认执行之后会返回一个迭代器，\n优点：\n- 可以暂停和恢复执行\n- 提供了更好的异步流程控制\n- 可以在生成器函数内部捕获错误\n\n缺点：\n- 需要手动执行next()\n- 代码较复杂\n- 不直观，理解成本高\n\n适用场景：\n- 需要精确控制异步流程\n- 需要实现迭代器\n- 复杂的状态管理\n```javascript\n// 1.创建自定义的迭代规则\n// 创建一个范围迭代器\nfunction* range(start, end) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n// 使用迭代器\nconst iterator = range(1, 5);\nfor (const value of iterator) {\n  console.log(value);\n}\n\n// 2状态机管理：\nfunction* playerStateMachine() {\n    let state = 'IDLE';\n    \n    while(true) {\n        switch(state) {\n            case 'IDLE':\n                state = yield '等待操作';\n                break;\n            case 'RUNNING':\n                state = yield '正在奔跑';\n                break;\n            case 'JUMPING':\n                state = yield '正在跳跃';\n                break;\n        }\n    }\n}\nconst player = playerStateMachine();\nconsole.log(player.next().value); // \"等待操作\"\nconsole.log(player.next('RUNNING').value); // \"正在奔跑\"\nconsole.log(player.next('JUMPING').value); // \"正在跳跃\"\n\n// 3. 异步操作控制\nfunction* dataFetchFlow() {\n    try {\n        // 显示加载状态\n        yield showLoading();\n        \n        // 获取数据\n        const data = yield fetchData();\n        \n        // 处理数据\n        yield processData(data);\n        \n        // 隐藏加载状态\n        yield hideLoading();\n    } catch (error) {\n        yield handleError(error);\n    }\n}\n\n// 4. 工作流程控制\nfunction* uploadProcess() {\n    // 检查文件\n    const file = yield '检查文件';\n    if (!file) throw new Error('文件不存在');\n    \n    // 压缩文件\n    yield '压缩文件';\n    \n    // 上传\n    const result = yield '上传中';\n    \n    // 更新界面\n    yield '更新完成';\n}\n// 表单验证流程\nfunction* formValidation() {\n    // 验证用户名\n    const username = yield '请输入用户名';\n    if (!username) yield '用户名不能为空';\n    \n    // 验证密码\n    const password = yield '请输入密码';\n    if (password.length < 6) yield '密码太短';\n    \n    // 验证邮箱\n    const email = yield '请输入邮箱';\n    if (!email.includes('@')) yield '邮箱格式错误';\n    \n    return '验证通过';\n}\n```\n#### 疑问\n1. for of这里为啥没有使用next()?\n可以手动使用next，也可以直接使用for of，Generator函数自动实现了迭代器协议，返回的对象自动实现Symbol.iterator方法;for of 循环内部自动调用next了;展开运算符；解构赋值；Array.from都会自动调用迭代器\n```javascript\n// for...of 循环内部大致相当于：\nfunction forOf(iterator) {\n    let result = iterator.next();\n    while(!result.done) {\n        console.log(result.value);\n        result = iterator.next();\n    }\n}\n// 这些语法都会自动调用迭代器：\nconst numbers = [...range(1, 5)];  // 展开运算符\nconst [a, b, c] = range(1, 3);     // 解构赋值\nArray.from(range(1, 5));           // Array.from\n```\n2. Generator函数是为啥没有显式的return，但是却可以调用它的返回值？\nGenerator函数的隐式返回是Javascript引擎在调用时自动完成的，创建迭代器对象，设置内部状态，实现迭代器协议，返回这个迭代器对象。所以它总是会返回一个迭代器对象。\n```javascript\n// 1. Generator函数的简化实现原理\nfunction* simpleGenerator() {\n    console.log('开始执行');\n    yield 1;    // 第一个暂停点\n    yield 2;    // 第二个暂停点\n    console.log('结束执行');\n}\n\n// 当我们调用Generator函数时，JavaScript引擎实际上会：\n// 1. 创建一个迭代器对象\n// 2. 设置初始状态\n// 大致相当于以下代码：\n\nfunction createGenerator() {\n    // 创建迭代器对象\n    const iterator = {\n        // 内部状态\n        _state: 0,\n        \n        // next方法实现\n        next: function() {\n            switch(this._state) {\n                case 0:\n                    this._state = 1;\n                    return { value: 1, done: false };\n                case 1:\n                    this._state = 2;\n                    return { value: 2, done: false };\n                case 2:\n                    return { value: undefined, done: true };\n            }\n        },\n        \n        // 实现迭代器协议\n        [Symbol.iterator]: function() {\n            return this;\n        }\n    };\n    \n    return iterator;\n}\n```\n3. 有什么更真实的场景会使用到状态机呢？（TODO: 还需要更深入的学习了解）\n游戏角色的状态（初始化，攻击，受伤，死亡等），中间可以加入其他不是这几个的动作或者事件。（状态可以自动保存在闭包中，不需要额外的状态管理代码）其他的需要手动维护状态，保存和恢复需要显示编写。\n\n#### 使用Generator的关键考虑因素\n\n1. 何时使用：\n- 需要延迟计算\n- 需要控制执行流程\n- 需要自定义迭代逻辑\n- 处理大量数据时需要分步处理\n\n2. 何时不使用：\n- 简单的异步操作（用async/await更合适）\n- 不需要暂停/恢复的操作\n- 团队对Generator不熟悉的情况\n\n3. 注意事项：\n- Generator函数的错误处理需要特别注意\n- 需要考虑内存使用（特别是无限序列）\n- 调试可能比普通函数更复杂\n\n\n#### 4. Async/Await\n优点：\n- 同步代码风格编写异步\n- 简洁直观，易于理解\n- 更好的错误处理机制\n- 支持try-catch捕获异常\n- 便于调试\n\n缺点：\n- 可能导致性能问题（如果使用不当）\n- 无法处理取消操作\n- await会阻塞后续代码执行\n\n适用场景：\n- 复杂的异步业务逻辑\n- 需要顺序执行的异步操作\n- 依赖前一个异步结果的操作\n\n\n#### 如何取消异步操作 \n如果是fetch请求，优先使用AbortController\n如果需要精细控制，考虑Generator\n如果是复杂的异步流程，考虑RxJS\n如果是简单场景，可以使用自定义Promise","slug":"js异步编程","published":1,"updated":"2025-01-17T09:54:40.006Z","_id":"cm5uhmavv000gtkugeff086or","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>单线程</li>\n<li>事件驱动</li>\n<li>callback</li>\n<li>setTimeout、setInterval</li>\n<li>Promise</li>\n<li>generator</li>\n<li>async&#x2F;await</li>\n</ul>\n<h3 id=\"JavaScript的单线程特性\"><a href=\"#JavaScript的单线程特性\" class=\"headerlink\" title=\"JavaScript的单线程特性\"></a>JavaScript的单线程特性</h3><p>JavaScript是一门单线程的编程语言，这意味着它只有一个主线程来处理所有的任务。这种设计是由其最初在浏览器环境下的应用场景决定的。</p>\n<h3 id=\"事件驱动\"><a href=\"#事件驱动\" class=\"headerlink\" title=\"事件驱动\"></a>事件驱动</h3><p>JavaScript通过事件驱动的方式来处理异步操作：</p>\n<ul>\n<li>事件循环（Event Loop）</li>\n<li>事件队列（Event Queue）</li>\n<li>宏任务（Macro-task）和微任务（Micro-task）</li>\n</ul>\n<h4 id=\"1-事件循环（Event-Loop）\"><a href=\"#1-事件循环（Event-Loop）\" class=\"headerlink\" title=\"1. 事件循环（Event Loop）\"></a>1. 事件循环（Event Loop）</h4><p>事件循环是JavaScript实现异步的核心机制，它主要负责：</p>\n<ul>\n<li>执行同步代码</li>\n<li>检查宏任务队列</li>\n<li>执行微任务队列</li>\n<li>更新渲染</li>\n</ul>\n<p>执行顺序：</p>\n<ol>\n<li>执行同步代码（主线程）</li>\n<li>清空微任务队列（micro-task queue）</li>\n<li>执行一个宏任务（macro-task queue）</li>\n<li>重复步骤2-3<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件循环示例</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 同步代码</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>); <span class=\"comment\">// 宏任务</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>); <span class=\"comment\">// 同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 输出顺序：1 -&gt; 4 -&gt; 3 -&gt; 2</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-事件队列（Event-Queue）\"><a href=\"#2-事件队列（Event-Queue）\" class=\"headerlink\" title=\"2. 事件队列（Event Queue）\"></a>2. 事件队列（Event Queue）</h4><p>JavaScript中有两种主要的任务队列：</p>\n<ol>\n<li><p><strong>宏任务队列（Macro-task Queue）</strong></p>\n<ul>\n<li>setTimeout&#x2F;setInterval</li>\n<li>setImmediate (Node.js)</li>\n<li>requestAnimationFrame (浏览器)</li>\n<li>I&#x2F;O操作</li>\n<li>UI渲染</li>\n<li>script标签</li>\n</ul>\n</li>\n<li><p><strong>微任务队列（Micro-task Queue）</strong></p>\n<ul>\n<li>Promise.then&#x2F;catch&#x2F;finally</li>\n<li>process.nextTick (Node.js)</li>\n<li>MutationObserver</li>\n<li>queueMicrotask</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 宏任务和微任务的执行顺序</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;宏任务1&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;微任务2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;微任务1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;宏任务2&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出顺序：微任务1 -&gt; 宏任务1 -&gt; 微任务2 -&gt; 宏任务2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-实际应用示例\"><a href=\"#3-实际应用示例\" class=\"headerlink\" title=\"3. 实际应用示例\"></a>3. 实际应用示例</h4><ol>\n<li><strong>异步操作的优先级控制</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高优先级任务使用微任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">highPriorityTask</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;高优先级任务执行&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 低优先级任务使用宏任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lowPriorityTask</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;低优先级任务执行&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>避免回调地狱的最佳实践</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不好的实践</span></span><br><span class=\"line\"><span class=\"comment\">// 回调地狱示例</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Promise改写</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用async/await改写（最优雅）</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sequence</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"title function_\">sequence</span>();</span><br><span class=\"line\"><span class=\"comment\">// 好的实践</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">betterWay</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h4><ol>\n<li><strong>性能考虑</strong></li>\n</ol>\n<ul>\n<li>微任务优先级高，但不要过度使用</li>\n<li>避免在微任务中执行耗时操作</li>\n<li>合理使用宏任务分散负载</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>常见陷阱</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 死循环微任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deadlock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">deadlock</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这会阻塞事件循环，导致宏任务无法执行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最佳实践</strong></p>\n</li>\n</ol>\n<ul>\n<li>耗时操作放入宏任务队列</li>\n<li>需要即时响应的放入微任务队列</li>\n<li>合理组合async&#x2F;await与Promise</li>\n<li>避免同步阻塞操作</li>\n</ul>\n<h3 id=\"回调函数（Callback）\"><a href=\"#回调函数（Callback）\" class=\"headerlink\" title=\"回调函数（Callback）\"></a>回调函数（Callback）</h3><p>最基础的异步编程方式，但可能导致回调地狱：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回调地狱示例</span></span><br><span class=\"line\"><span class=\"title function_\">getData</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getMoreData</span>(a, <span class=\"keyword\">function</span>(<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getMoreData</span>(b, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getMoreData</span>(c, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据获取完成&#x27;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setTimeout和setInterval\"><a href=\"#setTimeout和setInterval\" class=\"headerlink\" title=\"setTimeout和setInterval\"></a>setTimeout和setInterval</h3><p>用于延时执行和周期性执行任务的定时器函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setTimeout示例</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;延时执行&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise是一种更优雅的异步编程解决方案，可以有效避免回调地狱：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Promise示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;数据获取完成&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>生成器函数提供了一种可以暂停和恢复执行的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dataGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> data1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getMoreData</span>(data1);</span><br><span class=\"line\"><span class=\"keyword\">const</span> data3 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getMoreData</span>(data2);</span><br><span class=\"line\"><span class=\"keyword\">return</span> data3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用生成器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"title function_\">dataGenerator</span>();</span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</span><br><span class=\"line\">  gen.<span class=\"title function_\">next</span>(data1).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> &#123;</span><br><span class=\"line\">    gen.<span class=\"title function_\">next</span>(data2).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data3</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;最终数据:&#x27;</span>, data3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h3><p>async&#x2F;await是ES2017引入的一种更简洁的异步编程方式,它是Generator的语法糖:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async/await示例</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">getMoreData</span>(data1);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data3 = <span class=\"keyword\">await</span> <span class=\"title function_\">getMoreData</span>(data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实践建议\"><a href=\"#实践建议\" class=\"headerlink\" title=\"实践建议\"></a>实践建议</h3><ol>\n<li>优先使用async&#x2F;await进行异步编程</li>\n<li>合理使用Promise.all()处理并发请求</li>\n<li>注意错误处理和异常捕获</li>\n<li>避免回调地狱</li>\n<li>合理使用定时器，注意及时清除不需要的定时器</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>JavaScript的异步编程经历了从回调函数、Promise、Generator到async&#x2F;await的演进过程，每种方式都有其适用场景：</p>\n<ul>\n<li>回调函数：简单场景</li>\n<li>Promise：中等复杂度的异步操作</li>\n<li>Generator：需要精细控制执行流程的场景</li>\n<li>async&#x2F;await：复杂的异步流程控制</li>\n</ul>\n<h3 id=\"异步编程方案对比\"><a href=\"#异步编程方案对比\" class=\"headerlink\" title=\"异步编程方案对比\"></a>异步编程方案对比</h3><h4 id=\"1-回调函数（Callback）\"><a href=\"#1-回调函数（Callback）\" class=\"headerlink\" title=\"1. 回调函数（Callback）\"></a>1. 回调函数（Callback）</h4><p>优点：</p>\n<ul>\n<li>简单直接，容易理解</li>\n<li>适用于简单的异步操作</li>\n<li>基础代码量少</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>容易产生回调地狱</li>\n<li>错误处理复杂</li>\n<li>代码可读性差</li>\n<li>不能使用try-catch捕获错误</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>简单的一次性异步操作</li>\n<li>事件监听处理</li>\n</ul>\n<h4 id=\"2-Promise\"><a href=\"#2-Promise\" class=\"headerlink\" title=\"2. Promise\"></a>2. Promise</h4><p>优点：</p>\n<ul>\n<li>链式调用，避免回调地狱</li>\n<li>统一的错误处理机制</li>\n<li>多个异步操作的状态管理</li>\n<li>支持并行操作（Promise.all&#x2F;race）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>无法取消执行</li>\n<li>无法获取执行进度</li>\n<li>代码较callback略微复杂</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>多个依赖异步操作</li>\n<li>需要错误统一处理</li>\n<li>并行异步操作</li>\n</ul>\n<h4 id=\"3-Generator\"><a href=\"#3-Generator\" class=\"headerlink\" title=\"3. Generator\"></a>3. Generator</h4><p>默认执行之后会返回一个迭代器，<br>优点：</p>\n<ul>\n<li>可以暂停和恢复执行</li>\n<li>提供了更好的异步流程控制</li>\n<li>可以在生成器函数内部捕获错误</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要手动执行next()</li>\n<li>代码较复杂</li>\n<li>不直观，理解成本高</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>需要精确控制异步流程</li>\n<li>需要实现迭代器</li>\n<li>复杂的状态管理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建自定义的迭代规则</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个范围迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">range</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> iterator) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2状态机管理：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">playerStateMachine</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">&#x27;IDLE&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IDLE&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;等待操作&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;RUNNING&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;正在奔跑&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;JUMPING&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;正在跳跃&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> player = <span class=\"title function_\">playerStateMachine</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// &quot;等待操作&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;RUNNING&#x27;</span>).<span class=\"property\">value</span>); <span class=\"comment\">// &quot;正在奔跑&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;JUMPING&#x27;</span>).<span class=\"property\">value</span>); <span class=\"comment\">// &quot;正在跳跃&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 异步操作控制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">dataFetchFlow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 显示加载状态</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">showLoading</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">fetchData</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">processData</span>(data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 隐藏加载状态</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">hideLoading</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">handleError</span>(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 工作流程控制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">uploadProcess</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查文件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;检查文件&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!file) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;文件不存在&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 压缩文件</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;压缩文件&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 上传</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;上传中&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 更新界面</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;更新完成&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 表单验证流程</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">formValidation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> username = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入用户名&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!username) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;用户名不能为空&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验证密码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> password = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入密码&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.<span class=\"property\">length</span> &lt; <span class=\"number\">6</span>) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;密码太短&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验证邮箱</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> email = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入邮箱&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!email.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;@&#x27;</span>)) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;邮箱格式错误&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;验证通过&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h4><ol>\n<li>for of这里为啥没有使用next()?<br>可以手动使用next，也可以直接使用for of，Generator函数自动实现了迭代器协议，返回的对象自动实现Symbol.iterator方法;for of 循环内部自动调用next了;展开运算符；解构赋值；Array.from都会自动调用迭代器<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for...of 循环内部大致相当于：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">forOf</span>(<span class=\"params\">iterator</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">value</span>);</span><br><span class=\"line\">        result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这些语法都会自动调用迭代器：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [...<span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>)];  <span class=\"comment\">// 展开运算符</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = <span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>);     <span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>));           <span class=\"comment\">// Array.from</span></span><br></pre></td></tr></table></figure></li>\n<li>Generator函数是为啥没有显式的return，但是却可以调用它的返回值？<br>Generator函数的隐式返回是Javascript引擎在调用时自动完成的，创建迭代器对象，设置内部状态，实现迭代器协议，返回这个迭代器对象。所以它总是会返回一个迭代器对象。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Generator函数的简化实现原理</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">simpleGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始执行&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;    <span class=\"comment\">// 第一个暂停点</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 第二个暂停点</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;结束执行&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当我们调用Generator函数时，JavaScript引擎实际上会：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建一个迭代器对象</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 设置初始状态</span></span><br><span class=\"line\"><span class=\"comment\">// 大致相当于以下代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建迭代器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内部状态</span></span><br><span class=\"line\">        <span class=\"attr\">_state</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// next方法实现</span></span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_state</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">_state</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">_state</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 实现迭代器协议</span></span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>有什么更真实的场景会使用到状态机呢？（TODO: 还需要更深入的学习了解）<br>游戏角色的状态（初始化，攻击，受伤，死亡等），中间可以加入其他不是这几个的动作或者事件。（状态可以自动保存在闭包中，不需要额外的状态管理代码）其他的需要手动维护状态，保存和恢复需要显示编写。</li>\n</ol>\n<h4 id=\"使用Generator的关键考虑因素\"><a href=\"#使用Generator的关键考虑因素\" class=\"headerlink\" title=\"使用Generator的关键考虑因素\"></a>使用Generator的关键考虑因素</h4><ol>\n<li>何时使用：</li>\n</ol>\n<ul>\n<li>需要延迟计算</li>\n<li>需要控制执行流程</li>\n<li>需要自定义迭代逻辑</li>\n<li>处理大量数据时需要分步处理</li>\n</ul>\n<ol start=\"2\">\n<li>何时不使用：</li>\n</ol>\n<ul>\n<li>简单的异步操作（用async&#x2F;await更合适）</li>\n<li>不需要暂停&#x2F;恢复的操作</li>\n<li>团队对Generator不熟悉的情况</li>\n</ul>\n<ol start=\"3\">\n<li>注意事项：</li>\n</ol>\n<ul>\n<li>Generator函数的错误处理需要特别注意</li>\n<li>需要考虑内存使用（特别是无限序列）</li>\n<li>调试可能比普通函数更复杂</li>\n</ul>\n<h4 id=\"4-Async-Await\"><a href=\"#4-Async-Await\" class=\"headerlink\" title=\"4. Async&#x2F;Await\"></a>4. Async&#x2F;Await</h4><p>优点：</p>\n<ul>\n<li>同步代码风格编写异步</li>\n<li>简洁直观，易于理解</li>\n<li>更好的错误处理机制</li>\n<li>支持try-catch捕获异常</li>\n<li>便于调试</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>可能导致性能问题（如果使用不当）</li>\n<li>无法处理取消操作</li>\n<li>await会阻塞后续代码执行</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>复杂的异步业务逻辑</li>\n<li>需要顺序执行的异步操作</li>\n<li>依赖前一个异步结果的操作</li>\n</ul>\n<h4 id=\"如何取消异步操作\"><a href=\"#如何取消异步操作\" class=\"headerlink\" title=\"如何取消异步操作\"></a>如何取消异步操作</h4><p>如果是fetch请求，优先使用AbortController<br>如果需要精细控制，考虑Generator<br>如果是复杂的异步流程，考虑RxJS<br>如果是简单场景，可以使用自定义Promise</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>单线程</li>\n<li>事件驱动</li>\n<li>callback</li>\n<li>setTimeout、setInterval</li>\n<li>Promise</li>\n<li>generator</li>\n<li>async&#x2F;await</li>\n</ul>\n<h3 id=\"JavaScript的单线程特性\"><a href=\"#JavaScript的单线程特性\" class=\"headerlink\" title=\"JavaScript的单线程特性\"></a>JavaScript的单线程特性</h3><p>JavaScript是一门单线程的编程语言，这意味着它只有一个主线程来处理所有的任务。这种设计是由其最初在浏览器环境下的应用场景决定的。</p>\n<h3 id=\"事件驱动\"><a href=\"#事件驱动\" class=\"headerlink\" title=\"事件驱动\"></a>事件驱动</h3><p>JavaScript通过事件驱动的方式来处理异步操作：</p>\n<ul>\n<li>事件循环（Event Loop）</li>\n<li>事件队列（Event Queue）</li>\n<li>宏任务（Macro-task）和微任务（Micro-task）</li>\n</ul>\n<h4 id=\"1-事件循环（Event-Loop）\"><a href=\"#1-事件循环（Event-Loop）\" class=\"headerlink\" title=\"1. 事件循环（Event Loop）\"></a>1. 事件循环（Event Loop）</h4><p>事件循环是JavaScript实现异步的核心机制，它主要负责：</p>\n<ul>\n<li>执行同步代码</li>\n<li>检查宏任务队列</li>\n<li>执行微任务队列</li>\n<li>更新渲染</li>\n</ul>\n<p>执行顺序：</p>\n<ol>\n<li>执行同步代码（主线程）</li>\n<li>清空微任务队列（micro-task queue）</li>\n<li>执行一个宏任务（macro-task queue）</li>\n<li>重复步骤2-3<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件循环示例</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 同步代码</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>); <span class=\"comment\">// 宏任务</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>); <span class=\"comment\">// 同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 输出顺序：1 -&gt; 4 -&gt; 3 -&gt; 2</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-事件队列（Event-Queue）\"><a href=\"#2-事件队列（Event-Queue）\" class=\"headerlink\" title=\"2. 事件队列（Event Queue）\"></a>2. 事件队列（Event Queue）</h4><p>JavaScript中有两种主要的任务队列：</p>\n<ol>\n<li><p><strong>宏任务队列（Macro-task Queue）</strong></p>\n<ul>\n<li>setTimeout&#x2F;setInterval</li>\n<li>setImmediate (Node.js)</li>\n<li>requestAnimationFrame (浏览器)</li>\n<li>I&#x2F;O操作</li>\n<li>UI渲染</li>\n<li>script标签</li>\n</ul>\n</li>\n<li><p><strong>微任务队列（Micro-task Queue）</strong></p>\n<ul>\n<li>Promise.then&#x2F;catch&#x2F;finally</li>\n<li>process.nextTick (Node.js)</li>\n<li>MutationObserver</li>\n<li>queueMicrotask</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 宏任务和微任务的执行顺序</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;宏任务1&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;微任务2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;微任务1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;宏任务2&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出顺序：微任务1 -&gt; 宏任务1 -&gt; 微任务2 -&gt; 宏任务2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-实际应用示例\"><a href=\"#3-实际应用示例\" class=\"headerlink\" title=\"3. 实际应用示例\"></a>3. 实际应用示例</h4><ol>\n<li><strong>异步操作的优先级控制</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高优先级任务使用微任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">highPriorityTask</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;高优先级任务执行&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 低优先级任务使用宏任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lowPriorityTask</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;低优先级任务执行&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>避免回调地狱的最佳实践</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不好的实践</span></span><br><span class=\"line\"><span class=\"comment\">// 回调地狱示例</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Promise改写</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用async/await改写（最优雅）</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sequence</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"title function_\">sequence</span>();</span><br><span class=\"line\"><span class=\"comment\">// 好的实践</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">betterWay</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h4><ol>\n<li><strong>性能考虑</strong></li>\n</ol>\n<ul>\n<li>微任务优先级高，但不要过度使用</li>\n<li>避免在微任务中执行耗时操作</li>\n<li>合理使用宏任务分散负载</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>常见陷阱</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 死循环微任务</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deadlock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">deadlock</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这会阻塞事件循环，导致宏任务无法执行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最佳实践</strong></p>\n</li>\n</ol>\n<ul>\n<li>耗时操作放入宏任务队列</li>\n<li>需要即时响应的放入微任务队列</li>\n<li>合理组合async&#x2F;await与Promise</li>\n<li>避免同步阻塞操作</li>\n</ul>\n<h3 id=\"回调函数（Callback）\"><a href=\"#回调函数（Callback）\" class=\"headerlink\" title=\"回调函数（Callback）\"></a>回调函数（Callback）</h3><p>最基础的异步编程方式，但可能导致回调地狱：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回调地狱示例</span></span><br><span class=\"line\"><span class=\"title function_\">getData</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getMoreData</span>(a, <span class=\"keyword\">function</span>(<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getMoreData</span>(b, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getMoreData</span>(c, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据获取完成&#x27;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setTimeout和setInterval\"><a href=\"#setTimeout和setInterval\" class=\"headerlink\" title=\"setTimeout和setInterval\"></a>setTimeout和setInterval</h3><p>用于延时执行和周期性执行任务的定时器函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setTimeout示例</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;延时执行&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise是一种更优雅的异步编程解决方案，可以有效避免回调地狱：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Promise示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;数据获取完成&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>生成器函数提供了一种可以暂停和恢复执行的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dataGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> data1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getMoreData</span>(data1);</span><br><span class=\"line\"><span class=\"keyword\">const</span> data3 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getMoreData</span>(data2);</span><br><span class=\"line\"><span class=\"keyword\">return</span> data3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用生成器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"title function_\">dataGenerator</span>();</span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</span><br><span class=\"line\">  gen.<span class=\"title function_\">next</span>(data1).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> &#123;</span><br><span class=\"line\">    gen.<span class=\"title function_\">next</span>(data2).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data3</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;最终数据:&#x27;</span>, data3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h3><p>async&#x2F;await是ES2017引入的一种更简洁的异步编程方式,它是Generator的语法糖:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async/await示例</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data1 = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">getMoreData</span>(data1);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data3 = <span class=\"keyword\">await</span> <span class=\"title function_\">getMoreData</span>(data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实践建议\"><a href=\"#实践建议\" class=\"headerlink\" title=\"实践建议\"></a>实践建议</h3><ol>\n<li>优先使用async&#x2F;await进行异步编程</li>\n<li>合理使用Promise.all()处理并发请求</li>\n<li>注意错误处理和异常捕获</li>\n<li>避免回调地狱</li>\n<li>合理使用定时器，注意及时清除不需要的定时器</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>JavaScript的异步编程经历了从回调函数、Promise、Generator到async&#x2F;await的演进过程，每种方式都有其适用场景：</p>\n<ul>\n<li>回调函数：简单场景</li>\n<li>Promise：中等复杂度的异步操作</li>\n<li>Generator：需要精细控制执行流程的场景</li>\n<li>async&#x2F;await：复杂的异步流程控制</li>\n</ul>\n<h3 id=\"异步编程方案对比\"><a href=\"#异步编程方案对比\" class=\"headerlink\" title=\"异步编程方案对比\"></a>异步编程方案对比</h3><h4 id=\"1-回调函数（Callback）\"><a href=\"#1-回调函数（Callback）\" class=\"headerlink\" title=\"1. 回调函数（Callback）\"></a>1. 回调函数（Callback）</h4><p>优点：</p>\n<ul>\n<li>简单直接，容易理解</li>\n<li>适用于简单的异步操作</li>\n<li>基础代码量少</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>容易产生回调地狱</li>\n<li>错误处理复杂</li>\n<li>代码可读性差</li>\n<li>不能使用try-catch捕获错误</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>简单的一次性异步操作</li>\n<li>事件监听处理</li>\n</ul>\n<h4 id=\"2-Promise\"><a href=\"#2-Promise\" class=\"headerlink\" title=\"2. Promise\"></a>2. Promise</h4><p>优点：</p>\n<ul>\n<li>链式调用，避免回调地狱</li>\n<li>统一的错误处理机制</li>\n<li>多个异步操作的状态管理</li>\n<li>支持并行操作（Promise.all&#x2F;race）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>无法取消执行</li>\n<li>无法获取执行进度</li>\n<li>代码较callback略微复杂</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>多个依赖异步操作</li>\n<li>需要错误统一处理</li>\n<li>并行异步操作</li>\n</ul>\n<h4 id=\"3-Generator\"><a href=\"#3-Generator\" class=\"headerlink\" title=\"3. Generator\"></a>3. Generator</h4><p>默认执行之后会返回一个迭代器，<br>优点：</p>\n<ul>\n<li>可以暂停和恢复执行</li>\n<li>提供了更好的异步流程控制</li>\n<li>可以在生成器函数内部捕获错误</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要手动执行next()</li>\n<li>代码较复杂</li>\n<li>不直观，理解成本高</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>需要精确控制异步流程</li>\n<li>需要实现迭代器</li>\n<li>复杂的状态管理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建自定义的迭代规则</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个范围迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">range</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> iterator) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2状态机管理：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">playerStateMachine</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">&#x27;IDLE&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;IDLE&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;等待操作&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;RUNNING&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;正在奔跑&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;JUMPING&#x27;</span>:</span><br><span class=\"line\">                state = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;正在跳跃&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> player = <span class=\"title function_\">playerStateMachine</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// &quot;等待操作&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;RUNNING&#x27;</span>).<span class=\"property\">value</span>); <span class=\"comment\">// &quot;正在奔跑&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(player.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;JUMPING&#x27;</span>).<span class=\"property\">value</span>); <span class=\"comment\">// &quot;正在跳跃&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 异步操作控制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">dataFetchFlow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 显示加载状态</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">showLoading</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">fetchData</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">processData</span>(data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 隐藏加载状态</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">hideLoading</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"title function_\">handleError</span>(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 工作流程控制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">uploadProcess</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查文件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;检查文件&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!file) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;文件不存在&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 压缩文件</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;压缩文件&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 上传</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;上传中&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 更新界面</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;更新完成&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 表单验证流程</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">formValidation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> username = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入用户名&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!username) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;用户名不能为空&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验证密码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> password = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入密码&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.<span class=\"property\">length</span> &lt; <span class=\"number\">6</span>) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;密码太短&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验证邮箱</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> email = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;请输入邮箱&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!email.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;@&#x27;</span>)) <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;邮箱格式错误&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;验证通过&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h4><ol>\n<li>for of这里为啥没有使用next()?<br>可以手动使用next，也可以直接使用for of，Generator函数自动实现了迭代器协议，返回的对象自动实现Symbol.iterator方法;for of 循环内部自动调用next了;展开运算符；解构赋值；Array.from都会自动调用迭代器<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for...of 循环内部大致相当于：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">forOf</span>(<span class=\"params\">iterator</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">value</span>);</span><br><span class=\"line\">        result = iterator.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这些语法都会自动调用迭代器：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [...<span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>)];  <span class=\"comment\">// 展开运算符</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = <span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>);     <span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"title function_\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>));           <span class=\"comment\">// Array.from</span></span><br></pre></td></tr></table></figure></li>\n<li>Generator函数是为啥没有显式的return，但是却可以调用它的返回值？<br>Generator函数的隐式返回是Javascript引擎在调用时自动完成的，创建迭代器对象，设置内部状态，实现迭代器协议，返回这个迭代器对象。所以它总是会返回一个迭代器对象。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Generator函数的简化实现原理</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">simpleGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始执行&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;    <span class=\"comment\">// 第一个暂停点</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 第二个暂停点</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;结束执行&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当我们调用Generator函数时，JavaScript引擎实际上会：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建一个迭代器对象</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 设置初始状态</span></span><br><span class=\"line\"><span class=\"comment\">// 大致相当于以下代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createGenerator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建迭代器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内部状态</span></span><br><span class=\"line\">        <span class=\"attr\">_state</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// next方法实现</span></span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_state</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">_state</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">_state</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 实现迭代器协议</span></span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>有什么更真实的场景会使用到状态机呢？（TODO: 还需要更深入的学习了解）<br>游戏角色的状态（初始化，攻击，受伤，死亡等），中间可以加入其他不是这几个的动作或者事件。（状态可以自动保存在闭包中，不需要额外的状态管理代码）其他的需要手动维护状态，保存和恢复需要显示编写。</li>\n</ol>\n<h4 id=\"使用Generator的关键考虑因素\"><a href=\"#使用Generator的关键考虑因素\" class=\"headerlink\" title=\"使用Generator的关键考虑因素\"></a>使用Generator的关键考虑因素</h4><ol>\n<li>何时使用：</li>\n</ol>\n<ul>\n<li>需要延迟计算</li>\n<li>需要控制执行流程</li>\n<li>需要自定义迭代逻辑</li>\n<li>处理大量数据时需要分步处理</li>\n</ul>\n<ol start=\"2\">\n<li>何时不使用：</li>\n</ol>\n<ul>\n<li>简单的异步操作（用async&#x2F;await更合适）</li>\n<li>不需要暂停&#x2F;恢复的操作</li>\n<li>团队对Generator不熟悉的情况</li>\n</ul>\n<ol start=\"3\">\n<li>注意事项：</li>\n</ol>\n<ul>\n<li>Generator函数的错误处理需要特别注意</li>\n<li>需要考虑内存使用（特别是无限序列）</li>\n<li>调试可能比普通函数更复杂</li>\n</ul>\n<h4 id=\"4-Async-Await\"><a href=\"#4-Async-Await\" class=\"headerlink\" title=\"4. Async&#x2F;Await\"></a>4. Async&#x2F;Await</h4><p>优点：</p>\n<ul>\n<li>同步代码风格编写异步</li>\n<li>简洁直观，易于理解</li>\n<li>更好的错误处理机制</li>\n<li>支持try-catch捕获异常</li>\n<li>便于调试</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>可能导致性能问题（如果使用不当）</li>\n<li>无法处理取消操作</li>\n<li>await会阻塞后续代码执行</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>复杂的异步业务逻辑</li>\n<li>需要顺序执行的异步操作</li>\n<li>依赖前一个异步结果的操作</li>\n</ul>\n<h4 id=\"如何取消异步操作\"><a href=\"#如何取消异步操作\" class=\"headerlink\" title=\"如何取消异步操作\"></a>如何取消异步操作</h4><p>如果是fetch请求，优先使用AbortController<br>如果需要精细控制，考虑Generator<br>如果是复杂的异步流程，考虑RxJS<br>如果是简单场景，可以使用自定义Promise</p>\n"},{"title":"js闭包","date":"2018-02-07T08:09:41.000Z","_content":"\n### 计划内容\n- 经典问题for循环\n- 函数式编程、柯里化","source":"_posts/js闭包.md","raw":"---\ntitle: js闭包\ndate: 2018-02-07 16:09:41\ntags:\n- js\n- 闭包\ncategory: \n- javascript\n---\n\n### 计划内容\n- 经典问题for循环\n- 函数式编程、柯里化","slug":"js闭包","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmavx000ktkugbbt2g4rc","content":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>经典问题for循环</li>\n<li>函数式编程、柯里化</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计划内容\"><a href=\"#计划内容\" class=\"headerlink\" title=\"计划内容\"></a>计划内容</h3><ul>\n<li>经典问题for循环</li>\n<li>函数式编程、柯里化</li>\n</ul>\n"},{"title":"debug的各种姿势","date":"2018-02-07T09:03:45.000Z","_content":"\n- [ ] wireshark\n- [ ] pc端和移动端调试\n- [ ] node调试方法\n\n\n## wireshark\n\n### 过滤器使用：\n常用过滤语法：\n- ip.addr == 192.168.1.1    // 指定IP\n- tcp.port == 80            // 指定端口\n- http                      // HTTP协议\n- tcp.flags.syn == 1        // TCP SYN包\n- frame contains \"password\"  // 包含关键字\n\n### 抓包技巧\n定位问题：\n- 使用颜色标记重要数据包\n- 跟踪TCP流\n- 查看协议层级\n- 分析握手过程\n- 检查重传包\n\n### 调试场景\n- 网络连接问题\n- HTTP请求分析\n- WebSocket通信\n- DNS解析问题\n- SSL/TLS问题\n\n### 实用快捷键\n\n快捷操作：\n- Ctrl + E    // 开始/停止捕获\n- Ctrl + R    // 重新开始捕获\n- Ctrl + F    // 查找\n- Ctrl + .    // 转到下一个包\n- Ctrl + ,    // 转到上一个包\n\n\n### 调试建议\n- 先用过滤器缩小范围\n- 关注异常状态码\n- 检查响应时间\n- 分析错误包\n- 保存重要捕获\n\n\n## PC端和移动端调试\n\n### PC 端\n1. console \n2. 断点\n3. postman接口测试\n4. 性能分析（performance面板，memory面板）\n\n#### Performance面板\n录制步骤：\n1. 点击录制按钮（⚫）\n2. 进行页面操作\n3. 停止录制\n4. 分析火焰图：\n   - 红色：JavaScript执行\n   - 紫色：页面渲染\n   - 绿色：页面绘制\n   - 灰色：空闲时间\n\n#### Memory面板\nMemory面板三种分析方式：\n1. Heap Snapshot（堆快照）\n   - 拍摄快照\n   - 对比前后变化\n   - 查看内存占用\n\n2. Allocation Timeline（分配时间轴）\n   - 记录内存分配\n   - 查看对象生命周期\n   - 定位频繁GC\n\n3. Allocation Sampling（分配采样）\n   - JS堆分配\n   - 定位大对象\n  \n#### 常见性能问题\n排查要点：\n- 长任务阻塞\n- 频繁GC\n- DOM操作过多\n- 图片资源过大\n- 未释放的事件监听\n- 闭包导致的内存泄露\n\n#### 优化建议\n- 使用防抖节流\n- 虚拟列表\n- 图片懒加载\n- 合理使用缓存\n- 及时解绑事件\n- 避免闭包滥用\n- 代码分割\n- 资源压缩\n- CDN加速\n- 合理缓存\n\n### 移动端\n常用方法：\n- Chrome远程调试（Android）\n- Safari调试（iOS）\n- vConsole（移动端调试工具）\n- Eruda（移动端调试面板）\n- Charles/Fiddler（抓包）\n\nCharles/Fiddler 本地文件映射（https需要额外的配置）\n\n#### Charles配置\n本地文件映射步骤：\n1. Tools -> Map Local\n2. Add New Mapping\n3. 设置：\n   - 远程URL路径\n   - 本地文件路径\n   - 启用/禁用规则\n\n### Fiddler配置\nAutoResponder设置：\n1. 切换到AutoResponder标签\n2. Enable rules\n3. 添加规则：\n   - 匹配规则（正则/通配符）\n   - 选择本地文件\n   - 设置响应类型\n\n### 场景\n- 替换线上JS/CSS文件\n- 修改API响应数据\n- 测试不同版本\n- 调试线上问题\n- 模拟各种响应\n","source":"_posts/debug的各种姿势.md","raw":"---\ntitle: debug的各种姿势\ndate: 2018-02-07 17:03:45\ntags:\n- debug \ncategory: \n- debug\n---\n\n- [ ] wireshark\n- [ ] pc端和移动端调试\n- [ ] node调试方法\n\n\n## wireshark\n\n### 过滤器使用：\n常用过滤语法：\n- ip.addr == 192.168.1.1    // 指定IP\n- tcp.port == 80            // 指定端口\n- http                      // HTTP协议\n- tcp.flags.syn == 1        // TCP SYN包\n- frame contains \"password\"  // 包含关键字\n\n### 抓包技巧\n定位问题：\n- 使用颜色标记重要数据包\n- 跟踪TCP流\n- 查看协议层级\n- 分析握手过程\n- 检查重传包\n\n### 调试场景\n- 网络连接问题\n- HTTP请求分析\n- WebSocket通信\n- DNS解析问题\n- SSL/TLS问题\n\n### 实用快捷键\n\n快捷操作：\n- Ctrl + E    // 开始/停止捕获\n- Ctrl + R    // 重新开始捕获\n- Ctrl + F    // 查找\n- Ctrl + .    // 转到下一个包\n- Ctrl + ,    // 转到上一个包\n\n\n### 调试建议\n- 先用过滤器缩小范围\n- 关注异常状态码\n- 检查响应时间\n- 分析错误包\n- 保存重要捕获\n\n\n## PC端和移动端调试\n\n### PC 端\n1. console \n2. 断点\n3. postman接口测试\n4. 性能分析（performance面板，memory面板）\n\n#### Performance面板\n录制步骤：\n1. 点击录制按钮（⚫）\n2. 进行页面操作\n3. 停止录制\n4. 分析火焰图：\n   - 红色：JavaScript执行\n   - 紫色：页面渲染\n   - 绿色：页面绘制\n   - 灰色：空闲时间\n\n#### Memory面板\nMemory面板三种分析方式：\n1. Heap Snapshot（堆快照）\n   - 拍摄快照\n   - 对比前后变化\n   - 查看内存占用\n\n2. Allocation Timeline（分配时间轴）\n   - 记录内存分配\n   - 查看对象生命周期\n   - 定位频繁GC\n\n3. Allocation Sampling（分配采样）\n   - JS堆分配\n   - 定位大对象\n  \n#### 常见性能问题\n排查要点：\n- 长任务阻塞\n- 频繁GC\n- DOM操作过多\n- 图片资源过大\n- 未释放的事件监听\n- 闭包导致的内存泄露\n\n#### 优化建议\n- 使用防抖节流\n- 虚拟列表\n- 图片懒加载\n- 合理使用缓存\n- 及时解绑事件\n- 避免闭包滥用\n- 代码分割\n- 资源压缩\n- CDN加速\n- 合理缓存\n\n### 移动端\n常用方法：\n- Chrome远程调试（Android）\n- Safari调试（iOS）\n- vConsole（移动端调试工具）\n- Eruda（移动端调试面板）\n- Charles/Fiddler（抓包）\n\nCharles/Fiddler 本地文件映射（https需要额外的配置）\n\n#### Charles配置\n本地文件映射步骤：\n1. Tools -> Map Local\n2. Add New Mapping\n3. 设置：\n   - 远程URL路径\n   - 本地文件路径\n   - 启用/禁用规则\n\n### Fiddler配置\nAutoResponder设置：\n1. 切换到AutoResponder标签\n2. Enable rules\n3. 添加规则：\n   - 匹配规则（正则/通配符）\n   - 选择本地文件\n   - 设置响应类型\n\n### 场景\n- 替换线上JS/CSS文件\n- 修改API响应数据\n- 测试不同版本\n- 调试线上问题\n- 模拟各种响应\n","slug":"debug的各种姿势","published":1,"updated":"2025-01-14T07:05:02.244Z","_id":"cm5uhmavy000mtkug4g1uez1e","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><input disabled=\"\" type=\"checkbox\"> wireshark</li>\n<li><input disabled=\"\" type=\"checkbox\"> pc端和移动端调试</li>\n<li><input disabled=\"\" type=\"checkbox\"> node调试方法</li>\n</ul>\n<h2 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h2><h3 id=\"过滤器使用：\"><a href=\"#过滤器使用：\" class=\"headerlink\" title=\"过滤器使用：\"></a>过滤器使用：</h3><p>常用过滤语法：</p>\n<ul>\n<li>ip.addr &#x3D;&#x3D; 192.168.1.1    &#x2F;&#x2F; 指定IP</li>\n<li>tcp.port &#x3D;&#x3D; 80            &#x2F;&#x2F; 指定端口</li>\n<li>http                      &#x2F;&#x2F; HTTP协议</li>\n<li>tcp.flags.syn &#x3D;&#x3D; 1        &#x2F;&#x2F; TCP SYN包</li>\n<li>frame contains “password”  &#x2F;&#x2F; 包含关键字</li>\n</ul>\n<h3 id=\"抓包技巧\"><a href=\"#抓包技巧\" class=\"headerlink\" title=\"抓包技巧\"></a>抓包技巧</h3><p>定位问题：</p>\n<ul>\n<li>使用颜色标记重要数据包</li>\n<li>跟踪TCP流</li>\n<li>查看协议层级</li>\n<li>分析握手过程</li>\n<li>检查重传包</li>\n</ul>\n<h3 id=\"调试场景\"><a href=\"#调试场景\" class=\"headerlink\" title=\"调试场景\"></a>调试场景</h3><ul>\n<li>网络连接问题</li>\n<li>HTTP请求分析</li>\n<li>WebSocket通信</li>\n<li>DNS解析问题</li>\n<li>SSL&#x2F;TLS问题</li>\n</ul>\n<h3 id=\"实用快捷键\"><a href=\"#实用快捷键\" class=\"headerlink\" title=\"实用快捷键\"></a>实用快捷键</h3><p>快捷操作：</p>\n<ul>\n<li>Ctrl + E    &#x2F;&#x2F; 开始&#x2F;停止捕获</li>\n<li>Ctrl + R    &#x2F;&#x2F; 重新开始捕获</li>\n<li>Ctrl + F    &#x2F;&#x2F; 查找</li>\n<li>Ctrl + .    &#x2F;&#x2F; 转到下一个包</li>\n<li>Ctrl + ,    &#x2F;&#x2F; 转到上一个包</li>\n</ul>\n<h3 id=\"调试建议\"><a href=\"#调试建议\" class=\"headerlink\" title=\"调试建议\"></a>调试建议</h3><ul>\n<li>先用过滤器缩小范围</li>\n<li>关注异常状态码</li>\n<li>检查响应时间</li>\n<li>分析错误包</li>\n<li>保存重要捕获</li>\n</ul>\n<h2 id=\"PC端和移动端调试\"><a href=\"#PC端和移动端调试\" class=\"headerlink\" title=\"PC端和移动端调试\"></a>PC端和移动端调试</h2><h3 id=\"PC-端\"><a href=\"#PC-端\" class=\"headerlink\" title=\"PC 端\"></a>PC 端</h3><ol>\n<li>console </li>\n<li>断点</li>\n<li>postman接口测试</li>\n<li>性能分析（performance面板，memory面板）</li>\n</ol>\n<h4 id=\"Performance面板\"><a href=\"#Performance面板\" class=\"headerlink\" title=\"Performance面板\"></a>Performance面板</h4><p>录制步骤：</p>\n<ol>\n<li>点击录制按钮（⚫）</li>\n<li>进行页面操作</li>\n<li>停止录制</li>\n<li>分析火焰图：<ul>\n<li>红色：JavaScript执行</li>\n<li>紫色：页面渲染</li>\n<li>绿色：页面绘制</li>\n<li>灰色：空闲时间</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Memory面板\"><a href=\"#Memory面板\" class=\"headerlink\" title=\"Memory面板\"></a>Memory面板</h4><p>Memory面板三种分析方式：</p>\n<ol>\n<li><p>Heap Snapshot（堆快照）</p>\n<ul>\n<li>拍摄快照</li>\n<li>对比前后变化</li>\n<li>查看内存占用</li>\n</ul>\n</li>\n<li><p>Allocation Timeline（分配时间轴）</p>\n<ul>\n<li>记录内存分配</li>\n<li>查看对象生命周期</li>\n<li>定位频繁GC</li>\n</ul>\n</li>\n<li><p>Allocation Sampling（分配采样）</p>\n<ul>\n<li>JS堆分配</li>\n<li>定位大对象</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"常见性能问题\"><a href=\"#常见性能问题\" class=\"headerlink\" title=\"常见性能问题\"></a>常见性能问题</h4><p>排查要点：</p>\n<ul>\n<li>长任务阻塞</li>\n<li>频繁GC</li>\n<li>DOM操作过多</li>\n<li>图片资源过大</li>\n<li>未释放的事件监听</li>\n<li>闭包导致的内存泄露</li>\n</ul>\n<h4 id=\"优化建议\"><a href=\"#优化建议\" class=\"headerlink\" title=\"优化建议\"></a>优化建议</h4><ul>\n<li>使用防抖节流</li>\n<li>虚拟列表</li>\n<li>图片懒加载</li>\n<li>合理使用缓存</li>\n<li>及时解绑事件</li>\n<li>避免闭包滥用</li>\n<li>代码分割</li>\n<li>资源压缩</li>\n<li>CDN加速</li>\n<li>合理缓存</li>\n</ul>\n<h3 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h3><p>常用方法：</p>\n<ul>\n<li>Chrome远程调试（Android）</li>\n<li>Safari调试（iOS）</li>\n<li>vConsole（移动端调试工具）</li>\n<li>Eruda（移动端调试面板）</li>\n<li>Charles&#x2F;Fiddler（抓包）</li>\n</ul>\n<p>Charles&#x2F;Fiddler 本地文件映射（https需要额外的配置）</p>\n<h4 id=\"Charles配置\"><a href=\"#Charles配置\" class=\"headerlink\" title=\"Charles配置\"></a>Charles配置</h4><p>本地文件映射步骤：</p>\n<ol>\n<li>Tools -&gt; Map Local</li>\n<li>Add New Mapping</li>\n<li>设置：<ul>\n<li>远程URL路径</li>\n<li>本地文件路径</li>\n<li>启用&#x2F;禁用规则</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Fiddler配置\"><a href=\"#Fiddler配置\" class=\"headerlink\" title=\"Fiddler配置\"></a>Fiddler配置</h3><p>AutoResponder设置：</p>\n<ol>\n<li>切换到AutoResponder标签</li>\n<li>Enable rules</li>\n<li>添加规则：<ul>\n<li>匹配规则（正则&#x2F;通配符）</li>\n<li>选择本地文件</li>\n<li>设置响应类型</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><ul>\n<li>替换线上JS&#x2F;CSS文件</li>\n<li>修改API响应数据</li>\n<li>测试不同版本</li>\n<li>调试线上问题</li>\n<li>模拟各种响应</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><input disabled=\"\" type=\"checkbox\"> wireshark</li>\n<li><input disabled=\"\" type=\"checkbox\"> pc端和移动端调试</li>\n<li><input disabled=\"\" type=\"checkbox\"> node调试方法</li>\n</ul>\n<h2 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h2><h3 id=\"过滤器使用：\"><a href=\"#过滤器使用：\" class=\"headerlink\" title=\"过滤器使用：\"></a>过滤器使用：</h3><p>常用过滤语法：</p>\n<ul>\n<li>ip.addr &#x3D;&#x3D; 192.168.1.1    &#x2F;&#x2F; 指定IP</li>\n<li>tcp.port &#x3D;&#x3D; 80            &#x2F;&#x2F; 指定端口</li>\n<li>http                      &#x2F;&#x2F; HTTP协议</li>\n<li>tcp.flags.syn &#x3D;&#x3D; 1        &#x2F;&#x2F; TCP SYN包</li>\n<li>frame contains “password”  &#x2F;&#x2F; 包含关键字</li>\n</ul>\n<h3 id=\"抓包技巧\"><a href=\"#抓包技巧\" class=\"headerlink\" title=\"抓包技巧\"></a>抓包技巧</h3><p>定位问题：</p>\n<ul>\n<li>使用颜色标记重要数据包</li>\n<li>跟踪TCP流</li>\n<li>查看协议层级</li>\n<li>分析握手过程</li>\n<li>检查重传包</li>\n</ul>\n<h3 id=\"调试场景\"><a href=\"#调试场景\" class=\"headerlink\" title=\"调试场景\"></a>调试场景</h3><ul>\n<li>网络连接问题</li>\n<li>HTTP请求分析</li>\n<li>WebSocket通信</li>\n<li>DNS解析问题</li>\n<li>SSL&#x2F;TLS问题</li>\n</ul>\n<h3 id=\"实用快捷键\"><a href=\"#实用快捷键\" class=\"headerlink\" title=\"实用快捷键\"></a>实用快捷键</h3><p>快捷操作：</p>\n<ul>\n<li>Ctrl + E    &#x2F;&#x2F; 开始&#x2F;停止捕获</li>\n<li>Ctrl + R    &#x2F;&#x2F; 重新开始捕获</li>\n<li>Ctrl + F    &#x2F;&#x2F; 查找</li>\n<li>Ctrl + .    &#x2F;&#x2F; 转到下一个包</li>\n<li>Ctrl + ,    &#x2F;&#x2F; 转到上一个包</li>\n</ul>\n<h3 id=\"调试建议\"><a href=\"#调试建议\" class=\"headerlink\" title=\"调试建议\"></a>调试建议</h3><ul>\n<li>先用过滤器缩小范围</li>\n<li>关注异常状态码</li>\n<li>检查响应时间</li>\n<li>分析错误包</li>\n<li>保存重要捕获</li>\n</ul>\n<h2 id=\"PC端和移动端调试\"><a href=\"#PC端和移动端调试\" class=\"headerlink\" title=\"PC端和移动端调试\"></a>PC端和移动端调试</h2><h3 id=\"PC-端\"><a href=\"#PC-端\" class=\"headerlink\" title=\"PC 端\"></a>PC 端</h3><ol>\n<li>console </li>\n<li>断点</li>\n<li>postman接口测试</li>\n<li>性能分析（performance面板，memory面板）</li>\n</ol>\n<h4 id=\"Performance面板\"><a href=\"#Performance面板\" class=\"headerlink\" title=\"Performance面板\"></a>Performance面板</h4><p>录制步骤：</p>\n<ol>\n<li>点击录制按钮（⚫）</li>\n<li>进行页面操作</li>\n<li>停止录制</li>\n<li>分析火焰图：<ul>\n<li>红色：JavaScript执行</li>\n<li>紫色：页面渲染</li>\n<li>绿色：页面绘制</li>\n<li>灰色：空闲时间</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Memory面板\"><a href=\"#Memory面板\" class=\"headerlink\" title=\"Memory面板\"></a>Memory面板</h4><p>Memory面板三种分析方式：</p>\n<ol>\n<li><p>Heap Snapshot（堆快照）</p>\n<ul>\n<li>拍摄快照</li>\n<li>对比前后变化</li>\n<li>查看内存占用</li>\n</ul>\n</li>\n<li><p>Allocation Timeline（分配时间轴）</p>\n<ul>\n<li>记录内存分配</li>\n<li>查看对象生命周期</li>\n<li>定位频繁GC</li>\n</ul>\n</li>\n<li><p>Allocation Sampling（分配采样）</p>\n<ul>\n<li>JS堆分配</li>\n<li>定位大对象</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"常见性能问题\"><a href=\"#常见性能问题\" class=\"headerlink\" title=\"常见性能问题\"></a>常见性能问题</h4><p>排查要点：</p>\n<ul>\n<li>长任务阻塞</li>\n<li>频繁GC</li>\n<li>DOM操作过多</li>\n<li>图片资源过大</li>\n<li>未释放的事件监听</li>\n<li>闭包导致的内存泄露</li>\n</ul>\n<h4 id=\"优化建议\"><a href=\"#优化建议\" class=\"headerlink\" title=\"优化建议\"></a>优化建议</h4><ul>\n<li>使用防抖节流</li>\n<li>虚拟列表</li>\n<li>图片懒加载</li>\n<li>合理使用缓存</li>\n<li>及时解绑事件</li>\n<li>避免闭包滥用</li>\n<li>代码分割</li>\n<li>资源压缩</li>\n<li>CDN加速</li>\n<li>合理缓存</li>\n</ul>\n<h3 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h3><p>常用方法：</p>\n<ul>\n<li>Chrome远程调试（Android）</li>\n<li>Safari调试（iOS）</li>\n<li>vConsole（移动端调试工具）</li>\n<li>Eruda（移动端调试面板）</li>\n<li>Charles&#x2F;Fiddler（抓包）</li>\n</ul>\n<p>Charles&#x2F;Fiddler 本地文件映射（https需要额外的配置）</p>\n<h4 id=\"Charles配置\"><a href=\"#Charles配置\" class=\"headerlink\" title=\"Charles配置\"></a>Charles配置</h4><p>本地文件映射步骤：</p>\n<ol>\n<li>Tools -&gt; Map Local</li>\n<li>Add New Mapping</li>\n<li>设置：<ul>\n<li>远程URL路径</li>\n<li>本地文件路径</li>\n<li>启用&#x2F;禁用规则</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Fiddler配置\"><a href=\"#Fiddler配置\" class=\"headerlink\" title=\"Fiddler配置\"></a>Fiddler配置</h3><p>AutoResponder设置：</p>\n<ol>\n<li>切换到AutoResponder标签</li>\n<li>Enable rules</li>\n<li>添加规则：<ul>\n<li>匹配规则（正则&#x2F;通配符）</li>\n<li>选择本地文件</li>\n<li>设置响应类型</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><ul>\n<li>替换线上JS&#x2F;CSS文件</li>\n<li>修改API响应数据</li>\n<li>测试不同版本</li>\n<li>调试线上问题</li>\n<li>模拟各种响应</li>\n</ul>\n"},{"title":"webpack注意事项","date":"2018-02-07T07:40:59.000Z","_content":"\n### 计划写的内容\n- publicPath\n- outputPath\n- contentBase\n- webpack runtime code \n- 等\n\n### Webpack配置核心概念\n\n#### 1. 路径配置\n##### publicPath（公共路径）\n- 作用：指定资源的访问路径前缀\n- 配置位置：output.publicPath\n```javascript\n// webpack.config.js\nmodule.exports = {\n  output: {\n  publicPath: '/assets/', // 生产环境\n  // publicPath: '/', // 开发环境\n  // publicPath: 'https://cdn.example.com/' // CDN环境\n  }\n}\n```\n\n##### outputPath（输出路径）\n- 作用：指定打包文件的输出目录\n- 配置位置：output.path\n```javascript\n// webpack.config.js\nmodule.exports = {\n  output: {\n    path: path.resolve(__dirname, 'dist')\n  }\n}\n```\n\n##### contentBase（开发服务器静态资源目录）\n- 作用：配置开发服务器的静态资源访问\n- 配置位置：devServer.contentBase\n```javascript\nmodule.exports = {\n  devServer: {\n  contentBase: path.join(dirname, 'public'),\n  // 支持多个静态资源目录\n  contentBase: [\n      path.join(dirname, 'public'),\n      path.join(dirname, 'assets')\n    ]\n  }\n}\n```\n\n\n#### 2. Webpack Runtime Code\n##### 运行时代码\n- 作用：管理模块的加载和依赖关系\n- 优化方案:\n  - 使用SplitChunksPlugin\n  - 使用DllPlugin\n  - 使用externals\n  - 使用import()\n  - 使用require.ensure\n  - 使用require.include\n  - 使用require.ensure\n  - 使用require.include\n\n```javascript \nmodule.exports = {\n  optimization: {\n    // 提取运行时代码\n    runtimeChunk: {\n      name: 'runtime'\n    },\n    // 持久化缓存\n    moduleIds: 'deterministic',\n    chunkIds: 'deterministic'\n  }\n}\n```\n\n\n#### 3. 常见优化配置\n\n##### 1. 分包策略\n```javascript\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minSize: 20000,\n      minRemainingSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 30,\n      maxInitialRequests: 30,\n      automaticNameDelimiter: '~',\n      enforceSizeThreshold: 50000,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        }\n      }\n    }\n  }\n}\n```\n\n\n##### 2. 缓存优化\n```javascript\nmodule.exports = {\n  output: {\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js'\n  },\n  // 持久化缓存\n  cache: {\n    type: 'filesystem'\n  }\n}\n```\n\n##### 3. 开发体验优化\n```javascript\nmodule.exports = {\n  devServer: {\n    hot: true, // 热更新\n    open: true, // 自动打开浏览器\n    compress: true, // gzip压缩\n    proxy: { // 接口代理\n      '/api': {\n        target: 'http://localhost:3000',\n        pathRewrite: {'^/api': ''}\n      }\n    }\n  }\n}\n```\n\n\n#### 4. 常见问题解决\n\n##### 1. 路径问题\n- publicPath配置不当导致资源404\n- 开发环境和生产环境路径不一致\n- 静态资源访问路径错误\n\n##### 2. 缓存问题\n- 文件名hash不更新\n- 浏览器缓存未清除\n- 运行时代码频繁变化\n\n##### 3. 性能问题\n- 包体积过大\n- 首屏加载慢\n- 重复打包\n\n#### 5. 最佳实践\n\n1. **路径配置**\n- 开发环境使用相对路径\n- 生产环境根据部署策略配置\n- CDN路径配置时注意版本控制\n\n2. **缓存策略**\n- 合理使用contenthash\n- 提取运行时代码\n- 配置持久化缓存\n\n3. **开发优化**\n- 启用热更新\n- 配置合适的source-map\n- 使用webpack-bundle-analyzer分析包体积\n\n\n### Webpack运行原理及中间件实现\n\n#### 1. Webpack运行原理\n##### 基本流程\n```javascript\n// 简化版的webpack工作流程\nclass Webpack {\nconstructor(options) {\nthis.options = options;\nthis.hooks = {\n// 定义各个生命周期钩子\nrun: new SyncHook(),\nemit: new SyncHook(),\ndone: new SyncHook()\n};\n}\n```\n\n```javascript\nrun() {\n// 1. 读取入口文件\nconst entry = this.options.entry;\n// 2. 解析依赖\nconst dependencies = this.parse(entry);\n// 3. 转换代码\nconst transformedCode = this.transform(dependencies);\n// 4. 生成bundle\nthis.emit(transformedCode);\n}\n}\n```\n\n##### 中间件机制\n```javascript\n// Webpack中间件实现\nclass WebpackMiddleware {\nconstructor() {\nthis.middlewares = [];\n}\nuse(middleware) {\nthis.middlewares.push(middleware);\n}\nasync execute(context) {\n// 洋葱模型实现\nconst dispatch = async (i) => {\nif (i === this.middlewares.length) return;\nconst middleware = this.middlewares[i];\nawait middleware(context, () => dispatch(i + 1));\n};\nawait dispatch(0);\n}\n}\n```\n\n\n#### 2. 自定义Webpack中间件示例\n- 通过tapAsync或tap注册到具体的钩子上\n- 处理完成后调用callback()继续下一个中间件\n- 同步操作用tap\n- 回调式异步用tapAsync\n- Promise式异步用tapPromise\n```javascript\n// 1. 文件处理中间件\nfunction fileProcessMiddleware() {\nreturn async (context, next) => {\nconsole.log('开始处理文件');\n// 处理文件逻辑\nawait next();\nconsole.log('文件处理完成');\n};\n}\n// 使用中间件\nconst compiler = new WebpackMiddleware();\ncompiler.use(fileProcessMiddleware());\n```\n\n```javascript\n// 1. 标准的Webpack中间件写法\nclass MyMiddleware {\n    apply(compiler) {\n        // 在不同的钩子上注册处理函数\n        compiler.hooks.beforeCompile.tapAsync('MyMiddleware', (params, callback) => {\n            // 在这里处理beforeCompile阶段的逻辑\n            callback();\n        });\n\n        compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n            // 在这里处理emit阶段的逻辑\n            callback();\n        });\n    }\n}\n\n// 2. 使用中间件\nconst webpack = require('webpack');\nconst config = {\n    // webpack配置\n    plugins: [\n        new MyMiddleware()\n    ]\n};\n```\n\n```javascript\n// 1. Webpack插件标准写法（使用apply）\nclass WebpackPlugin {\n    apply(compiler) {\n        compiler.hooks.emit.tapAsync('MyPlugin', (compilation, callback) => {\n            // 处理逻辑\n            callback();\n        });\n    }\n}\n\n// 2. 函数式中间件写法\nconst webpackMiddleware = (compiler) => {\n    compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n        // 处理逻辑\n        callback();\n    });\n};\n\n// 3. 使用Generator的中间件写法\nfunction* webpackMiddleware(compiler) {\n    // 在不同阶段执行\n    yield new Promise((resolve) => {\n        compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n            // 处理逻辑\n            callback();\n            resolve();\n        });\n    });\n}\n\n// 4. 简单函数写法\nconst simpleMiddleware = (options) => (req, res, next) => {\n    // 处理逻辑\n    next();\n};\n```\n","source":"_posts/webpack注意事项.md","raw":"---\ntitle: webpack注意事项\ndate: 2018-02-07 15:40:59\ntags:\n- webpack\ncategory: \n- 自动化\n---\n\n### 计划写的内容\n- publicPath\n- outputPath\n- contentBase\n- webpack runtime code \n- 等\n\n### Webpack配置核心概念\n\n#### 1. 路径配置\n##### publicPath（公共路径）\n- 作用：指定资源的访问路径前缀\n- 配置位置：output.publicPath\n```javascript\n// webpack.config.js\nmodule.exports = {\n  output: {\n  publicPath: '/assets/', // 生产环境\n  // publicPath: '/', // 开发环境\n  // publicPath: 'https://cdn.example.com/' // CDN环境\n  }\n}\n```\n\n##### outputPath（输出路径）\n- 作用：指定打包文件的输出目录\n- 配置位置：output.path\n```javascript\n// webpack.config.js\nmodule.exports = {\n  output: {\n    path: path.resolve(__dirname, 'dist')\n  }\n}\n```\n\n##### contentBase（开发服务器静态资源目录）\n- 作用：配置开发服务器的静态资源访问\n- 配置位置：devServer.contentBase\n```javascript\nmodule.exports = {\n  devServer: {\n  contentBase: path.join(dirname, 'public'),\n  // 支持多个静态资源目录\n  contentBase: [\n      path.join(dirname, 'public'),\n      path.join(dirname, 'assets')\n    ]\n  }\n}\n```\n\n\n#### 2. Webpack Runtime Code\n##### 运行时代码\n- 作用：管理模块的加载和依赖关系\n- 优化方案:\n  - 使用SplitChunksPlugin\n  - 使用DllPlugin\n  - 使用externals\n  - 使用import()\n  - 使用require.ensure\n  - 使用require.include\n  - 使用require.ensure\n  - 使用require.include\n\n```javascript \nmodule.exports = {\n  optimization: {\n    // 提取运行时代码\n    runtimeChunk: {\n      name: 'runtime'\n    },\n    // 持久化缓存\n    moduleIds: 'deterministic',\n    chunkIds: 'deterministic'\n  }\n}\n```\n\n\n#### 3. 常见优化配置\n\n##### 1. 分包策略\n```javascript\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minSize: 20000,\n      minRemainingSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 30,\n      maxInitialRequests: 30,\n      automaticNameDelimiter: '~',\n      enforceSizeThreshold: 50000,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        }\n      }\n    }\n  }\n}\n```\n\n\n##### 2. 缓存优化\n```javascript\nmodule.exports = {\n  output: {\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js'\n  },\n  // 持久化缓存\n  cache: {\n    type: 'filesystem'\n  }\n}\n```\n\n##### 3. 开发体验优化\n```javascript\nmodule.exports = {\n  devServer: {\n    hot: true, // 热更新\n    open: true, // 自动打开浏览器\n    compress: true, // gzip压缩\n    proxy: { // 接口代理\n      '/api': {\n        target: 'http://localhost:3000',\n        pathRewrite: {'^/api': ''}\n      }\n    }\n  }\n}\n```\n\n\n#### 4. 常见问题解决\n\n##### 1. 路径问题\n- publicPath配置不当导致资源404\n- 开发环境和生产环境路径不一致\n- 静态资源访问路径错误\n\n##### 2. 缓存问题\n- 文件名hash不更新\n- 浏览器缓存未清除\n- 运行时代码频繁变化\n\n##### 3. 性能问题\n- 包体积过大\n- 首屏加载慢\n- 重复打包\n\n#### 5. 最佳实践\n\n1. **路径配置**\n- 开发环境使用相对路径\n- 生产环境根据部署策略配置\n- CDN路径配置时注意版本控制\n\n2. **缓存策略**\n- 合理使用contenthash\n- 提取运行时代码\n- 配置持久化缓存\n\n3. **开发优化**\n- 启用热更新\n- 配置合适的source-map\n- 使用webpack-bundle-analyzer分析包体积\n\n\n### Webpack运行原理及中间件实现\n\n#### 1. Webpack运行原理\n##### 基本流程\n```javascript\n// 简化版的webpack工作流程\nclass Webpack {\nconstructor(options) {\nthis.options = options;\nthis.hooks = {\n// 定义各个生命周期钩子\nrun: new SyncHook(),\nemit: new SyncHook(),\ndone: new SyncHook()\n};\n}\n```\n\n```javascript\nrun() {\n// 1. 读取入口文件\nconst entry = this.options.entry;\n// 2. 解析依赖\nconst dependencies = this.parse(entry);\n// 3. 转换代码\nconst transformedCode = this.transform(dependencies);\n// 4. 生成bundle\nthis.emit(transformedCode);\n}\n}\n```\n\n##### 中间件机制\n```javascript\n// Webpack中间件实现\nclass WebpackMiddleware {\nconstructor() {\nthis.middlewares = [];\n}\nuse(middleware) {\nthis.middlewares.push(middleware);\n}\nasync execute(context) {\n// 洋葱模型实现\nconst dispatch = async (i) => {\nif (i === this.middlewares.length) return;\nconst middleware = this.middlewares[i];\nawait middleware(context, () => dispatch(i + 1));\n};\nawait dispatch(0);\n}\n}\n```\n\n\n#### 2. 自定义Webpack中间件示例\n- 通过tapAsync或tap注册到具体的钩子上\n- 处理完成后调用callback()继续下一个中间件\n- 同步操作用tap\n- 回调式异步用tapAsync\n- Promise式异步用tapPromise\n```javascript\n// 1. 文件处理中间件\nfunction fileProcessMiddleware() {\nreturn async (context, next) => {\nconsole.log('开始处理文件');\n// 处理文件逻辑\nawait next();\nconsole.log('文件处理完成');\n};\n}\n// 使用中间件\nconst compiler = new WebpackMiddleware();\ncompiler.use(fileProcessMiddleware());\n```\n\n```javascript\n// 1. 标准的Webpack中间件写法\nclass MyMiddleware {\n    apply(compiler) {\n        // 在不同的钩子上注册处理函数\n        compiler.hooks.beforeCompile.tapAsync('MyMiddleware', (params, callback) => {\n            // 在这里处理beforeCompile阶段的逻辑\n            callback();\n        });\n\n        compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n            // 在这里处理emit阶段的逻辑\n            callback();\n        });\n    }\n}\n\n// 2. 使用中间件\nconst webpack = require('webpack');\nconst config = {\n    // webpack配置\n    plugins: [\n        new MyMiddleware()\n    ]\n};\n```\n\n```javascript\n// 1. Webpack插件标准写法（使用apply）\nclass WebpackPlugin {\n    apply(compiler) {\n        compiler.hooks.emit.tapAsync('MyPlugin', (compilation, callback) => {\n            // 处理逻辑\n            callback();\n        });\n    }\n}\n\n// 2. 函数式中间件写法\nconst webpackMiddleware = (compiler) => {\n    compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n        // 处理逻辑\n        callback();\n    });\n};\n\n// 3. 使用Generator的中间件写法\nfunction* webpackMiddleware(compiler) {\n    // 在不同阶段执行\n    yield new Promise((resolve) => {\n        compiler.hooks.emit.tapAsync('MyMiddleware', (compilation, callback) => {\n            // 处理逻辑\n            callback();\n            resolve();\n        });\n    });\n}\n\n// 4. 简单函数写法\nconst simpleMiddleware = (options) => (req, res, next) => {\n    // 处理逻辑\n    next();\n};\n```\n","slug":"webpack注意事项","published":1,"updated":"2025-01-20T09:13:32.270Z","_id":"cm5uhmavz000qtkuga0rd3qy7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"计划写的内容\"><a href=\"#计划写的内容\" class=\"headerlink\" title=\"计划写的内容\"></a>计划写的内容</h3><ul>\n<li>publicPath</li>\n<li>outputPath</li>\n<li>contentBase</li>\n<li>webpack runtime code </li>\n<li>等</li>\n</ul>\n<h3 id=\"Webpack配置核心概念\"><a href=\"#Webpack配置核心概念\" class=\"headerlink\" title=\"Webpack配置核心概念\"></a>Webpack配置核心概念</h3><h4 id=\"1-路径配置\"><a href=\"#1-路径配置\" class=\"headerlink\" title=\"1. 路径配置\"></a>1. 路径配置</h4><h5 id=\"publicPath（公共路径）\"><a href=\"#publicPath（公共路径）\" class=\"headerlink\" title=\"publicPath（公共路径）\"></a>publicPath（公共路径）</h5><ul>\n<li>作用：指定资源的访问路径前缀</li>\n<li>配置位置：output.publicPath<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/assets/&#x27;</span>, <span class=\"comment\">// 生产环境</span></span><br><span class=\"line\">  <span class=\"comment\">// publicPath: &#x27;/&#x27;, // 开发环境</span></span><br><span class=\"line\">  <span class=\"comment\">// publicPath: &#x27;https://cdn.example.com/&#x27; // CDN环境</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"outputPath（输出路径）\"><a href=\"#outputPath（输出路径）\" class=\"headerlink\" title=\"outputPath（输出路径）\"></a>outputPath（输出路径）</h5><ul>\n<li>作用：指定打包文件的输出目录</li>\n<li>配置位置：output.path<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"contentBase（开发服务器静态资源目录）\"><a href=\"#contentBase（开发服务器静态资源目录）\" class=\"headerlink\" title=\"contentBase（开发服务器静态资源目录）\"></a>contentBase（开发服务器静态资源目录）</h5><ul>\n<li>作用：配置开发服务器的静态资源访问</li>\n<li>配置位置：devServer.contentBase<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">contentBase</span>: path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;public&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 支持多个静态资源目录</span></span><br><span class=\"line\">  <span class=\"attr\">contentBase</span>: [</span><br><span class=\"line\">      path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;public&#x27;</span>),</span><br><span class=\"line\">      path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;assets&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-Webpack-Runtime-Code\"><a href=\"#2-Webpack-Runtime-Code\" class=\"headerlink\" title=\"2. Webpack Runtime Code\"></a>2. Webpack Runtime Code</h4><h5 id=\"运行时代码\"><a href=\"#运行时代码\" class=\"headerlink\" title=\"运行时代码\"></a>运行时代码</h5><ul>\n<li>作用：管理模块的加载和依赖关系</li>\n<li>优化方案:<ul>\n<li>使用SplitChunksPlugin</li>\n<li>使用DllPlugin</li>\n<li>使用externals</li>\n<li>使用import()</li>\n<li>使用require.ensure</li>\n<li>使用require.include</li>\n<li>使用require.ensure</li>\n<li>使用require.include</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取运行时代码</span></span><br><span class=\"line\">    <span class=\"attr\">runtimeChunk</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;runtime&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 持久化缓存</span></span><br><span class=\"line\">    <span class=\"attr\">moduleIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-常见优化配置\"><a href=\"#3-常见优化配置\" class=\"headerlink\" title=\"3. 常见优化配置\"></a>3. 常见优化配置</h4><h5 id=\"1-分包策略\"><a href=\"#1-分包策略\" class=\"headerlink\" title=\"1. 分包策略\"></a>1. 分包策略</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">      <span class=\"attr\">minRemainingSize</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">automaticNameDelimiter</span>: <span class=\"string\">&#x27;~&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">enforceSizeThreshold</span>: <span class=\"number\">50000</span>,</span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          <span class=\"attr\">priority</span>: -<span class=\"number\">10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-缓存优化\"><a href=\"#2-缓存优化\" class=\"headerlink\" title=\"2. 缓存优化\"></a>2. 缓存优化</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].[contenthash].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name].[contenthash].chunk.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 持久化缓存</span></span><br><span class=\"line\">  <span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;filesystem&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-开发体验优化\"><a href=\"#3-开发体验优化\" class=\"headerlink\" title=\"3. 开发体验优化\"></a>3. 开发体验优化</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// gzip压缩</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123; <span class=\"comment\">// 接口代理</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-常见问题解决\"><a href=\"#4-常见问题解决\" class=\"headerlink\" title=\"4. 常见问题解决\"></a>4. 常见问题解决</h4><h5 id=\"1-路径问题\"><a href=\"#1-路径问题\" class=\"headerlink\" title=\"1. 路径问题\"></a>1. 路径问题</h5><ul>\n<li>publicPath配置不当导致资源404</li>\n<li>开发环境和生产环境路径不一致</li>\n<li>静态资源访问路径错误</li>\n</ul>\n<h5 id=\"2-缓存问题\"><a href=\"#2-缓存问题\" class=\"headerlink\" title=\"2. 缓存问题\"></a>2. 缓存问题</h5><ul>\n<li>文件名hash不更新</li>\n<li>浏览器缓存未清除</li>\n<li>运行时代码频繁变化</li>\n</ul>\n<h5 id=\"3-性能问题\"><a href=\"#3-性能问题\" class=\"headerlink\" title=\"3. 性能问题\"></a>3. 性能问题</h5><ul>\n<li>包体积过大</li>\n<li>首屏加载慢</li>\n<li>重复打包</li>\n</ul>\n<h4 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a>5. 最佳实践</h4><ol>\n<li><strong>路径配置</strong></li>\n</ol>\n<ul>\n<li>开发环境使用相对路径</li>\n<li>生产环境根据部署策略配置</li>\n<li>CDN路径配置时注意版本控制</li>\n</ul>\n<ol start=\"2\">\n<li><strong>缓存策略</strong></li>\n</ol>\n<ul>\n<li>合理使用contenthash</li>\n<li>提取运行时代码</li>\n<li>配置持久化缓存</li>\n</ul>\n<ol start=\"3\">\n<li><strong>开发优化</strong></li>\n</ol>\n<ul>\n<li>启用热更新</li>\n<li>配置合适的source-map</li>\n<li>使用webpack-bundle-analyzer分析包体积</li>\n</ul>\n<h3 id=\"Webpack运行原理及中间件实现\"><a href=\"#Webpack运行原理及中间件实现\" class=\"headerlink\" title=\"Webpack运行原理及中间件实现\"></a>Webpack运行原理及中间件实现</h3><h4 id=\"1-Webpack运行原理\"><a href=\"#1-Webpack运行原理\" class=\"headerlink\" title=\"1. Webpack运行原理\"></a>1. Webpack运行原理</h4><h5 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简化版的webpack工作流程</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Webpack</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">// 定义各个生命周期钩子</span></span><br><span class=\"line\"><span class=\"attr\">run</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>(),</span><br><span class=\"line\"><span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>(),</span><br><span class=\"line\"><span class=\"attr\">done</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 读取入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> entry = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">entry</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2. 解析依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dependencies = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parse</span>(entry);</span><br><span class=\"line\"><span class=\"comment\">// 3. 转换代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformedCode = <span class=\"variable language_\">this</span>.<span class=\"title function_\">transform</span>(dependencies);</span><br><span class=\"line\"><span class=\"comment\">// 4. 生成bundle</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">emit</span>(transformedCode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"中间件机制\"><a href=\"#中间件机制\" class=\"headerlink\" title=\"中间件机制\"></a>中间件机制</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Webpack中间件实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WebpackMiddleware</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">use</span>(<span class=\"params\">middleware</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"title function_\">push</span>(middleware);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">execute</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 洋葱模型实现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dispatch</span> = <span class=\"keyword\">async</span> (<span class=\"params\">i</span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i === <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware = <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>[i];</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">middleware</span>(context, <span class=\"function\">() =&gt;</span> <span class=\"title function_\">dispatch</span>(i + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">dispatch</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-自定义Webpack中间件示例\"><a href=\"#2-自定义Webpack中间件示例\" class=\"headerlink\" title=\"2. 自定义Webpack中间件示例\"></a>2. 自定义Webpack中间件示例</h4><ul>\n<li>通过tapAsync或tap注册到具体的钩子上</li>\n<li>处理完成后调用callback()继续下一个中间件</li>\n<li>同步操作用tap</li>\n<li>回调式异步用tapAsync</li>\n<li>Promise式异步用tapPromise<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 文件处理中间件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fileProcessMiddleware</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (context, next) =&gt; &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始处理文件&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 处理文件逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">next</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;文件处理完成&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用中间件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">WebpackMiddleware</span>();</span><br><span class=\"line\">compiler.<span class=\"title function_\">use</span>(<span class=\"title function_\">fileProcessMiddleware</span>());</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 标准的Webpack中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMiddleware</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在不同的钩子上注册处理函数</span></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">beforeCompile</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">params, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里处理beforeCompile阶段的逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里处理emit阶段的逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 使用中间件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyMiddleware</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Webpack插件标准写法（使用apply）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WebpackPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 函数式中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">webpackMiddleware</span> = (<span class=\"params\">compiler</span>) =&gt; &#123;</span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">        <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 使用Generator的中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">webpackMiddleware</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在不同阶段执行</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 简单函数写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">simpleMiddleware</span> = (<span class=\"params\">options</span>) =&gt; <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计划写的内容\"><a href=\"#计划写的内容\" class=\"headerlink\" title=\"计划写的内容\"></a>计划写的内容</h3><ul>\n<li>publicPath</li>\n<li>outputPath</li>\n<li>contentBase</li>\n<li>webpack runtime code </li>\n<li>等</li>\n</ul>\n<h3 id=\"Webpack配置核心概念\"><a href=\"#Webpack配置核心概念\" class=\"headerlink\" title=\"Webpack配置核心概念\"></a>Webpack配置核心概念</h3><h4 id=\"1-路径配置\"><a href=\"#1-路径配置\" class=\"headerlink\" title=\"1. 路径配置\"></a>1. 路径配置</h4><h5 id=\"publicPath（公共路径）\"><a href=\"#publicPath（公共路径）\" class=\"headerlink\" title=\"publicPath（公共路径）\"></a>publicPath（公共路径）</h5><ul>\n<li>作用：指定资源的访问路径前缀</li>\n<li>配置位置：output.publicPath<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/assets/&#x27;</span>, <span class=\"comment\">// 生产环境</span></span><br><span class=\"line\">  <span class=\"comment\">// publicPath: &#x27;/&#x27;, // 开发环境</span></span><br><span class=\"line\">  <span class=\"comment\">// publicPath: &#x27;https://cdn.example.com/&#x27; // CDN环境</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"outputPath（输出路径）\"><a href=\"#outputPath（输出路径）\" class=\"headerlink\" title=\"outputPath（输出路径）\"></a>outputPath（输出路径）</h5><ul>\n<li>作用：指定打包文件的输出目录</li>\n<li>配置位置：output.path<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"contentBase（开发服务器静态资源目录）\"><a href=\"#contentBase（开发服务器静态资源目录）\" class=\"headerlink\" title=\"contentBase（开发服务器静态资源目录）\"></a>contentBase（开发服务器静态资源目录）</h5><ul>\n<li>作用：配置开发服务器的静态资源访问</li>\n<li>配置位置：devServer.contentBase<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">contentBase</span>: path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;public&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 支持多个静态资源目录</span></span><br><span class=\"line\">  <span class=\"attr\">contentBase</span>: [</span><br><span class=\"line\">      path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;public&#x27;</span>),</span><br><span class=\"line\">      path.<span class=\"title function_\">join</span>(dirname, <span class=\"string\">&#x27;assets&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-Webpack-Runtime-Code\"><a href=\"#2-Webpack-Runtime-Code\" class=\"headerlink\" title=\"2. Webpack Runtime Code\"></a>2. Webpack Runtime Code</h4><h5 id=\"运行时代码\"><a href=\"#运行时代码\" class=\"headerlink\" title=\"运行时代码\"></a>运行时代码</h5><ul>\n<li>作用：管理模块的加载和依赖关系</li>\n<li>优化方案:<ul>\n<li>使用SplitChunksPlugin</li>\n<li>使用DllPlugin</li>\n<li>使用externals</li>\n<li>使用import()</li>\n<li>使用require.ensure</li>\n<li>使用require.include</li>\n<li>使用require.ensure</li>\n<li>使用require.include</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取运行时代码</span></span><br><span class=\"line\">    <span class=\"attr\">runtimeChunk</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;runtime&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 持久化缓存</span></span><br><span class=\"line\">    <span class=\"attr\">moduleIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkIds</span>: <span class=\"string\">&#x27;deterministic&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-常见优化配置\"><a href=\"#3-常见优化配置\" class=\"headerlink\" title=\"3. 常见优化配置\"></a>3. 常见优化配置</h4><h5 id=\"1-分包策略\"><a href=\"#1-分包策略\" class=\"headerlink\" title=\"1. 分包策略\"></a>1. 分包策略</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">      <span class=\"attr\">minRemainingSize</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">automaticNameDelimiter</span>: <span class=\"string\">&#x27;~&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">enforceSizeThreshold</span>: <span class=\"number\">50000</span>,</span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          <span class=\"attr\">priority</span>: -<span class=\"number\">10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-缓存优化\"><a href=\"#2-缓存优化\" class=\"headerlink\" title=\"2. 缓存优化\"></a>2. 缓存优化</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].[contenthash].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name].[contenthash].chunk.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 持久化缓存</span></span><br><span class=\"line\">  <span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;filesystem&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-开发体验优化\"><a href=\"#3-开发体验优化\" class=\"headerlink\" title=\"3. 开发体验优化\"></a>3. 开发体验优化</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// gzip压缩</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123; <span class=\"comment\">// 接口代理</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-常见问题解决\"><a href=\"#4-常见问题解决\" class=\"headerlink\" title=\"4. 常见问题解决\"></a>4. 常见问题解决</h4><h5 id=\"1-路径问题\"><a href=\"#1-路径问题\" class=\"headerlink\" title=\"1. 路径问题\"></a>1. 路径问题</h5><ul>\n<li>publicPath配置不当导致资源404</li>\n<li>开发环境和生产环境路径不一致</li>\n<li>静态资源访问路径错误</li>\n</ul>\n<h5 id=\"2-缓存问题\"><a href=\"#2-缓存问题\" class=\"headerlink\" title=\"2. 缓存问题\"></a>2. 缓存问题</h5><ul>\n<li>文件名hash不更新</li>\n<li>浏览器缓存未清除</li>\n<li>运行时代码频繁变化</li>\n</ul>\n<h5 id=\"3-性能问题\"><a href=\"#3-性能问题\" class=\"headerlink\" title=\"3. 性能问题\"></a>3. 性能问题</h5><ul>\n<li>包体积过大</li>\n<li>首屏加载慢</li>\n<li>重复打包</li>\n</ul>\n<h4 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a>5. 最佳实践</h4><ol>\n<li><strong>路径配置</strong></li>\n</ol>\n<ul>\n<li>开发环境使用相对路径</li>\n<li>生产环境根据部署策略配置</li>\n<li>CDN路径配置时注意版本控制</li>\n</ul>\n<ol start=\"2\">\n<li><strong>缓存策略</strong></li>\n</ol>\n<ul>\n<li>合理使用contenthash</li>\n<li>提取运行时代码</li>\n<li>配置持久化缓存</li>\n</ul>\n<ol start=\"3\">\n<li><strong>开发优化</strong></li>\n</ol>\n<ul>\n<li>启用热更新</li>\n<li>配置合适的source-map</li>\n<li>使用webpack-bundle-analyzer分析包体积</li>\n</ul>\n<h3 id=\"Webpack运行原理及中间件实现\"><a href=\"#Webpack运行原理及中间件实现\" class=\"headerlink\" title=\"Webpack运行原理及中间件实现\"></a>Webpack运行原理及中间件实现</h3><h4 id=\"1-Webpack运行原理\"><a href=\"#1-Webpack运行原理\" class=\"headerlink\" title=\"1. Webpack运行原理\"></a>1. Webpack运行原理</h4><h5 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简化版的webpack工作流程</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Webpack</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">// 定义各个生命周期钩子</span></span><br><span class=\"line\"><span class=\"attr\">run</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>(),</span><br><span class=\"line\"><span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>(),</span><br><span class=\"line\"><span class=\"attr\">done</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 读取入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> entry = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">entry</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2. 解析依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dependencies = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parse</span>(entry);</span><br><span class=\"line\"><span class=\"comment\">// 3. 转换代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformedCode = <span class=\"variable language_\">this</span>.<span class=\"title function_\">transform</span>(dependencies);</span><br><span class=\"line\"><span class=\"comment\">// 4. 生成bundle</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">emit</span>(transformedCode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"中间件机制\"><a href=\"#中间件机制\" class=\"headerlink\" title=\"中间件机制\"></a>中间件机制</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Webpack中间件实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WebpackMiddleware</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">use</span>(<span class=\"params\">middleware</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"title function_\">push</span>(middleware);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">execute</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 洋葱模型实现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dispatch</span> = <span class=\"keyword\">async</span> (<span class=\"params\">i</span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i === <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware = <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>[i];</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">middleware</span>(context, <span class=\"function\">() =&gt;</span> <span class=\"title function_\">dispatch</span>(i + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">dispatch</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-自定义Webpack中间件示例\"><a href=\"#2-自定义Webpack中间件示例\" class=\"headerlink\" title=\"2. 自定义Webpack中间件示例\"></a>2. 自定义Webpack中间件示例</h4><ul>\n<li>通过tapAsync或tap注册到具体的钩子上</li>\n<li>处理完成后调用callback()继续下一个中间件</li>\n<li>同步操作用tap</li>\n<li>回调式异步用tapAsync</li>\n<li>Promise式异步用tapPromise<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 文件处理中间件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fileProcessMiddleware</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (context, next) =&gt; &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始处理文件&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 处理文件逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">next</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;文件处理完成&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用中间件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> <span class=\"title class_\">WebpackMiddleware</span>();</span><br><span class=\"line\">compiler.<span class=\"title function_\">use</span>(<span class=\"title function_\">fileProcessMiddleware</span>());</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 标准的Webpack中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMiddleware</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在不同的钩子上注册处理函数</span></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">beforeCompile</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">params, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里处理beforeCompile阶段的逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里处理emit阶段的逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 使用中间件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyMiddleware</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Webpack插件标准写法（使用apply）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WebpackPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 函数式中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">webpackMiddleware</span> = (<span class=\"params\">compiler</span>) =&gt; &#123;</span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">        <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 使用Generator的中间件写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">webpackMiddleware</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在不同阶段执行</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;MyMiddleware&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 简单函数写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">simpleMiddleware</span> = (<span class=\"params\">options</span>) =&gt; <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"图片格式的区别","date":"2018-02-07T07:04:34.000Z","_content":"\n- png（还分几位)\n- jpg\n- jpeg\n- gif\n\n","source":"_posts/图片格式的区别.md","raw":"---\ntitle: 图片格式的区别\ndate: 2018-02-07 15:04:34\ntags:\n- 图片\ncategory: \n- 科普\n---\n\n- png（还分几位)\n- jpg\n- jpeg\n- gif\n\n","slug":"图片格式的区别","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaw0000stkughh4wby0p","content":"<ul>\n<li>png（还分几位)</li>\n<li>jpg</li>\n<li>jpeg</li>\n<li>gif</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>png（还分几位)</li>\n<li>jpg</li>\n<li>jpeg</li>\n<li>gif</li>\n</ul>\n"},{"title":"web常见的安全问题","date":"2018-02-07T07:38:28.000Z","_content":"\n- xss\n- csrf\n- 等\n- 解决方法\n\n### Web安全问题及防范\n\n#### 1. XSS（跨站脚本攻击）\n##### 原理\n- 攻击者将恶意脚本注入到网页中\n- 当用户访问页面时，恶意脚本被执行\n- 可能窃取用户信息、篡改页面内容等\n\n##### 类型\n1. **存储型XSS**\n- 恶意脚本存储在服务器端\n- 用户提交数据时，恶意脚本被存储\n- 其他用户访问页面时，恶意脚本被执行\n```javascript\n// 例如：用户评论中包含恶意脚本\nconst comment = '<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\n```\n\n2. **反射型XSS**\n```javascript\n// 例如：用户点击恶意链接，恶意脚本被反射到页面\nconst url = 'https://example.com?comment=<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\n```\n\n\n3. **DOM型XSS**\n```javascript\n// 例如：用户输入恶意脚本，直接在DOM中执行\nconst input = '<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\ndocument.getElementById('input').value = input;\n```\n\n\n##### 防范措施\n1. 输入过滤\n```javascript\n// 过滤特殊字符，如<、>、script等\nconst input = input.replace(/<|>/g, '');\n```\n\n2. 输出编码\n```javascript\n// 将用户输入的数据进行编码，如HTML实体编码\nconst comment = comment.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n```\n\n3. 使用CSP（内容安全策略）\n```javascript\n// 限制允许执行的脚本类型\nconst cspHeader = \"Content-Security-Policy: script-src 'self' 'unsafe-inline' https://apis.example.com\";\n```\n\n\n#### 2. CSRF（跨站请求伪造）\n##### 原理\n- 攻击者诱导用户访问恶意网站\n- 利用用户已登录的身份发起请求\n- 在用户不知情的情况下执行操作\n\n##### 攻击示例\n```javascript \n<!-- 恶意网站中的图片 -->\n<img src=\"http://bank.example.com/transfer?amount=1000&to=attacker\" />\n```\n\n\n##### 防范措施\n1. CSRF Token\n```javascript   \n// 服务端生成token\nconst csrfToken = generateToken();\n// 在表单中包含token\n<input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n``` \n2. Same-Site Cookie\n```javascript\n// 设置Cookie\nSet-Cookie: sessionId=abc123; SameSite=Strict\n```\n\n\n#### 3. SQL注入\n##### 原理\n- 将SQL命令插入到输入字段中\n- 破坏原有SQL语句结构\n- 执行恶意SQL命令\n\n##### 攻击示例\n```sql\nsql\n-- 原始查询\nSELECT FROM users WHERE username = 'input' AND password = 'password'\n-- 注入后\nSELECT FROM users WHERE username = 'admin'--' AND password = 'anything'\n```\n\n\n#### 4. 其他安全问题\n\n##### 1. 点击劫持\n防范：\n```javascript\n// 设置X-Frame-Options\nresponse.setHeader('X-Frame-Options', 'DENY');\n```\n\n\n##### 2. 中间人攻击\n防范：\n- 使用HTTPS\n- 证书校验\n- HSTS策略\n\n##### 3. 文件上传漏洞\n防范：\n\n```javascript\n// 限制文件类型和大小\nconst allowedTypes = ['image/jpeg', 'image/png'];\nconst maxSize = 1024 * 1024; // 1MB\n```\n\n#### 5. 安全最佳实践\n\n1. **通用防护措施**\n- 及时更新依赖包\n- 使用安全的框架\n- 开启安全相关的HTTP头部\n\n```javascript\n// 常用安全头部\napp.use(helmet()); // 使用helmet中间件\n```\n\n\n2. **身份认证**\n- 使用强密码策略\n- 实现登录失败次数限制\n- 双因素认证\n\n3. **数据保护**\n- 敏感数据加密存储\n- 使用HTTPS传输\n- 实现适当的访问控制\n\n4. **日志监控**\n- 记录所有安全事件\n- 定期审计日志\n- 实现实时监控和报警\n","source":"_posts/web常见的安全问题.md","raw":"---\ntitle: web常见的安全问题\ndate: 2018-02-07 15:38:28\ntags:\n- web安全\ncategory: \n- web安全\n---\n\n- xss\n- csrf\n- 等\n- 解决方法\n\n### Web安全问题及防范\n\n#### 1. XSS（跨站脚本攻击）\n##### 原理\n- 攻击者将恶意脚本注入到网页中\n- 当用户访问页面时，恶意脚本被执行\n- 可能窃取用户信息、篡改页面内容等\n\n##### 类型\n1. **存储型XSS**\n- 恶意脚本存储在服务器端\n- 用户提交数据时，恶意脚本被存储\n- 其他用户访问页面时，恶意脚本被执行\n```javascript\n// 例如：用户评论中包含恶意脚本\nconst comment = '<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\n```\n\n2. **反射型XSS**\n```javascript\n// 例如：用户点击恶意链接，恶意脚本被反射到页面\nconst url = 'https://example.com?comment=<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\n```\n\n\n3. **DOM型XSS**\n```javascript\n// 例如：用户输入恶意脚本，直接在DOM中执行\nconst input = '<script>alert(\"已窃取cookie:\" + document.cookie)</script>';\ndocument.getElementById('input').value = input;\n```\n\n\n##### 防范措施\n1. 输入过滤\n```javascript\n// 过滤特殊字符，如<、>、script等\nconst input = input.replace(/<|>/g, '');\n```\n\n2. 输出编码\n```javascript\n// 将用户输入的数据进行编码，如HTML实体编码\nconst comment = comment.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n```\n\n3. 使用CSP（内容安全策略）\n```javascript\n// 限制允许执行的脚本类型\nconst cspHeader = \"Content-Security-Policy: script-src 'self' 'unsafe-inline' https://apis.example.com\";\n```\n\n\n#### 2. CSRF（跨站请求伪造）\n##### 原理\n- 攻击者诱导用户访问恶意网站\n- 利用用户已登录的身份发起请求\n- 在用户不知情的情况下执行操作\n\n##### 攻击示例\n```javascript \n<!-- 恶意网站中的图片 -->\n<img src=\"http://bank.example.com/transfer?amount=1000&to=attacker\" />\n```\n\n\n##### 防范措施\n1. CSRF Token\n```javascript   \n// 服务端生成token\nconst csrfToken = generateToken();\n// 在表单中包含token\n<input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n``` \n2. Same-Site Cookie\n```javascript\n// 设置Cookie\nSet-Cookie: sessionId=abc123; SameSite=Strict\n```\n\n\n#### 3. SQL注入\n##### 原理\n- 将SQL命令插入到输入字段中\n- 破坏原有SQL语句结构\n- 执行恶意SQL命令\n\n##### 攻击示例\n```sql\nsql\n-- 原始查询\nSELECT FROM users WHERE username = 'input' AND password = 'password'\n-- 注入后\nSELECT FROM users WHERE username = 'admin'--' AND password = 'anything'\n```\n\n\n#### 4. 其他安全问题\n\n##### 1. 点击劫持\n防范：\n```javascript\n// 设置X-Frame-Options\nresponse.setHeader('X-Frame-Options', 'DENY');\n```\n\n\n##### 2. 中间人攻击\n防范：\n- 使用HTTPS\n- 证书校验\n- HSTS策略\n\n##### 3. 文件上传漏洞\n防范：\n\n```javascript\n// 限制文件类型和大小\nconst allowedTypes = ['image/jpeg', 'image/png'];\nconst maxSize = 1024 * 1024; // 1MB\n```\n\n#### 5. 安全最佳实践\n\n1. **通用防护措施**\n- 及时更新依赖包\n- 使用安全的框架\n- 开启安全相关的HTTP头部\n\n```javascript\n// 常用安全头部\napp.use(helmet()); // 使用helmet中间件\n```\n\n\n2. **身份认证**\n- 使用强密码策略\n- 实现登录失败次数限制\n- 双因素认证\n\n3. **数据保护**\n- 敏感数据加密存储\n- 使用HTTPS传输\n- 实现适当的访问控制\n\n4. **日志监控**\n- 记录所有安全事件\n- 定期审计日志\n- 实现实时监控和报警\n","slug":"web常见的安全问题","published":1,"updated":"2025-01-17T11:16:08.952Z","_id":"cm5uhmaw2000wtkug4wdzek2u","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>xss</li>\n<li>csrf</li>\n<li>等</li>\n<li>解决方法</li>\n</ul>\n<h3 id=\"Web安全问题及防范\"><a href=\"#Web安全问题及防范\" class=\"headerlink\" title=\"Web安全问题及防范\"></a>Web安全问题及防范</h3><h4 id=\"1-XSS（跨站脚本攻击）\"><a href=\"#1-XSS（跨站脚本攻击）\" class=\"headerlink\" title=\"1. XSS（跨站脚本攻击）\"></a>1. XSS（跨站脚本攻击）</h4><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>攻击者将恶意脚本注入到网页中</li>\n<li>当用户访问页面时，恶意脚本被执行</li>\n<li>可能窃取用户信息、篡改页面内容等</li>\n</ul>\n<h5 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h5><ol>\n<li><strong>存储型XSS</strong></li>\n</ol>\n<ul>\n<li>恶意脚本存储在服务器端</li>\n<li>用户提交数据时，恶意脚本被存储</li>\n<li>其他用户访问页面时，恶意脚本被执行<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户评论中包含恶意脚本</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comment = <span class=\"string\">&#x27;&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>反射型XSS</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户点击恶意链接，恶意脚本被反射到页面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;https://example.com?comment=&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p><strong>DOM型XSS</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户输入恶意脚本，直接在DOM中执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"string\">&#x27;&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>).<span class=\"property\">value</span> = input;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"防范措施\"><a href=\"#防范措施\" class=\"headerlink\" title=\"防范措施\"></a>防范措施</h5><ol>\n<li><p>输入过滤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 过滤特殊字符，如&lt;、&gt;、script等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> input = input.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;|&gt;/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将用户输入的数据进行编码，如HTML实体编码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comment = comment.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">&#x27;&amp;amp;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">&#x27;&amp;lt;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">&#x27;&amp;gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用CSP（内容安全策略）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 限制允许执行的脚本类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cspHeader = <span class=\"string\">&quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; https://apis.example.com&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-CSRF（跨站请求伪造）\"><a href=\"#2-CSRF（跨站请求伪造）\" class=\"headerlink\" title=\"2. CSRF（跨站请求伪造）\"></a>2. CSRF（跨站请求伪造）</h4><h5 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>攻击者诱导用户访问恶意网站</li>\n<li>利用用户已登录的身份发起请求</li>\n<li>在用户不知情的情况下执行操作</li>\n</ul>\n<h5 id=\"攻击示例\"><a href=\"#攻击示例\" class=\"headerlink\" title=\"攻击示例\"></a>攻击示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 恶意网站中的图片 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://bank.example.com/transfer?amount=1000&amp;to=attacker&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"防范措施-1\"><a href=\"#防范措施-1\" class=\"headerlink\" title=\"防范措施\"></a>防范措施</h5><ol>\n<li>CSRF Token<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务端生成token</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> csrfToken = <span class=\"title function_\">generateToken</span>();</span><br><span class=\"line\"><span class=\"comment\">// 在表单中包含token</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;csrf&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;csrfToken&#125;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n<li>Same-Site Cookie<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置Cookie</span></span><br><span class=\"line\"><span class=\"title class_\">Set</span>-<span class=\"title class_\">Cookie</span>: sessionId=abc123; <span class=\"title class_\">SameSite</span>=<span class=\"title class_\">Strict</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-SQL注入\"><a href=\"#3-SQL注入\" class=\"headerlink\" title=\"3. SQL注入\"></a>3. SQL注入</h4><h5 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>将SQL命令插入到输入字段中</li>\n<li>破坏原有SQL语句结构</li>\n<li>执行恶意SQL命令</li>\n</ul>\n<h5 id=\"攻击示例-1\"><a href=\"#攻击示例-1\" class=\"headerlink\" title=\"攻击示例\"></a>攻击示例</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"comment\">-- 原始查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;input&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-- 注入后</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;admin&#x27;</span><span class=\"comment\">--&#x27; AND password = &#x27;anything&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-其他安全问题\"><a href=\"#4-其他安全问题\" class=\"headerlink\" title=\"4. 其他安全问题\"></a>4. 其他安全问题</h4><h5 id=\"1-点击劫持\"><a href=\"#1-点击劫持\" class=\"headerlink\" title=\"1. 点击劫持\"></a>1. 点击劫持</h5><p>防范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置X-Frame-Options</span></span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;X-Frame-Options&#x27;</span>, <span class=\"string\">&#x27;DENY&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-中间人攻击\"><a href=\"#2-中间人攻击\" class=\"headerlink\" title=\"2. 中间人攻击\"></a>2. 中间人攻击</h5><p>防范：</p>\n<ul>\n<li>使用HTTPS</li>\n<li>证书校验</li>\n<li>HSTS策略</li>\n</ul>\n<h5 id=\"3-文件上传漏洞\"><a href=\"#3-文件上传漏洞\" class=\"headerlink\" title=\"3. 文件上传漏洞\"></a>3. 文件上传漏洞</h5><p>防范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 限制文件类型和大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> allowedTypes = [<span class=\"string\">&#x27;image/jpeg&#x27;</span>, <span class=\"string\">&#x27;image/png&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> maxSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 1MB</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-安全最佳实践\"><a href=\"#5-安全最佳实践\" class=\"headerlink\" title=\"5. 安全最佳实践\"></a>5. 安全最佳实践</h4><ol>\n<li><strong>通用防护措施</strong></li>\n</ol>\n<ul>\n<li>及时更新依赖包</li>\n<li>使用安全的框架</li>\n<li>开启安全相关的HTTP头部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用安全头部</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">helmet</span>()); <span class=\"comment\">// 使用helmet中间件</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>身份认证</strong></li>\n</ol>\n<ul>\n<li>使用强密码策略</li>\n<li>实现登录失败次数限制</li>\n<li>双因素认证</li>\n</ul>\n<ol start=\"3\">\n<li><strong>数据保护</strong></li>\n</ol>\n<ul>\n<li>敏感数据加密存储</li>\n<li>使用HTTPS传输</li>\n<li>实现适当的访问控制</li>\n</ul>\n<ol start=\"4\">\n<li><strong>日志监控</strong></li>\n</ol>\n<ul>\n<li>记录所有安全事件</li>\n<li>定期审计日志</li>\n<li>实现实时监控和报警</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>xss</li>\n<li>csrf</li>\n<li>等</li>\n<li>解决方法</li>\n</ul>\n<h3 id=\"Web安全问题及防范\"><a href=\"#Web安全问题及防范\" class=\"headerlink\" title=\"Web安全问题及防范\"></a>Web安全问题及防范</h3><h4 id=\"1-XSS（跨站脚本攻击）\"><a href=\"#1-XSS（跨站脚本攻击）\" class=\"headerlink\" title=\"1. XSS（跨站脚本攻击）\"></a>1. XSS（跨站脚本攻击）</h4><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>攻击者将恶意脚本注入到网页中</li>\n<li>当用户访问页面时，恶意脚本被执行</li>\n<li>可能窃取用户信息、篡改页面内容等</li>\n</ul>\n<h5 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h5><ol>\n<li><strong>存储型XSS</strong></li>\n</ol>\n<ul>\n<li>恶意脚本存储在服务器端</li>\n<li>用户提交数据时，恶意脚本被存储</li>\n<li>其他用户访问页面时，恶意脚本被执行<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户评论中包含恶意脚本</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comment = <span class=\"string\">&#x27;&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>反射型XSS</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户点击恶意链接，恶意脚本被反射到页面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;https://example.com?comment=&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p><strong>DOM型XSS</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如：用户输入恶意脚本，直接在DOM中执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"string\">&#x27;&lt;script&gt;alert(&quot;已窃取cookie:&quot; + document.cookie)&lt;/script&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>).<span class=\"property\">value</span> = input;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"防范措施\"><a href=\"#防范措施\" class=\"headerlink\" title=\"防范措施\"></a>防范措施</h5><ol>\n<li><p>输入过滤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 过滤特殊字符，如&lt;、&gt;、script等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> input = input.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;|&gt;/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将用户输入的数据进行编码，如HTML实体编码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comment = comment.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">&#x27;&amp;amp;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">&#x27;&amp;lt;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">&#x27;&amp;gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用CSP（内容安全策略）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 限制允许执行的脚本类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cspHeader = <span class=\"string\">&quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; https://apis.example.com&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-CSRF（跨站请求伪造）\"><a href=\"#2-CSRF（跨站请求伪造）\" class=\"headerlink\" title=\"2. CSRF（跨站请求伪造）\"></a>2. CSRF（跨站请求伪造）</h4><h5 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>攻击者诱导用户访问恶意网站</li>\n<li>利用用户已登录的身份发起请求</li>\n<li>在用户不知情的情况下执行操作</li>\n</ul>\n<h5 id=\"攻击示例\"><a href=\"#攻击示例\" class=\"headerlink\" title=\"攻击示例\"></a>攻击示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 恶意网站中的图片 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://bank.example.com/transfer?amount=1000&amp;to=attacker&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"防范措施-1\"><a href=\"#防范措施-1\" class=\"headerlink\" title=\"防范措施\"></a>防范措施</h5><ol>\n<li>CSRF Token<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务端生成token</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> csrfToken = <span class=\"title function_\">generateToken</span>();</span><br><span class=\"line\"><span class=\"comment\">// 在表单中包含token</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;csrf&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;csrfToken&#125;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n<li>Same-Site Cookie<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置Cookie</span></span><br><span class=\"line\"><span class=\"title class_\">Set</span>-<span class=\"title class_\">Cookie</span>: sessionId=abc123; <span class=\"title class_\">SameSite</span>=<span class=\"title class_\">Strict</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-SQL注入\"><a href=\"#3-SQL注入\" class=\"headerlink\" title=\"3. SQL注入\"></a>3. SQL注入</h4><h5 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li>将SQL命令插入到输入字段中</li>\n<li>破坏原有SQL语句结构</li>\n<li>执行恶意SQL命令</li>\n</ul>\n<h5 id=\"攻击示例-1\"><a href=\"#攻击示例-1\" class=\"headerlink\" title=\"攻击示例\"></a>攻击示例</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"comment\">-- 原始查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;input&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-- 注入后</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;admin&#x27;</span><span class=\"comment\">--&#x27; AND password = &#x27;anything&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-其他安全问题\"><a href=\"#4-其他安全问题\" class=\"headerlink\" title=\"4. 其他安全问题\"></a>4. 其他安全问题</h4><h5 id=\"1-点击劫持\"><a href=\"#1-点击劫持\" class=\"headerlink\" title=\"1. 点击劫持\"></a>1. 点击劫持</h5><p>防范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置X-Frame-Options</span></span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;X-Frame-Options&#x27;</span>, <span class=\"string\">&#x27;DENY&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-中间人攻击\"><a href=\"#2-中间人攻击\" class=\"headerlink\" title=\"2. 中间人攻击\"></a>2. 中间人攻击</h5><p>防范：</p>\n<ul>\n<li>使用HTTPS</li>\n<li>证书校验</li>\n<li>HSTS策略</li>\n</ul>\n<h5 id=\"3-文件上传漏洞\"><a href=\"#3-文件上传漏洞\" class=\"headerlink\" title=\"3. 文件上传漏洞\"></a>3. 文件上传漏洞</h5><p>防范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 限制文件类型和大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> allowedTypes = [<span class=\"string\">&#x27;image/jpeg&#x27;</span>, <span class=\"string\">&#x27;image/png&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> maxSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 1MB</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-安全最佳实践\"><a href=\"#5-安全最佳实践\" class=\"headerlink\" title=\"5. 安全最佳实践\"></a>5. 安全最佳实践</h4><ol>\n<li><strong>通用防护措施</strong></li>\n</ol>\n<ul>\n<li>及时更新依赖包</li>\n<li>使用安全的框架</li>\n<li>开启安全相关的HTTP头部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用安全头部</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">helmet</span>()); <span class=\"comment\">// 使用helmet中间件</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>身份认证</strong></li>\n</ol>\n<ul>\n<li>使用强密码策略</li>\n<li>实现登录失败次数限制</li>\n<li>双因素认证</li>\n</ul>\n<ol start=\"3\">\n<li><strong>数据保护</strong></li>\n</ol>\n<ul>\n<li>敏感数据加密存储</li>\n<li>使用HTTPS传输</li>\n<li>实现适当的访问控制</li>\n</ul>\n<ol start=\"4\">\n<li><strong>日志监控</strong></li>\n</ol>\n<ul>\n<li>记录所有安全事件</li>\n<li>定期审计日志</li>\n<li>实现实时监控和报警</li>\n</ul>\n"},{"title":"基础算法","date":"2018-02-07T07:43:14.000Z","_content":"\n- 快速排序","source":"_posts/基础算法.md","raw":"---\ntitle: 基础算法\ndate: 2018-02-07 15:43:14\ntags:\n- 数据结构\ncategory: \n- 算法\n---\n\n- 快速排序","slug":"基础算法","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaw2000xtkugd9bxa2ai","content":"<ul>\n<li>快速排序</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>快速排序</li>\n</ul>\n"},{"title":"数据分析的学习路径","date":"2025-01-13T03:13:14.000Z","_content":"\n## 数据分析\n\n1. 数据的收集和预处理\n\n```python\n# 示例：文本数据处理\nimport pandas as pd\nimport nltk\n\ndef process_text(text):\n    # 分词\n    tokens = nltk.word_tokenize(text)\n    # 词性标注\n    tagged = nltk.pos_tag(tokens)\n    return tagged\n\n# 读取语料库\n  data = pd.read_csv('corpus.csv')\n```\n\n2. 语法规则分析\n\n```python\n# 统计语法模式\ndef analyze_patterns(sentences):\n    patterns = {}\n    for sent in sentences:\n        # 例如：分析 \"is + article + noun\" 模式\n        if \"is a teacher\" in sent:\n            patterns['is_a_noun'] = patterns.get('is_a_noun', 0) + 1\n    return patterns\n```\n\n3. 机器学习模型\n\n```python \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\n\n# 文本向量化\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(texts)\n\n# 训练测试集分割\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n```\n\n4. 常用工具和库：\n\n数据处理：Pandas, NumPy\n文本处理：NLTK, SpaCy\n机器学习：Scikit-learn\n深度学习：PyTorch, TensorFlow\n\n## 数据收集\n\n1. 网络爬虫采集\n2. 官网开放数据集\nCommon Crawl（网页数据）\nWikipedia dumps（维基百科数据）\n各国政府开放数据平台\n研究机构发布的语料库\n3. 付费数据服务\nAPI 服务\n数据供应商\n专业数据平台\n\n\n","source":"_posts/数据分析的学习路径.md","raw":"---\ntitle: 数据分析的学习路径\ndate: 2025-01-13 11:13:14\ntags:\n- 数据分析\ncategory: \n- 计算机\n---\n\n## 数据分析\n\n1. 数据的收集和预处理\n\n```python\n# 示例：文本数据处理\nimport pandas as pd\nimport nltk\n\ndef process_text(text):\n    # 分词\n    tokens = nltk.word_tokenize(text)\n    # 词性标注\n    tagged = nltk.pos_tag(tokens)\n    return tagged\n\n# 读取语料库\n  data = pd.read_csv('corpus.csv')\n```\n\n2. 语法规则分析\n\n```python\n# 统计语法模式\ndef analyze_patterns(sentences):\n    patterns = {}\n    for sent in sentences:\n        # 例如：分析 \"is + article + noun\" 模式\n        if \"is a teacher\" in sent:\n            patterns['is_a_noun'] = patterns.get('is_a_noun', 0) + 1\n    return patterns\n```\n\n3. 机器学习模型\n\n```python \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\n\n# 文本向量化\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(texts)\n\n# 训练测试集分割\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n```\n\n4. 常用工具和库：\n\n数据处理：Pandas, NumPy\n文本处理：NLTK, SpaCy\n机器学习：Scikit-learn\n深度学习：PyTorch, TensorFlow\n\n## 数据收集\n\n1. 网络爬虫采集\n2. 官网开放数据集\nCommon Crawl（网页数据）\nWikipedia dumps（维基百科数据）\n各国政府开放数据平台\n研究机构发布的语料库\n3. 付费数据服务\nAPI 服务\n数据供应商\n专业数据平台\n\n\n","slug":"数据分析的学习路径","published":1,"updated":"2025-01-13T03:33:31.361Z","_id":"cm5uhmaw30010tkug0lrl4ywc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><ol>\n<li>数据的收集和预处理</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：文本数据处理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_text</span>(<span class=\"params\">text</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 分词</span></span><br><span class=\"line\">    tokens = nltk.word_tokenize(text)</span><br><span class=\"line\">    <span class=\"comment\"># 词性标注</span></span><br><span class=\"line\">    tagged = nltk.pos_tag(tokens)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取语料库</span></span><br><span class=\"line\">  data = pd.read_csv(<span class=\"string\">&#x27;corpus.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>语法规则分析</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计语法模式</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">analyze_patterns</span>(<span class=\"params\">sentences</span>):</span><br><span class=\"line\">    patterns = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sent <span class=\"keyword\">in</span> sentences:</span><br><span class=\"line\">        <span class=\"comment\"># 例如：分析 &quot;is + article + noun&quot; 模式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;is a teacher&quot;</span> <span class=\"keyword\">in</span> sent:</span><br><span class=\"line\">            patterns[<span class=\"string\">&#x27;is_a_noun&#x27;</span>] = patterns.get(<span class=\"string\">&#x27;is_a_noun&#x27;</span>, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> patterns</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>机器学习模型</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> TfidfVectorizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文本向量化</span></span><br><span class=\"line\">vectorizer = TfidfVectorizer()</span><br><span class=\"line\">X = vectorizer.fit_transform(texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练测试集分割</span></span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>常用工具和库：</li>\n</ol>\n<p>数据处理：Pandas, NumPy<br>文本处理：NLTK, SpaCy<br>机器学习：Scikit-learn<br>深度学习：PyTorch, TensorFlow</p>\n<h2 id=\"数据收集\"><a href=\"#数据收集\" class=\"headerlink\" title=\"数据收集\"></a>数据收集</h2><ol>\n<li>网络爬虫采集</li>\n<li>官网开放数据集<br>Common Crawl（网页数据）<br>Wikipedia dumps（维基百科数据）<br>各国政府开放数据平台<br>研究机构发布的语料库</li>\n<li>付费数据服务<br>API 服务<br>数据供应商<br>专业数据平台</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><ol>\n<li>数据的收集和预处理</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：文本数据处理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> nltk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_text</span>(<span class=\"params\">text</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 分词</span></span><br><span class=\"line\">    tokens = nltk.word_tokenize(text)</span><br><span class=\"line\">    <span class=\"comment\"># 词性标注</span></span><br><span class=\"line\">    tagged = nltk.pos_tag(tokens)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取语料库</span></span><br><span class=\"line\">  data = pd.read_csv(<span class=\"string\">&#x27;corpus.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>语法规则分析</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计语法模式</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">analyze_patterns</span>(<span class=\"params\">sentences</span>):</span><br><span class=\"line\">    patterns = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sent <span class=\"keyword\">in</span> sentences:</span><br><span class=\"line\">        <span class=\"comment\"># 例如：分析 &quot;is + article + noun&quot; 模式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;is a teacher&quot;</span> <span class=\"keyword\">in</span> sent:</span><br><span class=\"line\">            patterns[<span class=\"string\">&#x27;is_a_noun&#x27;</span>] = patterns.get(<span class=\"string\">&#x27;is_a_noun&#x27;</span>, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> patterns</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>机器学习模型</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> TfidfVectorizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文本向量化</span></span><br><span class=\"line\">vectorizer = TfidfVectorizer()</span><br><span class=\"line\">X = vectorizer.fit_transform(texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练测试集分割</span></span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>常用工具和库：</li>\n</ol>\n<p>数据处理：Pandas, NumPy<br>文本处理：NLTK, SpaCy<br>机器学习：Scikit-learn<br>深度学习：PyTorch, TensorFlow</p>\n<h2 id=\"数据收集\"><a href=\"#数据收集\" class=\"headerlink\" title=\"数据收集\"></a>数据收集</h2><ol>\n<li>网络爬虫采集</li>\n<li>官网开放数据集<br>Common Crawl（网页数据）<br>Wikipedia dumps（维基百科数据）<br>各国政府开放数据平台<br>研究机构发布的语料库</li>\n<li>付费数据服务<br>API 服务<br>数据供应商<br>专业数据平台</li>\n</ol>\n"},{"title":"事件流","date":"2018-02-07T08:09:10.000Z","_content":"\n- 冒泡\n- 捕获\n- target、currentTarget","source":"_posts/事件流.md","raw":"---\ntitle: 事件流\ndate: 2018-02-07 16:09:10\ntags:\n- js\n- 事件流\ncategory: \n- javascript\n---\n\n- 冒泡\n- 捕获\n- target、currentTarget","slug":"事件流","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaw40013tkug7k5s0kda","content":"<ul>\n<li>冒泡</li>\n<li>捕获</li>\n<li>target、currentTarget</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>冒泡</li>\n<li>捕获</li>\n<li>target、currentTarget</li>\n</ul>\n"},{"title":"自动化测试","date":"2018-02-07T09:02:55.000Z","_content":"\n- 部署\n- jest+enzyme\n- 注意点\n\n### 前端自动化测试实践\n\n#### 1. 测试框架介绍\n\n##### Jest\n1. **基础配置**\n\n```javascript\n// jest.config.js\nmodule.exports = {\ntestEnvironment: 'jsdom',\nsetupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],\nmoduleNameMapper: {\n'\\\\.(css|less|scss)$': 'identity-obj-proxy',\n'^@/(.)$': '<rootDir>/src/$1'\n},\ncollectCoverageFrom: ['src//.{js,jsx,ts,tsx}']\n};\n```\n\n\n2. **常用匹配器**\n\n```\ndescribe('基础测试', () => {\ntest('相等性测试', () => {\nexpect(2 + 2).toBe(4);\nexpect({ name: 'test' }).toEqual({ name: 'test' });\n});\ntest('真值测试', () => {\nexpect(true).toBeTruthy();\nexpect(false).toBeFalsy();\nexpect(null).toBeNull();\n});\ntest('包含测试', () => {\nexpect([1, 2, 3]).toContain(2);\nexpect('hello').toMatch(/llo/);\n});\n});\n\n```\n\n\n##### Enzyme\n1. **组件测试设置**\n\n```javascript\n// setupTests.js\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nconfigure({ adapter: new Adapter() });\n```\n\n\n2. **组件渲染方式**\n\n```javascript\nimport { shallow, mount } from 'enzyme';\nimport MyComponent from './MyComponent';\ndescribe('组件测试', () => {\ntest('浅渲染测试', () => {\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.title')).toHaveLength(1);\n});\ntest('完整渲染测试', () => {\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('button')).toHaveLength(1);\n});\n});\n```\n\n\n#### 2. 测试类型\n\n##### 1. 单元测试\n```javascript\n// utils.test.js\nimport { formatDate } from './utils';\ndescribe('工具函数测试', () => {\ntest('日期格式化', () => {\nconst date = new Date('2024-01-01');\nexpect(formatDate(date)).toBe('2024-01-01');\n});\n});\n```\n\n##### 2. 组件测试\n```javascript\n// Button.test.jsx\nimport Button from './Button';\ndescribe('Button组件', () => {\ntest('点击事件', () => {\nconst onClick = jest.fn();\nconst wrapper = shallow(<Button onClick={onClick} />);\nwrapper.simulate('click');\nexpect(onClick).toHaveBeenCalled();\n});\ntest('禁用状态', () => {\nconst wrapper = shallow(<Button disabled />);\nexpect(wrapper.prop('disabled')).toBe(true);\n});\n});\n```\n\n##### 3. 异步测试\n```javascript\n// async.test.js\nimport { fetchData } from './api';\ndescribe('异步测试', () => {\ntest('异步API调用', async () => {\nconst data = await fetchData();\nexpect(data).toEqual({ id: 1, name: 'test' });\n});\n});\n```\n\n### 组件测试主要可以测试：\n- 交互行为（点击、输入等）\n- 状态管理和更新\n- 生命周期方法\n- 异步操作（数据加载等）\n- 条件渲染逻辑\n- 样式和类名\n- 组件间通信\n- 错误边界处理\n- 性能优化（如memo、useMemo等）\n\n```javascript\n// Button组件测试示例\ndescribe('Button组件测试', () => {\n    // 1. 交互行为测试\n    test('点击事件测试', () => {\n        const onClick = jest.fn();\n        const wrapper = mount(<Button onClick={onClick}>点击</Button>);\n        \n        wrapper.simulate('click');\n        expect(onClick).toHaveBeenCalledTimes(1);\n        expect(onClick).toHaveBeenCalledWith('someValue');\n    });\n    \n    // 2. 状态变化测试\n    test('状态更新测试', () => {\n        const wrapper = mount(<Counter />);\n        wrapper.find('button').simulate('click');\n        expect(wrapper.state('count')).toBe(1);\n        expect(wrapper.find('.count-display').text()).toBe('1');\n    });\n    \n    // 3. 生命周期测试\n    test('组件生命周期', () => {\n        const didMount = jest.spyOn(Counter.prototype, 'componentDidMount');\n        const wrapper = mount(<Counter />);\n        expect(didMount).toHaveBeenCalled();\n    });\n    \n    // 4. 异步操作测试\n    test('异步数据加载', async () => {\n        const wrapper = mount(<UserList />);\n        // 等待异步操作完成\n        await act(async () => {\n            await new Promise(resolve => setTimeout(resolve, 0));\n        });\n        expect(wrapper.find('.user-item')).toHaveLength(3);\n    });\n    \n    // 5. 条件渲染测试\n    test('条件渲染逻辑', () => {\n        const wrapper = mount(<Dialog visible={false} />);\n        expect(wrapper.find('.dialog')).toHaveLength(0);\n        \n        wrapper.setProps({ visible: true });\n        expect(wrapper.find('.dialog')).toHaveLength(1);\n    });\n    \n    // 6. 样式测试\n    test('样式类名测试', () => {\n        const wrapper = mount(<Button type=\"primary\" />);\n        expect(wrapper.hasClass('btn-primary')).toBe(true);\n    });\n});\n```\n\n```javascript\n// 1. 测试不必要的重渲染\ndescribe('性能优化测试', () => {\n    test('验证React.memo的效果', () => {\n        const renderSpy = jest.fn();\n        \n        // 一个使用memo的子组件\n        const ChildComponent = React.memo(({ data }) => {\n            renderSpy();\n            return <div>{data}</div>;\n        });\n        \n        // 父组件\n        const ParentComponent = () => {\n            const [count, setCount] = useState(0);\n            const data = \"test\";  // 不变的props\n            \n            return (\n                <>\n                    <button onClick={() => setCount(c => c + 1)}>\n                        Count: {count}\n                    </button>\n                    <ChildComponent data={data} />\n                </>\n            );\n        };\n        \n        // 挂载组件\n        const wrapper = mount(<ParentComponent />);\n        expect(renderSpy).toHaveBeenCalledTimes(1);\n        \n        // 点击按钮更新父组件\n        wrapper.find('button').simulate('click');\n        wrapper.find('button').simulate('click');\n        \n        // 验证子组件没有重新渲染\n        expect(renderSpy).toHaveBeenCalledTimes(1);\n    });\n    \n    // 2. 测试useMemo的缓存效果\n    test('验证useMemo的缓存效果', () => {\n        const expensiveCalculation = jest.fn();\n        \n        const Component = ({ value }) => {\n            const result = useMemo(() => {\n                return expensiveCalculation(value);\n            }, [value]);\n            \n            return <div>{result}</div>;\n        };\n        \n        const wrapper = mount(<Component value={1} />);\n        expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n        \n        // 使用相同的value更新\n        wrapper.setProps({ value: 1 });\n        // 验证没有重新计算\n        expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n        \n        // 使用不同的value更新\n        wrapper.setProps({ value: 2 });\n        // 验证重新计算了\n        expect(expensiveCalculation).toHaveBeenCalledTimes(2);\n    });\n});\n```\n\n\n### 其他\n每个框架的特点：\nJest: React生态，配置简单，速度快\nMocha: 灵活性高，可扩展性强\nCypress: 专注E2E测试，可视化界面\nVitest: Vite项目首选，兼容Jest API\nKarma: 真实浏览器测试，支持多浏览器\n选择建议：\n1. React项目 -> Jest\nVue3+Vite项目 -> Vitest\n需要E2E测试 -> Cypress\nNode.js项目 -> Mocha\n浏览器兼容性测试 -> Karma","source":"_posts/自动化测试.md","raw":"---\ntitle: 自动化测试\ndate: 2018-02-07 17:02:55\ntags:\n- debug \n- 测试 \n- 自动化\ncategory: \n- 自动化测试\n---\n\n- 部署\n- jest+enzyme\n- 注意点\n\n### 前端自动化测试实践\n\n#### 1. 测试框架介绍\n\n##### Jest\n1. **基础配置**\n\n```javascript\n// jest.config.js\nmodule.exports = {\ntestEnvironment: 'jsdom',\nsetupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],\nmoduleNameMapper: {\n'\\\\.(css|less|scss)$': 'identity-obj-proxy',\n'^@/(.)$': '<rootDir>/src/$1'\n},\ncollectCoverageFrom: ['src//.{js,jsx,ts,tsx}']\n};\n```\n\n\n2. **常用匹配器**\n\n```\ndescribe('基础测试', () => {\ntest('相等性测试', () => {\nexpect(2 + 2).toBe(4);\nexpect({ name: 'test' }).toEqual({ name: 'test' });\n});\ntest('真值测试', () => {\nexpect(true).toBeTruthy();\nexpect(false).toBeFalsy();\nexpect(null).toBeNull();\n});\ntest('包含测试', () => {\nexpect([1, 2, 3]).toContain(2);\nexpect('hello').toMatch(/llo/);\n});\n});\n\n```\n\n\n##### Enzyme\n1. **组件测试设置**\n\n```javascript\n// setupTests.js\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nconfigure({ adapter: new Adapter() });\n```\n\n\n2. **组件渲染方式**\n\n```javascript\nimport { shallow, mount } from 'enzyme';\nimport MyComponent from './MyComponent';\ndescribe('组件测试', () => {\ntest('浅渲染测试', () => {\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.title')).toHaveLength(1);\n});\ntest('完整渲染测试', () => {\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('button')).toHaveLength(1);\n});\n});\n```\n\n\n#### 2. 测试类型\n\n##### 1. 单元测试\n```javascript\n// utils.test.js\nimport { formatDate } from './utils';\ndescribe('工具函数测试', () => {\ntest('日期格式化', () => {\nconst date = new Date('2024-01-01');\nexpect(formatDate(date)).toBe('2024-01-01');\n});\n});\n```\n\n##### 2. 组件测试\n```javascript\n// Button.test.jsx\nimport Button from './Button';\ndescribe('Button组件', () => {\ntest('点击事件', () => {\nconst onClick = jest.fn();\nconst wrapper = shallow(<Button onClick={onClick} />);\nwrapper.simulate('click');\nexpect(onClick).toHaveBeenCalled();\n});\ntest('禁用状态', () => {\nconst wrapper = shallow(<Button disabled />);\nexpect(wrapper.prop('disabled')).toBe(true);\n});\n});\n```\n\n##### 3. 异步测试\n```javascript\n// async.test.js\nimport { fetchData } from './api';\ndescribe('异步测试', () => {\ntest('异步API调用', async () => {\nconst data = await fetchData();\nexpect(data).toEqual({ id: 1, name: 'test' });\n});\n});\n```\n\n### 组件测试主要可以测试：\n- 交互行为（点击、输入等）\n- 状态管理和更新\n- 生命周期方法\n- 异步操作（数据加载等）\n- 条件渲染逻辑\n- 样式和类名\n- 组件间通信\n- 错误边界处理\n- 性能优化（如memo、useMemo等）\n\n```javascript\n// Button组件测试示例\ndescribe('Button组件测试', () => {\n    // 1. 交互行为测试\n    test('点击事件测试', () => {\n        const onClick = jest.fn();\n        const wrapper = mount(<Button onClick={onClick}>点击</Button>);\n        \n        wrapper.simulate('click');\n        expect(onClick).toHaveBeenCalledTimes(1);\n        expect(onClick).toHaveBeenCalledWith('someValue');\n    });\n    \n    // 2. 状态变化测试\n    test('状态更新测试', () => {\n        const wrapper = mount(<Counter />);\n        wrapper.find('button').simulate('click');\n        expect(wrapper.state('count')).toBe(1);\n        expect(wrapper.find('.count-display').text()).toBe('1');\n    });\n    \n    // 3. 生命周期测试\n    test('组件生命周期', () => {\n        const didMount = jest.spyOn(Counter.prototype, 'componentDidMount');\n        const wrapper = mount(<Counter />);\n        expect(didMount).toHaveBeenCalled();\n    });\n    \n    // 4. 异步操作测试\n    test('异步数据加载', async () => {\n        const wrapper = mount(<UserList />);\n        // 等待异步操作完成\n        await act(async () => {\n            await new Promise(resolve => setTimeout(resolve, 0));\n        });\n        expect(wrapper.find('.user-item')).toHaveLength(3);\n    });\n    \n    // 5. 条件渲染测试\n    test('条件渲染逻辑', () => {\n        const wrapper = mount(<Dialog visible={false} />);\n        expect(wrapper.find('.dialog')).toHaveLength(0);\n        \n        wrapper.setProps({ visible: true });\n        expect(wrapper.find('.dialog')).toHaveLength(1);\n    });\n    \n    // 6. 样式测试\n    test('样式类名测试', () => {\n        const wrapper = mount(<Button type=\"primary\" />);\n        expect(wrapper.hasClass('btn-primary')).toBe(true);\n    });\n});\n```\n\n```javascript\n// 1. 测试不必要的重渲染\ndescribe('性能优化测试', () => {\n    test('验证React.memo的效果', () => {\n        const renderSpy = jest.fn();\n        \n        // 一个使用memo的子组件\n        const ChildComponent = React.memo(({ data }) => {\n            renderSpy();\n            return <div>{data}</div>;\n        });\n        \n        // 父组件\n        const ParentComponent = () => {\n            const [count, setCount] = useState(0);\n            const data = \"test\";  // 不变的props\n            \n            return (\n                <>\n                    <button onClick={() => setCount(c => c + 1)}>\n                        Count: {count}\n                    </button>\n                    <ChildComponent data={data} />\n                </>\n            );\n        };\n        \n        // 挂载组件\n        const wrapper = mount(<ParentComponent />);\n        expect(renderSpy).toHaveBeenCalledTimes(1);\n        \n        // 点击按钮更新父组件\n        wrapper.find('button').simulate('click');\n        wrapper.find('button').simulate('click');\n        \n        // 验证子组件没有重新渲染\n        expect(renderSpy).toHaveBeenCalledTimes(1);\n    });\n    \n    // 2. 测试useMemo的缓存效果\n    test('验证useMemo的缓存效果', () => {\n        const expensiveCalculation = jest.fn();\n        \n        const Component = ({ value }) => {\n            const result = useMemo(() => {\n                return expensiveCalculation(value);\n            }, [value]);\n            \n            return <div>{result}</div>;\n        };\n        \n        const wrapper = mount(<Component value={1} />);\n        expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n        \n        // 使用相同的value更新\n        wrapper.setProps({ value: 1 });\n        // 验证没有重新计算\n        expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n        \n        // 使用不同的value更新\n        wrapper.setProps({ value: 2 });\n        // 验证重新计算了\n        expect(expensiveCalculation).toHaveBeenCalledTimes(2);\n    });\n});\n```\n\n\n### 其他\n每个框架的特点：\nJest: React生态，配置简单，速度快\nMocha: 灵活性高，可扩展性强\nCypress: 专注E2E测试，可视化界面\nVitest: Vite项目首选，兼容Jest API\nKarma: 真实浏览器测试，支持多浏览器\n选择建议：\n1. React项目 -> Jest\nVue3+Vite项目 -> Vitest\n需要E2E测试 -> Cypress\nNode.js项目 -> Mocha\n浏览器兼容性测试 -> Karma","slug":"自动化测试","published":1,"updated":"2025-01-20T08:31:32.481Z","_id":"cm5uhmax7002gtkuggmj55h3q","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>部署</li>\n<li>jest+enzyme</li>\n<li>注意点</li>\n</ul>\n<h3 id=\"前端自动化测试实践\"><a href=\"#前端自动化测试实践\" class=\"headerlink\" title=\"前端自动化测试实践\"></a>前端自动化测试实践</h3><h4 id=\"1-测试框架介绍\"><a href=\"#1-测试框架介绍\" class=\"headerlink\" title=\"1. 测试框架介绍\"></a>1. 测试框架介绍</h4><h5 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h5><ol>\n<li><strong>基础配置</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jest.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">testEnvironment</span>: <span class=\"string\">&#x27;jsdom&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">setupFilesAfterEnv</span>: [<span class=\"string\">&#x27;&lt;rootDir&gt;/src/setupTests.js&#x27;</span>],</span><br><span class=\"line\"><span class=\"attr\">moduleNameMapper</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">&#x27;\\\\.(css|less|scss)$&#x27;</span>: <span class=\"string\">&#x27;identity-obj-proxy&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;^@/(.)$&#x27;</span>: <span class=\"string\">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">collectCoverageFrom</span>: [<span class=\"string\">&#x27;src//.&#123;js,jsx,ts,tsx&#125;&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>常用匹配器</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(&#x27;基础测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">test(&#x27;相等性测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect(2 + 2).toBe(4);</span><br><span class=\"line\">expect(&#123; name: &#x27;test&#x27; &#125;).toEqual(&#123; name: &#x27;test&#x27; &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(&#x27;真值测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect(true).toBeTruthy();</span><br><span class=\"line\">expect(false).toBeFalsy();</span><br><span class=\"line\">expect(null).toBeNull();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(&#x27;包含测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect([1, 2, 3]).toContain(2);</span><br><span class=\"line\">expect(&#x27;hello&#x27;).toMatch(/llo/);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"Enzyme\"><a href=\"#Enzyme\" class=\"headerlink\" title=\"Enzyme\"></a>Enzyme</h5><ol>\n<li><strong>组件测试设置</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setupTests.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; configure &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme-adapter-react-16&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">configure</span>(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>() &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>组件渲染方式</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow, mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./MyComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;组件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;浅渲染测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.title&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;完整渲染测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-测试类型\"><a href=\"#2-测试类型\" class=\"headerlink\" title=\"2. 测试类型\"></a>2. 测试类型</h4><h5 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1. 单元测试\"></a>1. 单元测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; formatDate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;工具函数测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;日期格式化&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2024-01-01&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(<span class=\"title function_\">formatDate</span>(date)).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;2024-01-01&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组件测试\"><a href=\"#2-组件测试\" class=\"headerlink\" title=\"2. 组件测试\"></a>2. 组件测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button.test.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Button&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Button组件&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;点击事件&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">wrapper.<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalled</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;禁用状态&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">disabled</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">prop</span>(<span class=\"string\">&#x27;disabled&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-异步测试\"><a href=\"#3-异步测试\" class=\"headerlink\" title=\"3. 异步测试\"></a>3. 异步测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./api&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;异步测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;异步API调用&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchData</span>();</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(data).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件测试主要可以测试：\"><a href=\"#组件测试主要可以测试：\" class=\"headerlink\" title=\"组件测试主要可以测试：\"></a>组件测试主要可以测试：</h3><ul>\n<li>交互行为（点击、输入等）</li>\n<li>状态管理和更新</li>\n<li>生命周期方法</li>\n<li>异步操作（数据加载等）</li>\n<li>条件渲染逻辑</li>\n<li>样式和类名</li>\n<li>组件间通信</li>\n<li>错误边界处理</li>\n<li>性能优化（如memo、useMemo等）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button组件测试示例</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Button组件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 交互行为测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;点击事件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> onClick = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        wrapper.<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalledWith</span>(<span class=\"string\">&#x27;someValue&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 状态变化测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;状态更新测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span> /&gt;</span></span>);</span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">state</span>(<span class=\"string\">&#x27;count&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.count-display&#x27;</span>).<span class=\"title function_\">text</span>()).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 生命周期测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;组件生命周期&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> didMount = jest.<span class=\"title function_\">spyOn</span>(<span class=\"title class_\">Counter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;componentDidMount&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(didMount).<span class=\"title function_\">toHaveBeenCalled</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 异步操作测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;异步数据加载&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"comment\">// 等待异步操作完成</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">act</span>(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.user-item&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 5. 条件渲染测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;条件渲染逻辑&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Dialog</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;false&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.dialog&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">visible</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.dialog&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 6. 样式测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;样式类名测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">hasClass</span>(<span class=\"string\">&#x27;btn-primary&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 测试不必要的重渲染</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;性能优化测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;验证React.memo的效果&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> renderSpy = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 一个使用memo的子组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">ChildComponent</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">renderSpy</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;data&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 父组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">ParentComponent</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"string\">&quot;test&quot;</span>;  <span class=\"comment\">// 不变的props</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(c =&gt; c + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        Count: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">ChildComponent</span> <span class=\"attr\">data</span>=<span class=\"string\">&#123;data&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 挂载组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ParentComponent</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(renderSpy).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 点击按钮更新父组件</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 验证子组件没有重新渲染</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(renderSpy).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 测试useMemo的缓存效果</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;验证useMemo的缓存效果&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expensiveCalculation = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">Component</span> = (<span class=\"params\">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">expensiveCalculation</span>(value);</span><br><span class=\"line\">            &#125;, [value]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;result&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用相同的value更新</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 验证没有重新计算</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用不同的value更新</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 验证重新计算了</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>每个框架的特点：<br>Jest: React生态，配置简单，速度快<br>Mocha: 灵活性高，可扩展性强<br>Cypress: 专注E2E测试，可视化界面<br>Vitest: Vite项目首选，兼容Jest API<br>Karma: 真实浏览器测试，支持多浏览器<br>选择建议：</p>\n<ol>\n<li>React项目 -&gt; Jest<br>Vue3+Vite项目 -&gt; Vitest<br>需要E2E测试 -&gt; Cypress<br>Node.js项目 -&gt; Mocha<br>浏览器兼容性测试 -&gt; Karma</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>部署</li>\n<li>jest+enzyme</li>\n<li>注意点</li>\n</ul>\n<h3 id=\"前端自动化测试实践\"><a href=\"#前端自动化测试实践\" class=\"headerlink\" title=\"前端自动化测试实践\"></a>前端自动化测试实践</h3><h4 id=\"1-测试框架介绍\"><a href=\"#1-测试框架介绍\" class=\"headerlink\" title=\"1. 测试框架介绍\"></a>1. 测试框架介绍</h4><h5 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h5><ol>\n<li><strong>基础配置</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jest.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">testEnvironment</span>: <span class=\"string\">&#x27;jsdom&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">setupFilesAfterEnv</span>: [<span class=\"string\">&#x27;&lt;rootDir&gt;/src/setupTests.js&#x27;</span>],</span><br><span class=\"line\"><span class=\"attr\">moduleNameMapper</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">&#x27;\\\\.(css|less|scss)$&#x27;</span>: <span class=\"string\">&#x27;identity-obj-proxy&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;^@/(.)$&#x27;</span>: <span class=\"string\">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">collectCoverageFrom</span>: [<span class=\"string\">&#x27;src//.&#123;js,jsx,ts,tsx&#125;&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>常用匹配器</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(&#x27;基础测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">test(&#x27;相等性测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect(2 + 2).toBe(4);</span><br><span class=\"line\">expect(&#123; name: &#x27;test&#x27; &#125;).toEqual(&#123; name: &#x27;test&#x27; &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(&#x27;真值测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect(true).toBeTruthy();</span><br><span class=\"line\">expect(false).toBeFalsy();</span><br><span class=\"line\">expect(null).toBeNull();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(&#x27;包含测试&#x27;, () =&gt; &#123;</span><br><span class=\"line\">expect([1, 2, 3]).toContain(2);</span><br><span class=\"line\">expect(&#x27;hello&#x27;).toMatch(/llo/);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"Enzyme\"><a href=\"#Enzyme\" class=\"headerlink\" title=\"Enzyme\"></a>Enzyme</h5><ol>\n<li><strong>组件测试设置</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setupTests.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; configure &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme-adapter-react-16&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">configure</span>(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>() &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li><strong>组件渲染方式</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow, mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;enzyme&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./MyComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;组件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;浅渲染测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.title&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;完整渲染测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-测试类型\"><a href=\"#2-测试类型\" class=\"headerlink\" title=\"2. 测试类型\"></a>2. 测试类型</h4><h5 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1. 单元测试\"></a>1. 单元测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; formatDate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;工具函数测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;日期格式化&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2024-01-01&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(<span class=\"title function_\">formatDate</span>(date)).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;2024-01-01&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组件测试\"><a href=\"#2-组件测试\" class=\"headerlink\" title=\"2. 组件测试\"></a>2. 组件测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button.test.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Button&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Button组件&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;点击事件&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">wrapper.<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalled</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;禁用状态&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">disabled</span> /&gt;</span></span>);</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">prop</span>(<span class=\"string\">&#x27;disabled&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-异步测试\"><a href=\"#3-异步测试\" class=\"headerlink\" title=\"3. 异步测试\"></a>3. 异步测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./api&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;异步测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;异步API调用&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchData</span>();</span><br><span class=\"line\"><span class=\"title function_\">expect</span>(data).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件测试主要可以测试：\"><a href=\"#组件测试主要可以测试：\" class=\"headerlink\" title=\"组件测试主要可以测试：\"></a>组件测试主要可以测试：</h3><ul>\n<li>交互行为（点击、输入等）</li>\n<li>状态管理和更新</li>\n<li>生命周期方法</li>\n<li>异步操作（数据加载等）</li>\n<li>条件渲染逻辑</li>\n<li>样式和类名</li>\n<li>组件间通信</li>\n<li>错误边界处理</li>\n<li>性能优化（如memo、useMemo等）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button组件测试示例</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Button组件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 交互行为测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;点击事件测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> onClick = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        wrapper.<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(onClick).<span class=\"title function_\">toHaveBeenCalledWith</span>(<span class=\"string\">&#x27;someValue&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 状态变化测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;状态更新测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span> /&gt;</span></span>);</span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">state</span>(<span class=\"string\">&#x27;count&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.count-display&#x27;</span>).<span class=\"title function_\">text</span>()).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 生命周期测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;组件生命周期&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> didMount = jest.<span class=\"title function_\">spyOn</span>(<span class=\"title class_\">Counter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;componentDidMount&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(didMount).<span class=\"title function_\">toHaveBeenCalled</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 异步操作测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;异步数据加载&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserList</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"comment\">// 等待异步操作完成</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">act</span>(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.user-item&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 5. 条件渲染测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;条件渲染逻辑&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Dialog</span> <span class=\"attr\">visible</span>=<span class=\"string\">&#123;false&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.dialog&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">visible</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.dialog&#x27;</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 6. 样式测试</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;样式类名测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">hasClass</span>(<span class=\"string\">&#x27;btn-primary&#x27;</span>)).<span class=\"title function_\">toBe</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 测试不必要的重渲染</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;性能优化测试&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;验证React.memo的效果&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> renderSpy = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 一个使用memo的子组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">ChildComponent</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">renderSpy</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;data&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 父组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">ParentComponent</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"string\">&quot;test&quot;</span>;  <span class=\"comment\">// 不变的props</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(c =&gt; c + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        Count: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">ChildComponent</span> <span class=\"attr\">data</span>=<span class=\"string\">&#123;data&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 挂载组件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ParentComponent</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(renderSpy).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 点击按钮更新父组件</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">simulate</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 验证子组件没有重新渲染</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(renderSpy).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 测试useMemo的缓存效果</span></span><br><span class=\"line\">    <span class=\"title function_\">test</span>(<span class=\"string\">&#x27;验证useMemo的缓存效果&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expensiveCalculation = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">Component</span> = (<span class=\"params\">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">expensiveCalculation</span>(value);</span><br><span class=\"line\">            &#125;, [value]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;result&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">mount</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;1&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用相同的value更新</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 验证没有重新计算</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用不同的value更新</span></span><br><span class=\"line\">        wrapper.<span class=\"title function_\">setProps</span>(&#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 验证重新计算了</span></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(expensiveCalculation).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>每个框架的特点：<br>Jest: React生态，配置简单，速度快<br>Mocha: 灵活性高，可扩展性强<br>Cypress: 专注E2E测试，可视化界面<br>Vitest: Vite项目首选，兼容Jest API<br>Karma: 真实浏览器测试，支持多浏览器<br>选择建议：</p>\n<ol>\n<li>React项目 -&gt; Jest<br>Vue3+Vite项目 -&gt; Vitest<br>需要E2E测试 -&gt; Cypress<br>Node.js项目 -&gt; Mocha<br>浏览器兼容性测试 -&gt; Karma</li>\n</ol>\n"},{"title":"脚手架实现","date":"2018-02-07T09:01:57.000Z","_content":"\n- 实现原理\n- hexo\n- metalsmith\n- yeoman\n","source":"_posts/脚手架实现.md","raw":"---\ntitle: 脚手架实现\ndate: 2018-02-07 17:01:57\ntags:\n- 脚手架\ncategory: \n- javascript\n---\n\n- 实现原理\n- hexo\n- metalsmith\n- yeoman\n","slug":"脚手架实现","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmax8002htkugazt6hx9f","content":"<ul>\n<li>实现原理</li>\n<li>hexo</li>\n<li>metalsmith</li>\n<li>yeoman</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>实现原理</li>\n<li>hexo</li>\n<li>metalsmith</li>\n<li>yeoman</li>\n</ul>\n"},{"title":"在浏览器输入URL后发生了什么","date":"2018-02-07T07:37:32.000Z","_content":"\n- 相对路径、绝对路径\n- http(请求头、状态码)\n- dns\n- tcp三次握手\n- ","source":"_posts/在浏览器输入URL后发生了什么.md","raw":"---\ntitle: 在浏览器输入URL后发生了什么\ndate: 2018-02-07 15:37:32\ntags:\n- http\ncategory: \n- 科普\n---\n\n- 相对路径、绝对路径\n- http(请求头、状态码)\n- dns\n- tcp三次握手\n- ","slug":"在浏览器输入URL后发生了什么","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxa002ktkug75fv9ise","content":"<ul>\n<li>相对路径、绝对路径</li>\n<li>http(请求头、状态码)</li>\n<li>dns</li>\n<li>tcp三次握手</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>相对路径、绝对路径</li>\n<li>http(请求头、状态码)</li>\n<li>dns</li>\n<li>tcp三次握手</li>\n<li></li>\n</ul>\n"},{"title":"跨域问题","date":"2018-02-07T09:01:20.000Z","_content":"\n- 原理\n- 解决方法","source":"_posts/跨域问题.md","raw":"---\ntitle: 跨域问题\ndate: 2018-02-07 17:01:20\ntags:\n- 跨域\ncategory: \n- javascript\n---\n\n- 原理\n- 解决方法","slug":"跨域问题","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxb002ltkugf6kv1na0","content":"<ul>\n<li>原理</li>\n<li>解决方法</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>原理</li>\n<li>解决方法</li>\n</ul>\n"},{"title":"谷歌插件编写","date":"2025-01-13T02:33:55.000Z","_content":"\n1. 配置manifest.json 文件（必需）\n  - 主要是包含基础信息，权限，以及功能组件等\n  - 插件的配置文件\n\n  ```json\n  {\n    \"manifest_version\": 3,\n    \"name\": \"GitHub Issue Creator\",\n    \"version\": \"1.0\",\n    \"description\": \"快速将选中文本添加到 GitHub Issues\",\n    \"permissions\": [\n      \"storage\",\n      \"activeTab\",\n      \"contextMenus\",\n      \"scripting\"\n    ],\n    \"host_permissions\": [\n      \"<all_urls>\"\n    ],\n    \"content_scripts\": [\n      {\n        \"matches\": [\"<all_urls>\"],     // 在哪些页面注入\n        \"css\": [\"content-styles.css\"], // 注入的样式文件\n        \"js\": [\"content-script.js\"],   // 注入的脚本文件\n        \"run_at\": \"document_end\"       // 在什么时候注入\n      }\n    ],\n    \"action\": {\n      \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n      \"service_worker\": \"background.js\",\n      \"type\": \"module\"\n    },\n    \"icons\": {\n      \"48\": \"icons/icon48.png\",\n      \"128\": \"icons/icon128.png\"\n    }\n  } \n  ```\n2. popup相关文件（可选， 假如需要点击插件图标弹出页面）\n  - popup.html 文件：插件的弹出页面\n  - popup.js 文件：插件的弹出页面逻辑\n\n3. 配置background.js 文件（可选）\n  - 插件的背景脚本，用于处理插件的后台逻辑\n  - 可以一直运行在后台\n  - 菜单右键，快捷键等功能处理\n\n4. 配置content-script.js 文件（可选，也需要配置到manifest.json 中）\n  - 插件的页面脚本，用于处理插件的页面逻辑\n  - 可以访问页面DOM\n  - 可以访问页面JS API\n\n\n## 流程\nmanifest.json (配置) \n    ↓\nbackground.js (后台逻辑)\n    ↓\npopup.html/js (用户界面) ←→ content-script.js (网页交互)\n\n\n## API 相关\n\n1. chrome.storage 类似localStorage， 但是可以跨域， 跨设备， 跨会话（local本地存储，sync同步存储，managed托管存储，大小是100kb，存储操作时异步的）\n2. chrome.runtime.sendMessage 和 chrome.runtime.onMessage.addListener 用于在插件和后台脚本之间通信（类似Electron渲染进程和主进程）\n3. chrome.runtime.onInstalled.addListener 用于在插件安装时执行一些操作\n4. chrome.runtime.onStartup.addListener 用于在插件启动时执行一些操作\n5. chrome.runtime.onConnect.addListener 用于在插件和后台脚本之间建立连接\n6. chrome.runtime.onSuspend.addListener 用于在插件休眠时执行一些操作\n7. chrome.windows.create 用于创建新窗口\n8. chrome.windows.onClicked.addListener 用于监听新窗口的点击事件\n9. chrome.contextMenus.create 用于创建右键菜单\n\n\n## 生命周期\n\n1. 安装/更新时\n\n  ```javascript\n  chrome.runtime.onInstalled.addListener((details) => {\n    if (details.reason === 'install') {\n      // 首次安装时的初始化\n      // 例如：创建右键菜单、设置默认配置等\n    } else if (details.reason === 'update') {\n      // 更新时的处理\n      // 例如：迁移旧数据、更新配置等\n    }\n  });\n  ```\n\n2. 启动时\n\n  ```javascript\n  chrome.runtime.onStartup.addListener(() => {\n    // 启动时的处理\n    // 例如：检查更新、恢复状态等\n  });\n  ```\n\n3. 激活/休眠\n\n  ```javascript\n  // background.js 在 Service Worker 模式下\n  chrome.runtime.onSuspend.addListener(() => {\n    // Service Worker 即将被终止时的清理工作\n    // 保存状态、清理资源等\n  });\n  ```\n\n4. 激活的时机\n\n  ```javascript\n  // 以下事件会唤醒 Service Worker：\n  // 1. 扩展安装或更新时\n  chrome.runtime.onInstalled.addListener((details) => {\n    console.log('Service Worker 被安装/更新激活');\n  });\n\n  // 2. 接收到消息时\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Service Worker 被消息激活');\n  });\n\n  // 3. 右键菜单被点击时\n  chrome.contextMenus.onClicked.addListener((info, tab) => {\n    console.log('Service Worker 被菜单点击激活');\n  });\n\n  // 4. 浏览器启动时\n  chrome.runtime.onStartup.addListener(() => {\n    console.log('Service Worker 被浏览器启动激活');\n  });\n  ```\n\n\n## github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）\n\n1. 基础配置\n\n  manifest.json  (插件配置文件)\n  ├── 定义插件权限 (permissions)\n  ├── 注册后台脚本 (background.js)\n  ├── 定义弹出窗口 (popup.html)\n  └── 配置图标等基本信息\n\n2. 设置功能\n\n  popup.html (设置界面)\n  └── popup.js (设置逻辑)\n      ├── 保存 GitHub Token\n      ├── 保存仓库所有者\n      └── 保存仓库名称\n\n2. 核心功能\n\n  background.js (后台脚本)\n  ├── 创建右键菜单\n  ├── 处理菜单点击事件\n  ├── 创建新 Issue 窗口\n  └── 打开 Issue 选择器窗口\n\n3. 创建新issue\n\n  create-issue.html (创建界面)\n  └── create-issue.js (创建逻辑)\n      ├── 加载选中的文本\n      ├── 设置 Issue 标题\n      ├── 加载标签列表\n      └── 提交创建请求\n\n4. 添加到已有的issue\n\n  issue-selector.html (选择界面)\n  └── issue-selector.js (选择和评论逻辑)\n      ├── 加载已有 Issues 列表\n      ├── 搜索过滤功能\n      ├── 显示评论表单\n      └── 提交评论请求\n\n5. 数据流向\n\n  选中文本 → background.js → chrome.storage → 功能窗口 → GitHub API\n\n\n这个是菜单右键实现的。可以做成那种悬浮在选中文字上边，就出现工具栏的话，就需要用到content-script.js 了。","source":"_posts/谷歌插件编写.md","raw":"---\ntitle: 谷歌插件编写\ndate: 2025-01-13 10:33:55\ntags:\n- 谷歌插件\n- cursor\ncategory: \n- 计算机\n---\n\n1. 配置manifest.json 文件（必需）\n  - 主要是包含基础信息，权限，以及功能组件等\n  - 插件的配置文件\n\n  ```json\n  {\n    \"manifest_version\": 3,\n    \"name\": \"GitHub Issue Creator\",\n    \"version\": \"1.0\",\n    \"description\": \"快速将选中文本添加到 GitHub Issues\",\n    \"permissions\": [\n      \"storage\",\n      \"activeTab\",\n      \"contextMenus\",\n      \"scripting\"\n    ],\n    \"host_permissions\": [\n      \"<all_urls>\"\n    ],\n    \"content_scripts\": [\n      {\n        \"matches\": [\"<all_urls>\"],     // 在哪些页面注入\n        \"css\": [\"content-styles.css\"], // 注入的样式文件\n        \"js\": [\"content-script.js\"],   // 注入的脚本文件\n        \"run_at\": \"document_end\"       // 在什么时候注入\n      }\n    ],\n    \"action\": {\n      \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n      \"service_worker\": \"background.js\",\n      \"type\": \"module\"\n    },\n    \"icons\": {\n      \"48\": \"icons/icon48.png\",\n      \"128\": \"icons/icon128.png\"\n    }\n  } \n  ```\n2. popup相关文件（可选， 假如需要点击插件图标弹出页面）\n  - popup.html 文件：插件的弹出页面\n  - popup.js 文件：插件的弹出页面逻辑\n\n3. 配置background.js 文件（可选）\n  - 插件的背景脚本，用于处理插件的后台逻辑\n  - 可以一直运行在后台\n  - 菜单右键，快捷键等功能处理\n\n4. 配置content-script.js 文件（可选，也需要配置到manifest.json 中）\n  - 插件的页面脚本，用于处理插件的页面逻辑\n  - 可以访问页面DOM\n  - 可以访问页面JS API\n\n\n## 流程\nmanifest.json (配置) \n    ↓\nbackground.js (后台逻辑)\n    ↓\npopup.html/js (用户界面) ←→ content-script.js (网页交互)\n\n\n## API 相关\n\n1. chrome.storage 类似localStorage， 但是可以跨域， 跨设备， 跨会话（local本地存储，sync同步存储，managed托管存储，大小是100kb，存储操作时异步的）\n2. chrome.runtime.sendMessage 和 chrome.runtime.onMessage.addListener 用于在插件和后台脚本之间通信（类似Electron渲染进程和主进程）\n3. chrome.runtime.onInstalled.addListener 用于在插件安装时执行一些操作\n4. chrome.runtime.onStartup.addListener 用于在插件启动时执行一些操作\n5. chrome.runtime.onConnect.addListener 用于在插件和后台脚本之间建立连接\n6. chrome.runtime.onSuspend.addListener 用于在插件休眠时执行一些操作\n7. chrome.windows.create 用于创建新窗口\n8. chrome.windows.onClicked.addListener 用于监听新窗口的点击事件\n9. chrome.contextMenus.create 用于创建右键菜单\n\n\n## 生命周期\n\n1. 安装/更新时\n\n  ```javascript\n  chrome.runtime.onInstalled.addListener((details) => {\n    if (details.reason === 'install') {\n      // 首次安装时的初始化\n      // 例如：创建右键菜单、设置默认配置等\n    } else if (details.reason === 'update') {\n      // 更新时的处理\n      // 例如：迁移旧数据、更新配置等\n    }\n  });\n  ```\n\n2. 启动时\n\n  ```javascript\n  chrome.runtime.onStartup.addListener(() => {\n    // 启动时的处理\n    // 例如：检查更新、恢复状态等\n  });\n  ```\n\n3. 激活/休眠\n\n  ```javascript\n  // background.js 在 Service Worker 模式下\n  chrome.runtime.onSuspend.addListener(() => {\n    // Service Worker 即将被终止时的清理工作\n    // 保存状态、清理资源等\n  });\n  ```\n\n4. 激活的时机\n\n  ```javascript\n  // 以下事件会唤醒 Service Worker：\n  // 1. 扩展安装或更新时\n  chrome.runtime.onInstalled.addListener((details) => {\n    console.log('Service Worker 被安装/更新激活');\n  });\n\n  // 2. 接收到消息时\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Service Worker 被消息激活');\n  });\n\n  // 3. 右键菜单被点击时\n  chrome.contextMenus.onClicked.addListener((info, tab) => {\n    console.log('Service Worker 被菜单点击激活');\n  });\n\n  // 4. 浏览器启动时\n  chrome.runtime.onStartup.addListener(() => {\n    console.log('Service Worker 被浏览器启动激活');\n  });\n  ```\n\n\n## github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）\n\n1. 基础配置\n\n  manifest.json  (插件配置文件)\n  ├── 定义插件权限 (permissions)\n  ├── 注册后台脚本 (background.js)\n  ├── 定义弹出窗口 (popup.html)\n  └── 配置图标等基本信息\n\n2. 设置功能\n\n  popup.html (设置界面)\n  └── popup.js (设置逻辑)\n      ├── 保存 GitHub Token\n      ├── 保存仓库所有者\n      └── 保存仓库名称\n\n2. 核心功能\n\n  background.js (后台脚本)\n  ├── 创建右键菜单\n  ├── 处理菜单点击事件\n  ├── 创建新 Issue 窗口\n  └── 打开 Issue 选择器窗口\n\n3. 创建新issue\n\n  create-issue.html (创建界面)\n  └── create-issue.js (创建逻辑)\n      ├── 加载选中的文本\n      ├── 设置 Issue 标题\n      ├── 加载标签列表\n      └── 提交创建请求\n\n4. 添加到已有的issue\n\n  issue-selector.html (选择界面)\n  └── issue-selector.js (选择和评论逻辑)\n      ├── 加载已有 Issues 列表\n      ├── 搜索过滤功能\n      ├── 显示评论表单\n      └── 提交评论请求\n\n5. 数据流向\n\n  选中文本 → background.js → chrome.storage → 功能窗口 → GitHub API\n\n\n这个是菜单右键实现的。可以做成那种悬浮在选中文字上边，就出现工具栏的话，就需要用到content-script.js 了。","slug":"谷歌插件编写","published":1,"updated":"2025-01-13T09:18:55.786Z","_id":"cm5uhmaxd002mtkug1k7ndw0c","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>配置manifest.json 文件（必需）</li>\n</ol>\n<ul>\n<li>主要是包含基础信息，权限，以及功能组件等</li>\n<li>插件的配置文件</li>\n</ul>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;manifest_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GitHub Issue Creator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;快速将选中文本添加到 GitHub Issues&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;storage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;activeTab&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;contextMenus&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scripting&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;host_permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&lt;all_urls&gt;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content_scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;matches&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;&lt;all_urls&gt;&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>     <span class=\"comment\">// 在哪些页面注入</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;css&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;content-styles.css&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 注入的样式文件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;content-script.js&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 注入的脚本文件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;run_at&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;document_end&quot;</span>       <span class=\"comment\">// 在什么时候注入</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;service_worker&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;background.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;48&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;icons/icon48.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;128&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;icons/icon128.png&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>popup相关文件（可选， 假如需要点击插件图标弹出页面）</li>\n</ol>\n<ul>\n<li>popup.html 文件：插件的弹出页面</li>\n<li>popup.js 文件：插件的弹出页面逻辑</li>\n</ul>\n<ol start=\"3\">\n<li>配置background.js 文件（可选）</li>\n</ol>\n<ul>\n<li>插件的背景脚本，用于处理插件的后台逻辑</li>\n<li>可以一直运行在后台</li>\n<li>菜单右键，快捷键等功能处理</li>\n</ul>\n<ol start=\"4\">\n<li>配置content-script.js 文件（可选，也需要配置到manifest.json 中）</li>\n</ol>\n<ul>\n<li>插件的页面脚本，用于处理插件的页面逻辑</li>\n<li>可以访问页面DOM</li>\n<li>可以访问页面JS API</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>manifest.json (配置)<br>    ↓<br>background.js (后台逻辑)<br>    ↓<br>popup.html&#x2F;js (用户界面) ←→ content-script.js (网页交互)</p>\n<h2 id=\"API-相关\"><a href=\"#API-相关\" class=\"headerlink\" title=\"API 相关\"></a>API 相关</h2><ol>\n<li>chrome.storage 类似localStorage， 但是可以跨域， 跨设备， 跨会话（local本地存储，sync同步存储，managed托管存储，大小是100kb，存储操作时异步的）</li>\n<li>chrome.runtime.sendMessage 和 chrome.runtime.onMessage.addListener 用于在插件和后台脚本之间通信（类似Electron渲染进程和主进程）</li>\n<li>chrome.runtime.onInstalled.addListener 用于在插件安装时执行一些操作</li>\n<li>chrome.runtime.onStartup.addListener 用于在插件启动时执行一些操作</li>\n<li>chrome.runtime.onConnect.addListener 用于在插件和后台脚本之间建立连接</li>\n<li>chrome.runtime.onSuspend.addListener 用于在插件休眠时执行一些操作</li>\n<li>chrome.windows.create 用于创建新窗口</li>\n<li>chrome.windows.onClicked.addListener 用于监听新窗口的点击事件</li>\n<li>chrome.contextMenus.create 用于创建右键菜单</li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li>安装&#x2F;更新时</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">details</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (details.<span class=\"property\">reason</span> === <span class=\"string\">&#x27;install&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首次安装时的初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：创建右键菜单、设置默认配置等</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (details.<span class=\"property\">reason</span> === <span class=\"string\">&#x27;update&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新时的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：迁移旧数据、更新配置等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动时</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onStartup</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 启动时的处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 例如：检查更新、恢复状态等</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>激活&#x2F;休眠</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// background.js 在 Service Worker 模式下</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onSuspend</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Service Worker 即将被终止时的清理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存状态、清理资源等</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>激活的时机</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下事件会唤醒 Service Worker：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 扩展安装或更新时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">details</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被安装/更新激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 接收到消息时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被消息激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 右键菜单被点击时</span></span><br><span class=\"line\">chrome.<span class=\"property\">contextMenus</span>.<span class=\"property\">onClicked</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">info, tab</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被菜单点击激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 浏览器启动时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onStartup</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被浏览器启动激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）\"><a href=\"#github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）\" class=\"headerlink\" title=\"github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）\"></a>github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）</h2><ol>\n<li>基础配置</li>\n</ol>\n<p>  manifest.json  (插件配置文件)<br>  ├── 定义插件权限 (permissions)<br>  ├── 注册后台脚本 (background.js)<br>  ├── 定义弹出窗口 (popup.html)<br>  └── 配置图标等基本信息</p>\n<ol start=\"2\">\n<li>设置功能</li>\n</ol>\n<p>  popup.html (设置界面)<br>  └── popup.js (设置逻辑)<br>      ├── 保存 GitHub Token<br>      ├── 保存仓库所有者<br>      └── 保存仓库名称</p>\n<ol start=\"2\">\n<li>核心功能</li>\n</ol>\n<p>  background.js (后台脚本)<br>  ├── 创建右键菜单<br>  ├── 处理菜单点击事件<br>  ├── 创建新 Issue 窗口<br>  └── 打开 Issue 选择器窗口</p>\n<ol start=\"3\">\n<li>创建新issue</li>\n</ol>\n<p>  create-issue.html (创建界面)<br>  └── create-issue.js (创建逻辑)<br>      ├── 加载选中的文本<br>      ├── 设置 Issue 标题<br>      ├── 加载标签列表<br>      └── 提交创建请求</p>\n<ol start=\"4\">\n<li>添加到已有的issue</li>\n</ol>\n<p>  issue-selector.html (选择界面)<br>  └── issue-selector.js (选择和评论逻辑)<br>      ├── 加载已有 Issues 列表<br>      ├── 搜索过滤功能<br>      ├── 显示评论表单<br>      └── 提交评论请求</p>\n<ol start=\"5\">\n<li>数据流向</li>\n</ol>\n<p>  选中文本 → background.js → chrome.storage → 功能窗口 → GitHub API</p>\n<p>这个是菜单右键实现的。可以做成那种悬浮在选中文字上边，就出现工具栏的话，就需要用到content-script.js 了。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>配置manifest.json 文件（必需）</li>\n</ol>\n<ul>\n<li>主要是包含基础信息，权限，以及功能组件等</li>\n<li>插件的配置文件</li>\n</ul>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;manifest_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GitHub Issue Creator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;快速将选中文本添加到 GitHub Issues&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;storage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;activeTab&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;contextMenus&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scripting&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;host_permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&lt;all_urls&gt;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content_scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;matches&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;&lt;all_urls&gt;&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>     <span class=\"comment\">// 在哪些页面注入</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;css&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;content-styles.css&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 注入的样式文件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;content-script.js&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>   <span class=\"comment\">// 注入的脚本文件</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;run_at&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;document_end&quot;</span>       <span class=\"comment\">// 在什么时候注入</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;service_worker&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;background.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;48&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;icons/icon48.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;128&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;icons/icon128.png&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>popup相关文件（可选， 假如需要点击插件图标弹出页面）</li>\n</ol>\n<ul>\n<li>popup.html 文件：插件的弹出页面</li>\n<li>popup.js 文件：插件的弹出页面逻辑</li>\n</ul>\n<ol start=\"3\">\n<li>配置background.js 文件（可选）</li>\n</ol>\n<ul>\n<li>插件的背景脚本，用于处理插件的后台逻辑</li>\n<li>可以一直运行在后台</li>\n<li>菜单右键，快捷键等功能处理</li>\n</ul>\n<ol start=\"4\">\n<li>配置content-script.js 文件（可选，也需要配置到manifest.json 中）</li>\n</ol>\n<ul>\n<li>插件的页面脚本，用于处理插件的页面逻辑</li>\n<li>可以访问页面DOM</li>\n<li>可以访问页面JS API</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>manifest.json (配置)<br>    ↓<br>background.js (后台逻辑)<br>    ↓<br>popup.html&#x2F;js (用户界面) ←→ content-script.js (网页交互)</p>\n<h2 id=\"API-相关\"><a href=\"#API-相关\" class=\"headerlink\" title=\"API 相关\"></a>API 相关</h2><ol>\n<li>chrome.storage 类似localStorage， 但是可以跨域， 跨设备， 跨会话（local本地存储，sync同步存储，managed托管存储，大小是100kb，存储操作时异步的）</li>\n<li>chrome.runtime.sendMessage 和 chrome.runtime.onMessage.addListener 用于在插件和后台脚本之间通信（类似Electron渲染进程和主进程）</li>\n<li>chrome.runtime.onInstalled.addListener 用于在插件安装时执行一些操作</li>\n<li>chrome.runtime.onStartup.addListener 用于在插件启动时执行一些操作</li>\n<li>chrome.runtime.onConnect.addListener 用于在插件和后台脚本之间建立连接</li>\n<li>chrome.runtime.onSuspend.addListener 用于在插件休眠时执行一些操作</li>\n<li>chrome.windows.create 用于创建新窗口</li>\n<li>chrome.windows.onClicked.addListener 用于监听新窗口的点击事件</li>\n<li>chrome.contextMenus.create 用于创建右键菜单</li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li>安装&#x2F;更新时</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">details</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (details.<span class=\"property\">reason</span> === <span class=\"string\">&#x27;install&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首次安装时的初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：创建右键菜单、设置默认配置等</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (details.<span class=\"property\">reason</span> === <span class=\"string\">&#x27;update&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新时的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如：迁移旧数据、更新配置等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动时</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onStartup</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 启动时的处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 例如：检查更新、恢复状态等</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>激活&#x2F;休眠</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// background.js 在 Service Worker 模式下</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onSuspend</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Service Worker 即将被终止时的清理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存状态、清理资源等</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>激活的时机</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下事件会唤醒 Service Worker：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 扩展安装或更新时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">details</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被安装/更新激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 接收到消息时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被消息激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 右键菜单被点击时</span></span><br><span class=\"line\">chrome.<span class=\"property\">contextMenus</span>.<span class=\"property\">onClicked</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">info, tab</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被菜单点击激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 浏览器启动时</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onStartup</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Service Worker 被浏览器启动激活&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）\"><a href=\"#github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）\" class=\"headerlink\" title=\"github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）\"></a>github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）</h2><ol>\n<li>基础配置</li>\n</ol>\n<p>  manifest.json  (插件配置文件)<br>  ├── 定义插件权限 (permissions)<br>  ├── 注册后台脚本 (background.js)<br>  ├── 定义弹出窗口 (popup.html)<br>  └── 配置图标等基本信息</p>\n<ol start=\"2\">\n<li>设置功能</li>\n</ol>\n<p>  popup.html (设置界面)<br>  └── popup.js (设置逻辑)<br>      ├── 保存 GitHub Token<br>      ├── 保存仓库所有者<br>      └── 保存仓库名称</p>\n<ol start=\"2\">\n<li>核心功能</li>\n</ol>\n<p>  background.js (后台脚本)<br>  ├── 创建右键菜单<br>  ├── 处理菜单点击事件<br>  ├── 创建新 Issue 窗口<br>  └── 打开 Issue 选择器窗口</p>\n<ol start=\"3\">\n<li>创建新issue</li>\n</ol>\n<p>  create-issue.html (创建界面)<br>  └── create-issue.js (创建逻辑)<br>      ├── 加载选中的文本<br>      ├── 设置 Issue 标题<br>      ├── 加载标签列表<br>      └── 提交创建请求</p>\n<ol start=\"4\">\n<li>添加到已有的issue</li>\n</ol>\n<p>  issue-selector.html (选择界面)<br>  └── issue-selector.js (选择和评论逻辑)<br>      ├── 加载已有 Issues 列表<br>      ├── 搜索过滤功能<br>      ├── 显示评论表单<br>      └── 提交评论请求</p>\n<ol start=\"5\">\n<li>数据流向</li>\n</ol>\n<p>  选中文本 → background.js → chrome.storage → 功能窗口 → GitHub API</p>\n<p>这个是菜单右键实现的。可以做成那种悬浮在选中文字上边，就出现工具栏的话，就需要用到content-script.js 了。</p>\n"},{"title":"路由实现","date":"2018-02-07T09:02:40.000Z","_content":"\n- history\n- hash\n- 原理\n- 实现\n- 注意点","source":"_posts/路由实现.md","raw":"---\ntitle: 路由实现\ndate: 2018-02-07 17:02:40\ntags:\n- 路由\ncategory: \n- javascript\n---\n\n- history\n- hash\n- 原理\n- 实现\n- 注意点","slug":"路由实现","published":1,"updated":"2024-03-06T03:45:42.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxe002ptkugdm497w1d","content":"<ul>\n<li>history</li>\n<li>hash</li>\n<li>原理</li>\n<li>实现</li>\n<li>注意点</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>history</li>\n<li>hash</li>\n<li>原理</li>\n<li>实现</li>\n<li>注意点</li>\n</ul>\n"},{"title":"页面布局","date":"2018-02-07T03:32:38.000Z","_content":"\n### 盒模型\n![box](/images/box_pattern.jpeg)\n```css\n\t/* content-box */\n\tbox-sizing:border-box;\n```\n故名思议就是我们在页面定义`width`以及`height`的时候如何计算。\n默认的模型`content-box`,即定义的就是content里的`width`、`height`.\nIE里的诡异模型即`border-box`，即定义的`width = content+padding+border`\n`height`同理。\n\n### flex布局\n`vertical-align`会失效\n``` css\n\tdisplay:flex;\n\t/*flex:flex-grow,flex-shrink,flex-basis*/\n\tflex: 2 2 10%;\n\t/* 属性\n\tflex-direction\n\tflex-wrap\n\tflex-flow\n\tjustify-content\n\talign-items\n\talign-content\n\t*/\n\t/*作用于item\n\torder\n\tflex-grow\n\tflex-shrink\n\tflex-basis\n\tflex\n\talign-self\n\t*/\n```\n\n### 定位\n```css\n\t/*relative|fixed|static*/\n\tposition:absolute;\n```\n`relative`相对于自身，但是自己的位置依旧霸占着\n`fixed`相对于浏览器窗口\n`absolute`相对于离他最近的有定位的父元素\n`z-index很关键`\n\n### float布局\n```css\n\t/*right|none*/\n\tfloat:left;\n```\n#### BFC\n\n#### 闭合浮动\n\n\n### 圣杯布局、双飞翼布局\n三栏布局，左右两边固定，中间自适应\n浮动+负margin\n\n\n### 响应式布局\n- Css3 Media Queries\n`max-width,min-width,max-device-width`\n```css\n\t/* 大于1200px的屏幕则这样子显示 */\n\t@media screen and (min-width:1200px){ \n    .style  {\n         background:#ccc; \n     }\n }\n```\n- link里的media来指定使用条件\n``` css\n\t<link rel= \"stylesheet\"  media= \"only screen and (-webkit-min-device-pixel-ratio: 2)\"  type= \"text/css\"  href= \"style.css\"  />\n```\n- viewport\n``` css\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n- 使用百分比定义宽度、em定义字体大小\n\n### 元素居中\n\n\n### 参考\n>[flex布局属性介绍](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n","source":"_posts/页面布局.md","raw":"---\ntitle: 页面布局\ndate: 2018-02-07 11:32:38\ntags:\n- flex\n- float \n- 前端\n- 布局\ncategory: \n- css\n---\n\n### 盒模型\n![box](/images/box_pattern.jpeg)\n```css\n\t/* content-box */\n\tbox-sizing:border-box;\n```\n故名思议就是我们在页面定义`width`以及`height`的时候如何计算。\n默认的模型`content-box`,即定义的就是content里的`width`、`height`.\nIE里的诡异模型即`border-box`，即定义的`width = content+padding+border`\n`height`同理。\n\n### flex布局\n`vertical-align`会失效\n``` css\n\tdisplay:flex;\n\t/*flex:flex-grow,flex-shrink,flex-basis*/\n\tflex: 2 2 10%;\n\t/* 属性\n\tflex-direction\n\tflex-wrap\n\tflex-flow\n\tjustify-content\n\talign-items\n\talign-content\n\t*/\n\t/*作用于item\n\torder\n\tflex-grow\n\tflex-shrink\n\tflex-basis\n\tflex\n\talign-self\n\t*/\n```\n\n### 定位\n```css\n\t/*relative|fixed|static*/\n\tposition:absolute;\n```\n`relative`相对于自身，但是自己的位置依旧霸占着\n`fixed`相对于浏览器窗口\n`absolute`相对于离他最近的有定位的父元素\n`z-index很关键`\n\n### float布局\n```css\n\t/*right|none*/\n\tfloat:left;\n```\n#### BFC\n\n#### 闭合浮动\n\n\n### 圣杯布局、双飞翼布局\n三栏布局，左右两边固定，中间自适应\n浮动+负margin\n\n\n### 响应式布局\n- Css3 Media Queries\n`max-width,min-width,max-device-width`\n```css\n\t/* 大于1200px的屏幕则这样子显示 */\n\t@media screen and (min-width:1200px){ \n    .style  {\n         background:#ccc; \n     }\n }\n```\n- link里的media来指定使用条件\n``` css\n\t<link rel= \"stylesheet\"  media= \"only screen and (-webkit-min-device-pixel-ratio: 2)\"  type= \"text/css\"  href= \"style.css\"  />\n```\n- viewport\n``` css\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n- 使用百分比定义宽度、em定义字体大小\n\n### 元素居中\n\n\n### 参考\n>[flex布局属性介绍](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n","slug":"页面布局","published":1,"updated":"2024-03-06T09:30:08.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxe002rtkughw64h3cd","content":"<h3 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h3><p><img src= \"/one_hour/img/loading.gif\" data-src=\"/one_hour/images/box_pattern.jpeg\" alt=\"box\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* content-box */</span></span><br><span class=\"line\"><span class=\"attribute\">box-sizing</span>:border-box;</span><br></pre></td></tr></table></figure>\n<p>故名思议就是我们在页面定义<code>width</code>以及<code>height</code>的时候如何计算。<br>默认的模型<code>content-box</code>,即定义的就是content里的<code>width</code>、<code>height</code>.<br>IE里的诡异模型即<code>border-box</code>，即定义的<code>width = content+padding+border</code><br><code>height</code>同理。</p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p><code>vertical-align</code>会失效</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\"><span class=\"comment\">/*flex:flex-grow,flex-shrink,flex-basis*/</span></span><br><span class=\"line\"><span class=\"attribute\">flex</span>: <span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 属性</span></span><br><span class=\"line\"><span class=\"comment\">flex-direction</span></span><br><span class=\"line\"><span class=\"comment\">flex-wrap</span></span><br><span class=\"line\"><span class=\"comment\">flex-flow</span></span><br><span class=\"line\"><span class=\"comment\">justify-content</span></span><br><span class=\"line\"><span class=\"comment\">align-items</span></span><br><span class=\"line\"><span class=\"comment\">align-content</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*作用于item</span></span><br><span class=\"line\"><span class=\"comment\">order</span></span><br><span class=\"line\"><span class=\"comment\">flex-grow</span></span><br><span class=\"line\"><span class=\"comment\">flex-shrink</span></span><br><span class=\"line\"><span class=\"comment\">flex-basis</span></span><br><span class=\"line\"><span class=\"comment\">flex</span></span><br><span class=\"line\"><span class=\"comment\">align-self</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*relative|fixed|static*/</span></span><br><span class=\"line\"><span class=\"attribute\">position</span>:absolute;</span><br></pre></td></tr></table></figure>\n<p><code>relative</code>相对于自身，但是自己的位置依旧霸占着<br><code>fixed</code>相对于浏览器窗口<br><code>absolute</code>相对于离他最近的有定位的父元素<br><code>z-index很关键</code></p>\n<h3 id=\"float布局\"><a href=\"#float布局\" class=\"headerlink\" title=\"float布局\"></a>float布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*right|none*/</span></span><br><span class=\"line\"><span class=\"attribute\">float</span><span class=\"selector-pseudo\">:left</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><h4 id=\"闭合浮动\"><a href=\"#闭合浮动\" class=\"headerlink\" title=\"闭合浮动\"></a>闭合浮动</h4><h3 id=\"圣杯布局、双飞翼布局\"><a href=\"#圣杯布局、双飞翼布局\" class=\"headerlink\" title=\"圣杯布局、双飞翼布局\"></a>圣杯布局、双飞翼布局</h3><p>三栏布局，左右两边固定，中间自适应<br>浮动+负margin</p>\n<h3 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h3><ul>\n<li>Css3 Media Queries<br><code>max-width,min-width,max-device-width</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 大于1200px的屏幕则这样子显示 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>:<span class=\"number\">1200px</span>)&#123; </span><br><span class=\"line\">   <span class=\"selector-class\">.style</span>  &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>link里的media来指定使用条件<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel= &quot;stylesheet&quot;  media= &quot;only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>)<span class=\"string\">&quot;  type= &quot;</span>text/css<span class=\"string\">&quot;  href= &quot;</span>style.css<span class=\"string\">&quot;  /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>viewport<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"attribute\">width</span>=device-<span class=\"attribute\">width</span>, initial-scale=<span class=\"number\">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用百分比定义宽度、em定义字体大小</li>\n</ul>\n<h3 id=\"元素居中\"><a href=\"#元素居中\" class=\"headerlink\" title=\"元素居中\"></a>元素居中</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">flex布局属性介绍</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h3><p><img src=\"/one_hour/images/box_pattern.jpeg\" alt=\"box\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* content-box */</span></span><br><span class=\"line\"><span class=\"attribute\">box-sizing</span>:border-box;</span><br></pre></td></tr></table></figure>\n<p>故名思议就是我们在页面定义<code>width</code>以及<code>height</code>的时候如何计算。<br>默认的模型<code>content-box</code>,即定义的就是content里的<code>width</code>、<code>height</code>.<br>IE里的诡异模型即<code>border-box</code>，即定义的<code>width = content+padding+border</code><br><code>height</code>同理。</p>\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p><code>vertical-align</code>会失效</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\"><span class=\"comment\">/*flex:flex-grow,flex-shrink,flex-basis*/</span></span><br><span class=\"line\"><span class=\"attribute\">flex</span>: <span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 属性</span></span><br><span class=\"line\"><span class=\"comment\">flex-direction</span></span><br><span class=\"line\"><span class=\"comment\">flex-wrap</span></span><br><span class=\"line\"><span class=\"comment\">flex-flow</span></span><br><span class=\"line\"><span class=\"comment\">justify-content</span></span><br><span class=\"line\"><span class=\"comment\">align-items</span></span><br><span class=\"line\"><span class=\"comment\">align-content</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*作用于item</span></span><br><span class=\"line\"><span class=\"comment\">order</span></span><br><span class=\"line\"><span class=\"comment\">flex-grow</span></span><br><span class=\"line\"><span class=\"comment\">flex-shrink</span></span><br><span class=\"line\"><span class=\"comment\">flex-basis</span></span><br><span class=\"line\"><span class=\"comment\">flex</span></span><br><span class=\"line\"><span class=\"comment\">align-self</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*relative|fixed|static*/</span></span><br><span class=\"line\"><span class=\"attribute\">position</span>:absolute;</span><br></pre></td></tr></table></figure>\n<p><code>relative</code>相对于自身，但是自己的位置依旧霸占着<br><code>fixed</code>相对于浏览器窗口<br><code>absolute</code>相对于离他最近的有定位的父元素<br><code>z-index很关键</code></p>\n<h3 id=\"float布局\"><a href=\"#float布局\" class=\"headerlink\" title=\"float布局\"></a>float布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*right|none*/</span></span><br><span class=\"line\"><span class=\"attribute\">float</span><span class=\"selector-pseudo\">:left</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><h4 id=\"闭合浮动\"><a href=\"#闭合浮动\" class=\"headerlink\" title=\"闭合浮动\"></a>闭合浮动</h4><h3 id=\"圣杯布局、双飞翼布局\"><a href=\"#圣杯布局、双飞翼布局\" class=\"headerlink\" title=\"圣杯布局、双飞翼布局\"></a>圣杯布局、双飞翼布局</h3><p>三栏布局，左右两边固定，中间自适应<br>浮动+负margin</p>\n<h3 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h3><ul>\n<li>Css3 Media Queries<br><code>max-width,min-width,max-device-width</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 大于1200px的屏幕则这样子显示 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>:<span class=\"number\">1200px</span>)&#123; </span><br><span class=\"line\">   <span class=\"selector-class\">.style</span>  &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>link里的media来指定使用条件<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel= &quot;stylesheet&quot;  media= &quot;only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>)<span class=\"string\">&quot;  type= &quot;</span>text/css<span class=\"string\">&quot;  href= &quot;</span>style.css<span class=\"string\">&quot;  /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>viewport<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"attribute\">width</span>=device-<span class=\"attribute\">width</span>, initial-scale=<span class=\"number\">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用百分比定义宽度、em定义字体大小</li>\n</ul>\n<h3 id=\"元素居中\"><a href=\"#元素居中\" class=\"headerlink\" title=\"元素居中\"></a>元素居中</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">flex布局属性介绍</a></p>\n</blockquote>\n"},{"title":"英语单词记录1","date":"2025-01-13T02:59:03.000Z","_content":"\n老外常说的I have company是啥意思？\n01\n company\n\n\n经常看美剧的同学一定遇到过一句台词：\nI have company.\n\n这是啥意思？我有一家公司吗？\n\n这么理解的话就大错特错了。\ncompany 作「公司」讲时，是可数名词。\n而可数名词不能裸奔，使用时前面要么加上a / an / the或物主代词（比如my），要么后面加s，以复数形式出现。\n\n因此「我有公司」的正确写法是：I have a company. 或者 I have companies.\n\n而I have company 中的company 是不可数名词。\n\ncompany 作不可数名词时，是「陪伴」的意思。\n图片\nI have company 直译就是：我有陪伴了。\n说人话就是：我有人陪。我有客人。\n\n我们来看两个美剧里的例子：图片Would you put on some pants? We have company.\n图片Now? You want to come over now? You have company.\n我把《绝望的主妇》这个片段剪辑下来，大家看一看~\n再比如《经济学人》一篇关于老龄化的文章有这样一句话：\nNearly half of Britons over the age of 65 say that television or pets are their main form of company.\n近一半65岁以上的英国人称陪伴自己最多的是电视机或宠物。\n很多同学经常问我：明明文章都读懂了，为什么还是做不对题？\n但如果你回头仔细精读原文，就会发现，99%的情况都是——你误以为自己读懂了文章，但其实很多细节都完全理解错了。\n其中，最容易出错的地方之一就是「熟词僻义」或者说「一词多义」。 \n\n一些看似简单的词有着你完全陌生的意思，一旦理解错，整个句子就变得不知所云。\n\n因此，我们在积累单词的时候，不仅要追求词汇的广度，也要关注词汇的深度，要把高频词的常见意思都记一记，而且要放在语境里去记忆。\n我们再回到company这个词：\ncompany 作此义讲时，还有几个高频搭配：\nenjoy one's company 喜欢某人的陪伴，喜欢和某人在一起 \nkeep sb's company 陪伴某人\nin the company of sb 和某人在一起，相当于with sb。\n\n再提醒一下大家，背单词要以词组为单位，不要一个词一个词去记，而是要一个词组、一个词组去记。\n\n背单词的时候就要把一个词常见的搭配（尤其是介词搭配）都记一记、有个印象，放在语境里才能快速识别出来。\n\n我们来看几个例句：\nI felt nervous in the company of such an important man.\n和这么一个重要人物在一起我感到很不自在。\n图片Did you tell Clara that you enjoyed the dog's company more than hers?\n图片And I was wondering if you'd like to keep her company this evening?\n\n再分享一句我很喜欢的台词：\n图片You can never be lonely with the company of a good book.\n\n再给同学们讲一讲它的同根词，大家串联起来一起记忆，事半功倍：\n\n02\n companion\n\n\ncompanion [kəmˈpænjən] 为可数名词，指「同伴，伴侣」(someone you spend a lot of time with, especially a friend)，有时候可以替换friend。\n举个BBC版《小妇人》里的例子：\n图片And she says that she needs a companion for her daughter Florence.\n图片\nAlmost as soon as I entered the house, I singled you out as the companion of my future life.\n\n我们在可爱又心酸，做纸板狗的中国大学生 | 外媒说里也遇见过这个词：\nIn an attempt to ease their woes, students across the nation have begun making handicraft animal companions out of recycled cardboard.\n为排解苦闷，全国各地的大学生开始利用废纸箱，制作手工宠物玩伴。\n\n考研英语2005年Text 1的一个选项里也出现过这个词：\n图片\n[D] more generous than their male companions.比她们的雄性同伴更慷慨\n\n03\n companionship\n\n\ncompanionship [kəmˈpænjənʃɪp] 为不可数名词，指「友谊，情谊」(Companionship is having someone you know and like with you, rather than being on your own)。\n\n与company相比，companionship 描述人与人之间更深层次的情感纽带，比如家人、朋友、恋人间的关系。\n\n而 company 既可以指家人、朋友、恋人的陪伴，也可以指临时的陪伴。\n\n我们来看几个英美剧里的例子，体会一下：\n图片Look, all I am saying is (that) wanting companionship is not shameful.\n图片\nYou live alone, Mr Knightley and I do not think it possible for a man to appreciate how much a woman needs the companionship of another woman. Emma will miss company dreadfully.\n我们在缅北诈骗集团猖獗，外媒如何报道？也遇见过这个词：\nThe financial victims of the online scams, which revolve around illusory promises of love and companionship, are global. \n这些网络骗局的受害者遍布全球。骗子会假装与受害人交朋友、谈恋爱，然后再进行诈骗。\n\n考研英语二2015年 Part B也考过这个词：\nYou may have a circle of friends who provide constant good humor, help and companionship.\n你身边可能有一个朋友圈子，给你持续提供好心情，帮助以及陪伴。\n\n04\n accompany\n\n\naccompany [əˈkʌmpəni] 为动词，后面跟人时，指「陪伴某人」，跟物时，指「伴随，与…同时发生」。\n比如《经济学人》一篇关于医疗技术的文章有这样一句话：\nAs with all new technologies, pitfalls accompany the promise.\n和所有的新技术一样，陷阱总是与希望相伴而来。\n\n这句话可以背下来，用来作为论述科技的好处到科技的坏处的过渡句。\n图片I had DJ very young, so as a child, she always accompanied me on the road.\n图片\nAunt March is very ill, so Laurie will accompany them.\n\n关于accompany 还有一个高频句式：\nA，accompanied with / by B, does sth. 表示「A，加上B，如何如何」。注意谓语动词的单复数由主语A决定。\n比如《经济学人》一篇关于中国人口下降的文章有这样一句话：\nThis relaxation—accompanied by a slew of incentives to have children, ranging from cash handouts to tax breaks and longer maternity leave—has had little impact.\n和政策一同到来的还有现金补贴、减税、产假延长等一系列生娃激励举措。但几乎并未溅起什么水花。\n我们在第5季还讲过一系列类似的表达，大家顺便复习一下：\nA, coupled with B, does sth.\nA, combined with B, does sth.\nA, paired with B, does sth.\n\naccompany sb 还可以指「为...伴奏」。\n图片Edie is going to accompany me on guitar.\n图片Not exactly. I am accompanying the first graders.\n\n05\n accompanying\n\naccompanying [əˈkʌmpəniɪŋ] 是个形容词，指「随之而来的，附带的」。\n\n我们来看个剑桥雅思7里的例子：\nThe road improvements and accompanying maintenance system had helped make the district centre accessible throughout the year.\n道路状况的改善以及配套的道路养护制度已经使得人们全年都可到达地区中心。\n再来看两个考研英语里的例子：\nFinally, the public （including other scientists） receives the new discovery and possibly accompanying technology. \n最后，公众（包括其他科学家）接受这个新发现以及可能随之而来的技术。（考研英语一 2012年 Text 3）\nNearly 40% of the roughly 350 people who responded to an accompanying poll said, they had collaborated with artists；and almost all said they would consider doing so in future.\n在大约350名接受随文所附问卷调查的人中，有近40%的人表示，他们曾与艺术家合作过；而且几乎所有人都表示他们会考虑在未来与艺术家合作。（考研英语一 2022年 Text 3）\n\n\n\n\n来源：独霸上海的妖怪\n\n\n\n","source":"_posts/英语单词记录1.md","raw":"---\ntitle: 英语单词记录1\ndate: 2025-01-13 10:59:03\ntags:\n- 英语单词\ncategory: \n- 英语\n---\n\n老外常说的I have company是啥意思？\n01\n company\n\n\n经常看美剧的同学一定遇到过一句台词：\nI have company.\n\n这是啥意思？我有一家公司吗？\n\n这么理解的话就大错特错了。\ncompany 作「公司」讲时，是可数名词。\n而可数名词不能裸奔，使用时前面要么加上a / an / the或物主代词（比如my），要么后面加s，以复数形式出现。\n\n因此「我有公司」的正确写法是：I have a company. 或者 I have companies.\n\n而I have company 中的company 是不可数名词。\n\ncompany 作不可数名词时，是「陪伴」的意思。\n图片\nI have company 直译就是：我有陪伴了。\n说人话就是：我有人陪。我有客人。\n\n我们来看两个美剧里的例子：图片Would you put on some pants? We have company.\n图片Now? You want to come over now? You have company.\n我把《绝望的主妇》这个片段剪辑下来，大家看一看~\n再比如《经济学人》一篇关于老龄化的文章有这样一句话：\nNearly half of Britons over the age of 65 say that television or pets are their main form of company.\n近一半65岁以上的英国人称陪伴自己最多的是电视机或宠物。\n很多同学经常问我：明明文章都读懂了，为什么还是做不对题？\n但如果你回头仔细精读原文，就会发现，99%的情况都是——你误以为自己读懂了文章，但其实很多细节都完全理解错了。\n其中，最容易出错的地方之一就是「熟词僻义」或者说「一词多义」。 \n\n一些看似简单的词有着你完全陌生的意思，一旦理解错，整个句子就变得不知所云。\n\n因此，我们在积累单词的时候，不仅要追求词汇的广度，也要关注词汇的深度，要把高频词的常见意思都记一记，而且要放在语境里去记忆。\n我们再回到company这个词：\ncompany 作此义讲时，还有几个高频搭配：\nenjoy one's company 喜欢某人的陪伴，喜欢和某人在一起 \nkeep sb's company 陪伴某人\nin the company of sb 和某人在一起，相当于with sb。\n\n再提醒一下大家，背单词要以词组为单位，不要一个词一个词去记，而是要一个词组、一个词组去记。\n\n背单词的时候就要把一个词常见的搭配（尤其是介词搭配）都记一记、有个印象，放在语境里才能快速识别出来。\n\n我们来看几个例句：\nI felt nervous in the company of such an important man.\n和这么一个重要人物在一起我感到很不自在。\n图片Did you tell Clara that you enjoyed the dog's company more than hers?\n图片And I was wondering if you'd like to keep her company this evening?\n\n再分享一句我很喜欢的台词：\n图片You can never be lonely with the company of a good book.\n\n再给同学们讲一讲它的同根词，大家串联起来一起记忆，事半功倍：\n\n02\n companion\n\n\ncompanion [kəmˈpænjən] 为可数名词，指「同伴，伴侣」(someone you spend a lot of time with, especially a friend)，有时候可以替换friend。\n举个BBC版《小妇人》里的例子：\n图片And she says that she needs a companion for her daughter Florence.\n图片\nAlmost as soon as I entered the house, I singled you out as the companion of my future life.\n\n我们在可爱又心酸，做纸板狗的中国大学生 | 外媒说里也遇见过这个词：\nIn an attempt to ease their woes, students across the nation have begun making handicraft animal companions out of recycled cardboard.\n为排解苦闷，全国各地的大学生开始利用废纸箱，制作手工宠物玩伴。\n\n考研英语2005年Text 1的一个选项里也出现过这个词：\n图片\n[D] more generous than their male companions.比她们的雄性同伴更慷慨\n\n03\n companionship\n\n\ncompanionship [kəmˈpænjənʃɪp] 为不可数名词，指「友谊，情谊」(Companionship is having someone you know and like with you, rather than being on your own)。\n\n与company相比，companionship 描述人与人之间更深层次的情感纽带，比如家人、朋友、恋人间的关系。\n\n而 company 既可以指家人、朋友、恋人的陪伴，也可以指临时的陪伴。\n\n我们来看几个英美剧里的例子，体会一下：\n图片Look, all I am saying is (that) wanting companionship is not shameful.\n图片\nYou live alone, Mr Knightley and I do not think it possible for a man to appreciate how much a woman needs the companionship of another woman. Emma will miss company dreadfully.\n我们在缅北诈骗集团猖獗，外媒如何报道？也遇见过这个词：\nThe financial victims of the online scams, which revolve around illusory promises of love and companionship, are global. \n这些网络骗局的受害者遍布全球。骗子会假装与受害人交朋友、谈恋爱，然后再进行诈骗。\n\n考研英语二2015年 Part B也考过这个词：\nYou may have a circle of friends who provide constant good humor, help and companionship.\n你身边可能有一个朋友圈子，给你持续提供好心情，帮助以及陪伴。\n\n04\n accompany\n\n\naccompany [əˈkʌmpəni] 为动词，后面跟人时，指「陪伴某人」，跟物时，指「伴随，与…同时发生」。\n比如《经济学人》一篇关于医疗技术的文章有这样一句话：\nAs with all new technologies, pitfalls accompany the promise.\n和所有的新技术一样，陷阱总是与希望相伴而来。\n\n这句话可以背下来，用来作为论述科技的好处到科技的坏处的过渡句。\n图片I had DJ very young, so as a child, she always accompanied me on the road.\n图片\nAunt March is very ill, so Laurie will accompany them.\n\n关于accompany 还有一个高频句式：\nA，accompanied with / by B, does sth. 表示「A，加上B，如何如何」。注意谓语动词的单复数由主语A决定。\n比如《经济学人》一篇关于中国人口下降的文章有这样一句话：\nThis relaxation—accompanied by a slew of incentives to have children, ranging from cash handouts to tax breaks and longer maternity leave—has had little impact.\n和政策一同到来的还有现金补贴、减税、产假延长等一系列生娃激励举措。但几乎并未溅起什么水花。\n我们在第5季还讲过一系列类似的表达，大家顺便复习一下：\nA, coupled with B, does sth.\nA, combined with B, does sth.\nA, paired with B, does sth.\n\naccompany sb 还可以指「为...伴奏」。\n图片Edie is going to accompany me on guitar.\n图片Not exactly. I am accompanying the first graders.\n\n05\n accompanying\n\naccompanying [əˈkʌmpəniɪŋ] 是个形容词，指「随之而来的，附带的」。\n\n我们来看个剑桥雅思7里的例子：\nThe road improvements and accompanying maintenance system had helped make the district centre accessible throughout the year.\n道路状况的改善以及配套的道路养护制度已经使得人们全年都可到达地区中心。\n再来看两个考研英语里的例子：\nFinally, the public （including other scientists） receives the new discovery and possibly accompanying technology. \n最后，公众（包括其他科学家）接受这个新发现以及可能随之而来的技术。（考研英语一 2012年 Text 3）\nNearly 40% of the roughly 350 people who responded to an accompanying poll said, they had collaborated with artists；and almost all said they would consider doing so in future.\n在大约350名接受随文所附问卷调查的人中，有近40%的人表示，他们曾与艺术家合作过；而且几乎所有人都表示他们会考虑在未来与艺术家合作。（考研英语一 2022年 Text 3）\n\n\n\n\n来源：独霸上海的妖怪\n\n\n\n","slug":"英语单词记录1","published":1,"updated":"2025-01-13T03:00:42.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxf002utkug8mk3csjc","content":"<p>老外常说的I have company是啥意思？<br>01<br> company</p>\n<p>经常看美剧的同学一定遇到过一句台词：<br>I have company.</p>\n<p>这是啥意思？我有一家公司吗？</p>\n<p>这么理解的话就大错特错了。<br>company 作「公司」讲时，是可数名词。<br>而可数名词不能裸奔，使用时前面要么加上a &#x2F; an &#x2F; the或物主代词（比如my），要么后面加s，以复数形式出现。</p>\n<p>因此「我有公司」的正确写法是：I have a company. 或者 I have companies.</p>\n<p>而I have company 中的company 是不可数名词。</p>\n<p>company 作不可数名词时，是「陪伴」的意思。<br>图片<br>I have company 直译就是：我有陪伴了。<br>说人话就是：我有人陪。我有客人。</p>\n<p>我们来看两个美剧里的例子：图片Would you put on some pants? We have company.<br>图片Now? You want to come over now? You have company.<br>我把《绝望的主妇》这个片段剪辑下来，大家看一看~<br>再比如《经济学人》一篇关于老龄化的文章有这样一句话：<br>Nearly half of Britons over the age of 65 say that television or pets are their main form of company.<br>近一半65岁以上的英国人称陪伴自己最多的是电视机或宠物。<br>很多同学经常问我：明明文章都读懂了，为什么还是做不对题？<br>但如果你回头仔细精读原文，就会发现，99%的情况都是——你误以为自己读懂了文章，但其实很多细节都完全理解错了。<br>其中，最容易出错的地方之一就是「熟词僻义」或者说「一词多义」。 </p>\n<p>一些看似简单的词有着你完全陌生的意思，一旦理解错，整个句子就变得不知所云。</p>\n<p>因此，我们在积累单词的时候，不仅要追求词汇的广度，也要关注词汇的深度，要把高频词的常见意思都记一记，而且要放在语境里去记忆。<br>我们再回到company这个词：<br>company 作此义讲时，还有几个高频搭配：<br>enjoy one’s company 喜欢某人的陪伴，喜欢和某人在一起<br>keep sb’s company 陪伴某人<br>in the company of sb 和某人在一起，相当于with sb。</p>\n<p>再提醒一下大家，背单词要以词组为单位，不要一个词一个词去记，而是要一个词组、一个词组去记。</p>\n<p>背单词的时候就要把一个词常见的搭配（尤其是介词搭配）都记一记、有个印象，放在语境里才能快速识别出来。</p>\n<p>我们来看几个例句：<br>I felt nervous in the company of such an important man.<br>和这么一个重要人物在一起我感到很不自在。<br>图片Did you tell Clara that you enjoyed the dog’s company more than hers?<br>图片And I was wondering if you’d like to keep her company this evening?</p>\n<p>再分享一句我很喜欢的台词：<br>图片You can never be lonely with the company of a good book.</p>\n<p>再给同学们讲一讲它的同根词，大家串联起来一起记忆，事半功倍：</p>\n<p>02<br> companion</p>\n<p>companion [kəmˈpænjən] 为可数名词，指「同伴，伴侣」(someone you spend a lot of time with, especially a friend)，有时候可以替换friend。<br>举个BBC版《小妇人》里的例子：<br>图片And she says that she needs a companion for her daughter Florence.<br>图片<br>Almost as soon as I entered the house, I singled you out as the companion of my future life.</p>\n<p>我们在可爱又心酸，做纸板狗的中国大学生 | 外媒说里也遇见过这个词：<br>In an attempt to ease their woes, students across the nation have begun making handicraft animal companions out of recycled cardboard.<br>为排解苦闷，全国各地的大学生开始利用废纸箱，制作手工宠物玩伴。</p>\n<p>考研英语2005年Text 1的一个选项里也出现过这个词：<br>图片<br>[D] more generous than their male companions.比她们的雄性同伴更慷慨</p>\n<p>03<br> companionship</p>\n<p>companionship [kəmˈpænjənʃɪp] 为不可数名词，指「友谊，情谊」(Companionship is having someone you know and like with you, rather than being on your own)。</p>\n<p>与company相比，companionship 描述人与人之间更深层次的情感纽带，比如家人、朋友、恋人间的关系。</p>\n<p>而 company 既可以指家人、朋友、恋人的陪伴，也可以指临时的陪伴。</p>\n<p>我们来看几个英美剧里的例子，体会一下：<br>图片Look, all I am saying is (that) wanting companionship is not shameful.<br>图片<br>You live alone, Mr Knightley and I do not think it possible for a man to appreciate how much a woman needs the companionship of another woman. Emma will miss company dreadfully.<br>我们在缅北诈骗集团猖獗，外媒如何报道？也遇见过这个词：<br>The financial victims of the online scams, which revolve around illusory promises of love and companionship, are global.<br>这些网络骗局的受害者遍布全球。骗子会假装与受害人交朋友、谈恋爱，然后再进行诈骗。</p>\n<p>考研英语二2015年 Part B也考过这个词：<br>You may have a circle of friends who provide constant good humor, help and companionship.<br>你身边可能有一个朋友圈子，给你持续提供好心情，帮助以及陪伴。</p>\n<p>04<br> accompany</p>\n<p>accompany [əˈkʌmpəni] 为动词，后面跟人时，指「陪伴某人」，跟物时，指「伴随，与…同时发生」。<br>比如《经济学人》一篇关于医疗技术的文章有这样一句话：<br>As with all new technologies, pitfalls accompany the promise.<br>和所有的新技术一样，陷阱总是与希望相伴而来。</p>\n<p>这句话可以背下来，用来作为论述科技的好处到科技的坏处的过渡句。<br>图片I had DJ very young, so as a child, she always accompanied me on the road.<br>图片<br>Aunt March is very ill, so Laurie will accompany them.</p>\n<p>关于accompany 还有一个高频句式：<br>A，accompanied with &#x2F; by B, does sth. 表示「A，加上B，如何如何」。注意谓语动词的单复数由主语A决定。<br>比如《经济学人》一篇关于中国人口下降的文章有这样一句话：<br>This relaxation—accompanied by a slew of incentives to have children, ranging from cash handouts to tax breaks and longer maternity leave—has had little impact.<br>和政策一同到来的还有现金补贴、减税、产假延长等一系列生娃激励举措。但几乎并未溅起什么水花。<br>我们在第5季还讲过一系列类似的表达，大家顺便复习一下：<br>A, coupled with B, does sth.<br>A, combined with B, does sth.<br>A, paired with B, does sth.</p>\n<p>accompany sb 还可以指「为…伴奏」。<br>图片Edie is going to accompany me on guitar.<br>图片Not exactly. I am accompanying the first graders.</p>\n<p>05<br> accompanying</p>\n<p>accompanying [əˈkʌmpəniɪŋ] 是个形容词，指「随之而来的，附带的」。</p>\n<p>我们来看个剑桥雅思7里的例子：<br>The road improvements and accompanying maintenance system had helped make the district centre accessible throughout the year.<br>道路状况的改善以及配套的道路养护制度已经使得人们全年都可到达地区中心。<br>再来看两个考研英语里的例子：<br>Finally, the public （including other scientists） receives the new discovery and possibly accompanying technology.<br>最后，公众（包括其他科学家）接受这个新发现以及可能随之而来的技术。（考研英语一 2012年 Text 3）<br>Nearly 40% of the roughly 350 people who responded to an accompanying poll said, they had collaborated with artists；and almost all said they would consider doing so in future.<br>在大约350名接受随文所附问卷调查的人中，有近40%的人表示，他们曾与艺术家合作过；而且几乎所有人都表示他们会考虑在未来与艺术家合作。（考研英语一 2022年 Text 3）</p>\n<p>来源：独霸上海的妖怪</p>\n","site":{"data":{}},"excerpt":"","more":"<p>老外常说的I have company是啥意思？<br>01<br> company</p>\n<p>经常看美剧的同学一定遇到过一句台词：<br>I have company.</p>\n<p>这是啥意思？我有一家公司吗？</p>\n<p>这么理解的话就大错特错了。<br>company 作「公司」讲时，是可数名词。<br>而可数名词不能裸奔，使用时前面要么加上a &#x2F; an &#x2F; the或物主代词（比如my），要么后面加s，以复数形式出现。</p>\n<p>因此「我有公司」的正确写法是：I have a company. 或者 I have companies.</p>\n<p>而I have company 中的company 是不可数名词。</p>\n<p>company 作不可数名词时，是「陪伴」的意思。<br>图片<br>I have company 直译就是：我有陪伴了。<br>说人话就是：我有人陪。我有客人。</p>\n<p>我们来看两个美剧里的例子：图片Would you put on some pants? We have company.<br>图片Now? You want to come over now? You have company.<br>我把《绝望的主妇》这个片段剪辑下来，大家看一看~<br>再比如《经济学人》一篇关于老龄化的文章有这样一句话：<br>Nearly half of Britons over the age of 65 say that television or pets are their main form of company.<br>近一半65岁以上的英国人称陪伴自己最多的是电视机或宠物。<br>很多同学经常问我：明明文章都读懂了，为什么还是做不对题？<br>但如果你回头仔细精读原文，就会发现，99%的情况都是——你误以为自己读懂了文章，但其实很多细节都完全理解错了。<br>其中，最容易出错的地方之一就是「熟词僻义」或者说「一词多义」。 </p>\n<p>一些看似简单的词有着你完全陌生的意思，一旦理解错，整个句子就变得不知所云。</p>\n<p>因此，我们在积累单词的时候，不仅要追求词汇的广度，也要关注词汇的深度，要把高频词的常见意思都记一记，而且要放在语境里去记忆。<br>我们再回到company这个词：<br>company 作此义讲时，还有几个高频搭配：<br>enjoy one’s company 喜欢某人的陪伴，喜欢和某人在一起<br>keep sb’s company 陪伴某人<br>in the company of sb 和某人在一起，相当于with sb。</p>\n<p>再提醒一下大家，背单词要以词组为单位，不要一个词一个词去记，而是要一个词组、一个词组去记。</p>\n<p>背单词的时候就要把一个词常见的搭配（尤其是介词搭配）都记一记、有个印象，放在语境里才能快速识别出来。</p>\n<p>我们来看几个例句：<br>I felt nervous in the company of such an important man.<br>和这么一个重要人物在一起我感到很不自在。<br>图片Did you tell Clara that you enjoyed the dog’s company more than hers?<br>图片And I was wondering if you’d like to keep her company this evening?</p>\n<p>再分享一句我很喜欢的台词：<br>图片You can never be lonely with the company of a good book.</p>\n<p>再给同学们讲一讲它的同根词，大家串联起来一起记忆，事半功倍：</p>\n<p>02<br> companion</p>\n<p>companion [kəmˈpænjən] 为可数名词，指「同伴，伴侣」(someone you spend a lot of time with, especially a friend)，有时候可以替换friend。<br>举个BBC版《小妇人》里的例子：<br>图片And she says that she needs a companion for her daughter Florence.<br>图片<br>Almost as soon as I entered the house, I singled you out as the companion of my future life.</p>\n<p>我们在可爱又心酸，做纸板狗的中国大学生 | 外媒说里也遇见过这个词：<br>In an attempt to ease their woes, students across the nation have begun making handicraft animal companions out of recycled cardboard.<br>为排解苦闷，全国各地的大学生开始利用废纸箱，制作手工宠物玩伴。</p>\n<p>考研英语2005年Text 1的一个选项里也出现过这个词：<br>图片<br>[D] more generous than their male companions.比她们的雄性同伴更慷慨</p>\n<p>03<br> companionship</p>\n<p>companionship [kəmˈpænjənʃɪp] 为不可数名词，指「友谊，情谊」(Companionship is having someone you know and like with you, rather than being on your own)。</p>\n<p>与company相比，companionship 描述人与人之间更深层次的情感纽带，比如家人、朋友、恋人间的关系。</p>\n<p>而 company 既可以指家人、朋友、恋人的陪伴，也可以指临时的陪伴。</p>\n<p>我们来看几个英美剧里的例子，体会一下：<br>图片Look, all I am saying is (that) wanting companionship is not shameful.<br>图片<br>You live alone, Mr Knightley and I do not think it possible for a man to appreciate how much a woman needs the companionship of another woman. Emma will miss company dreadfully.<br>我们在缅北诈骗集团猖獗，外媒如何报道？也遇见过这个词：<br>The financial victims of the online scams, which revolve around illusory promises of love and companionship, are global.<br>这些网络骗局的受害者遍布全球。骗子会假装与受害人交朋友、谈恋爱，然后再进行诈骗。</p>\n<p>考研英语二2015年 Part B也考过这个词：<br>You may have a circle of friends who provide constant good humor, help and companionship.<br>你身边可能有一个朋友圈子，给你持续提供好心情，帮助以及陪伴。</p>\n<p>04<br> accompany</p>\n<p>accompany [əˈkʌmpəni] 为动词，后面跟人时，指「陪伴某人」，跟物时，指「伴随，与…同时发生」。<br>比如《经济学人》一篇关于医疗技术的文章有这样一句话：<br>As with all new technologies, pitfalls accompany the promise.<br>和所有的新技术一样，陷阱总是与希望相伴而来。</p>\n<p>这句话可以背下来，用来作为论述科技的好处到科技的坏处的过渡句。<br>图片I had DJ very young, so as a child, she always accompanied me on the road.<br>图片<br>Aunt March is very ill, so Laurie will accompany them.</p>\n<p>关于accompany 还有一个高频句式：<br>A，accompanied with &#x2F; by B, does sth. 表示「A，加上B，如何如何」。注意谓语动词的单复数由主语A决定。<br>比如《经济学人》一篇关于中国人口下降的文章有这样一句话：<br>This relaxation—accompanied by a slew of incentives to have children, ranging from cash handouts to tax breaks and longer maternity leave—has had little impact.<br>和政策一同到来的还有现金补贴、减税、产假延长等一系列生娃激励举措。但几乎并未溅起什么水花。<br>我们在第5季还讲过一系列类似的表达，大家顺便复习一下：<br>A, coupled with B, does sth.<br>A, combined with B, does sth.<br>A, paired with B, does sth.</p>\n<p>accompany sb 还可以指「为…伴奏」。<br>图片Edie is going to accompany me on guitar.<br>图片Not exactly. I am accompanying the first graders.</p>\n<p>05<br> accompanying</p>\n<p>accompanying [əˈkʌmpəniɪŋ] 是个形容词，指「随之而来的，附带的」。</p>\n<p>我们来看个剑桥雅思7里的例子：<br>The road improvements and accompanying maintenance system had helped make the district centre accessible throughout the year.<br>道路状况的改善以及配套的道路养护制度已经使得人们全年都可到达地区中心。<br>再来看两个考研英语里的例子：<br>Finally, the public （including other scientists） receives the new discovery and possibly accompanying technology.<br>最后，公众（包括其他科学家）接受这个新发现以及可能随之而来的技术。（考研英语一 2012年 Text 3）<br>Nearly 40% of the roughly 350 people who responded to an accompanying poll said, they had collaborated with artists；and almost all said they would consider doing so in future.<br>在大约350名接受随文所附问卷调查的人中，有近40%的人表示，他们曾与艺术家合作过；而且几乎所有人都表示他们会考虑在未来与艺术家合作。（考研英语一 2022年 Text 3）</p>\n<p>来源：独霸上海的妖怪</p>\n"},{"title":"数据作为电信号存储的知识点","date":"2025-01-02T02:57:31.000Z","_content":"\n## 数据作为电信号存在哪里\n\n1. 最基础的存储单元：晶体管和电容器组合\n  a. 晶体管：能够放大或者控制电流的元器件。三大区域，中间有两个PN结。通过控制一个区域的电压，来达到控制其他两个区域的电流。\n  b. 电容器：能够存储电荷的元器件。两个电极，中间有一层介质。电容器通电时，电荷会在电极之间的介质积聚。\n2. 内存（RAM）\n  a. 使用DRAM（动态随机存取存储器）\n  b. 每个位（bit），由一个晶体管和电容器组成\n  c. 电容器充电表示1， 放电表示0\n  d. 需要定期刷新\n3. 怎么定期刷新？\n  a. DRAM的刷新过程是通过\"读取-重写\"操作完成的\n  b. 刷新时，内存控制器会：\n    - 读取内存单元中的数据\n    - 立即将数据重新写回该单元\n    - 这个过程会重新给电容充电，防止数据丢失\n  c. 刷新频率通常是每64ms刷新一次\n  d. 刷新过程是自动进行的，不会影响正常的数据访问\n4. 为什么需要定期刷新？\n5. 那假如我一台电脑很久很久不使用，那里边的数据按理论是会丢失的？","source":"_posts/数据作为电信号存储的知识.md","raw":"---\ntitle: 数据作为电信号存储的知识点\ndate: 2025-01-02 10:57:31\ntags:\n- 计算机原理\n- 计算机基础知识\n- cursor\ncategory: \n- 计算机\n---\n\n## 数据作为电信号存在哪里\n\n1. 最基础的存储单元：晶体管和电容器组合\n  a. 晶体管：能够放大或者控制电流的元器件。三大区域，中间有两个PN结。通过控制一个区域的电压，来达到控制其他两个区域的电流。\n  b. 电容器：能够存储电荷的元器件。两个电极，中间有一层介质。电容器通电时，电荷会在电极之间的介质积聚。\n2. 内存（RAM）\n  a. 使用DRAM（动态随机存取存储器）\n  b. 每个位（bit），由一个晶体管和电容器组成\n  c. 电容器充电表示1， 放电表示0\n  d. 需要定期刷新\n3. 怎么定期刷新？\n  a. DRAM的刷新过程是通过\"读取-重写\"操作完成的\n  b. 刷新时，内存控制器会：\n    - 读取内存单元中的数据\n    - 立即将数据重新写回该单元\n    - 这个过程会重新给电容充电，防止数据丢失\n  c. 刷新频率通常是每64ms刷新一次\n  d. 刷新过程是自动进行的，不会影响正常的数据访问\n4. 为什么需要定期刷新？\n5. 那假如我一台电脑很久很久不使用，那里边的数据按理论是会丢失的？","slug":"数据作为电信号存储的知识","published":1,"updated":"2025-01-06T08:56:40.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5uhmaxg002xtkug0xk9anj5","content":"<h2 id=\"数据作为电信号存在哪里\"><a href=\"#数据作为电信号存在哪里\" class=\"headerlink\" title=\"数据作为电信号存在哪里\"></a>数据作为电信号存在哪里</h2><ol>\n<li>最基础的存储单元：晶体管和电容器组合<br>  a. 晶体管：能够放大或者控制电流的元器件。三大区域，中间有两个PN结。通过控制一个区域的电压，来达到控制其他两个区域的电流。<br>  b. 电容器：能够存储电荷的元器件。两个电极，中间有一层介质。电容器通电时，电荷会在电极之间的介质积聚。</li>\n<li>内存（RAM）<br>  a. 使用DRAM（动态随机存取存储器）<br>  b. 每个位（bit），由一个晶体管和电容器组成<br>  c. 电容器充电表示1， 放电表示0<br>  d. 需要定期刷新</li>\n<li>怎么定期刷新？<br>  a. DRAM的刷新过程是通过”读取-重写”操作完成的<br>  b. 刷新时，内存控制器会：<ul>\n<li>读取内存单元中的数据</li>\n<li>立即将数据重新写回该单元</li>\n<li>这个过程会重新给电容充电，防止数据丢失<br>  c. 刷新频率通常是每64ms刷新一次<br>  d. 刷新过程是自动进行的，不会影响正常的数据访问</li>\n</ul>\n</li>\n<li>为什么需要定期刷新？</li>\n<li>那假如我一台电脑很久很久不使用，那里边的数据按理论是会丢失的？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据作为电信号存在哪里\"><a href=\"#数据作为电信号存在哪里\" class=\"headerlink\" title=\"数据作为电信号存在哪里\"></a>数据作为电信号存在哪里</h2><ol>\n<li>最基础的存储单元：晶体管和电容器组合<br>  a. 晶体管：能够放大或者控制电流的元器件。三大区域，中间有两个PN结。通过控制一个区域的电压，来达到控制其他两个区域的电流。<br>  b. 电容器：能够存储电荷的元器件。两个电极，中间有一层介质。电容器通电时，电荷会在电极之间的介质积聚。</li>\n<li>内存（RAM）<br>  a. 使用DRAM（动态随机存取存储器）<br>  b. 每个位（bit），由一个晶体管和电容器组成<br>  c. 电容器充电表示1， 放电表示0<br>  d. 需要定期刷新</li>\n<li>怎么定期刷新？<br>  a. DRAM的刷新过程是通过”读取-重写”操作完成的<br>  b. 刷新时，内存控制器会：<ul>\n<li>读取内存单元中的数据</li>\n<li>立即将数据重新写回该单元</li>\n<li>这个过程会重新给电容充电，防止数据丢失<br>  c. 刷新频率通常是每64ms刷新一次<br>  d. 刷新过程是自动进行的，不会影响正常的数据访问</li>\n</ul>\n</li>\n<li>为什么需要定期刷新？</li>\n<li>那假如我一台电脑很久很久不使用，那里边的数据按理论是会丢失的？</li>\n</ol>\n"},{"title":"人生如逆旅，我亦是行人","date":"2025-01-13T09:31:55.000Z","_content":"\n这句居然是出自《临江仙·送钱穆父》，我居然不知道。（而且ai还告诉我错的信息，太太太离谱了）\n\n\n逆旅是旅馆，旅店。\n\n我：哈哈哈哈哈人生原来就是黑盒游戏，我只是里边的npc\nAI：哈哈，有趣的类比！让我们延伸一下这个想法：\n游戏视角：\n人生 = 开放世界游戏\n- 每个人都是主角\n- 也都是别人的NPC\n- 没有攻略和存档\n- 实时渲染，无法倒带\n\nNPC的觉醒\n- 我们都以为自己是主角\n- 其实也都是别人故事里的配角\n- 每个NPC都有自己的故事线\n- 每个人都在演绎自己的剧情\n\n游戏特点：\n- 无法预知剧情\n- 没有存档点\n- 选择会影响结局\n- 随机事件很多\n\n游戏攻略：（这个自动生成居然给我生成一个：没有！！！哈哈哈哈哈它太会了\n- 享受过程\n- 善待他人\n- 保持好奇\n- 勇于探索\n\n我： 哈哈哈哈哈你说得对，开放世界，你想把什么当成主线都可以\n\n游戏特色：\n自由度MAX：\n- 随时切换主线\n- 支线任务无限\n- 剧情可以重写\n- 结局由你决定\n\n游戏提示：\n- 没有\"最佳路线\"\n- 每个选择都有意义\n- 失败也是游戏内容\n- 享受探索的过程","source":"_posts/人生如逆旅，我亦是行人.md","raw":"---\ntitle: 人生如逆旅，我亦是行人\ndate: 2025-01-13 17:31:55\ntags:\n---\n\n这句居然是出自《临江仙·送钱穆父》，我居然不知道。（而且ai还告诉我错的信息，太太太离谱了）\n\n\n逆旅是旅馆，旅店。\n\n我：哈哈哈哈哈人生原来就是黑盒游戏，我只是里边的npc\nAI：哈哈，有趣的类比！让我们延伸一下这个想法：\n游戏视角：\n人生 = 开放世界游戏\n- 每个人都是主角\n- 也都是别人的NPC\n- 没有攻略和存档\n- 实时渲染，无法倒带\n\nNPC的觉醒\n- 我们都以为自己是主角\n- 其实也都是别人故事里的配角\n- 每个NPC都有自己的故事线\n- 每个人都在演绎自己的剧情\n\n游戏特点：\n- 无法预知剧情\n- 没有存档点\n- 选择会影响结局\n- 随机事件很多\n\n游戏攻略：（这个自动生成居然给我生成一个：没有！！！哈哈哈哈哈它太会了\n- 享受过程\n- 善待他人\n- 保持好奇\n- 勇于探索\n\n我： 哈哈哈哈哈你说得对，开放世界，你想把什么当成主线都可以\n\n游戏特色：\n自由度MAX：\n- 随时切换主线\n- 支线任务无限\n- 剧情可以重写\n- 结局由你决定\n\n游戏提示：\n- 没有\"最佳路线\"\n- 每个选择都有意义\n- 失败也是游戏内容\n- 享受探索的过程","slug":"人生如逆旅，我亦是行人","published":1,"updated":"2025-01-13T09:43:32.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5w6qps40000egugavmp1cyp","content":"<p>这句居然是出自《临江仙·送钱穆父》，我居然不知道。（而且ai还告诉我错的信息，太太太离谱了）</p>\n<p>逆旅是旅馆，旅店。</p>\n<p>我：哈哈哈哈哈人生原来就是黑盒游戏，我只是里边的npc<br>AI：哈哈，有趣的类比！让我们延伸一下这个想法：<br>游戏视角：<br>人生 &#x3D; 开放世界游戏</p>\n<ul>\n<li>每个人都是主角</li>\n<li>也都是别人的NPC</li>\n<li>没有攻略和存档</li>\n<li>实时渲染，无法倒带</li>\n</ul>\n<p>NPC的觉醒</p>\n<ul>\n<li>我们都以为自己是主角</li>\n<li>其实也都是别人故事里的配角</li>\n<li>每个NPC都有自己的故事线</li>\n<li>每个人都在演绎自己的剧情</li>\n</ul>\n<p>游戏特点：</p>\n<ul>\n<li>无法预知剧情</li>\n<li>没有存档点</li>\n<li>选择会影响结局</li>\n<li>随机事件很多</li>\n</ul>\n<p>游戏攻略：（这个自动生成居然给我生成一个：没有！！！哈哈哈哈哈它太会了</p>\n<ul>\n<li>享受过程</li>\n<li>善待他人</li>\n<li>保持好奇</li>\n<li>勇于探索</li>\n</ul>\n<p>我： 哈哈哈哈哈你说得对，开放世界，你想把什么当成主线都可以</p>\n<p>游戏特色：<br>自由度MAX：</p>\n<ul>\n<li>随时切换主线</li>\n<li>支线任务无限</li>\n<li>剧情可以重写</li>\n<li>结局由你决定</li>\n</ul>\n<p>游戏提示：</p>\n<ul>\n<li>没有”最佳路线”</li>\n<li>每个选择都有意义</li>\n<li>失败也是游戏内容</li>\n<li>享受探索的过程</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这句居然是出自《临江仙·送钱穆父》，我居然不知道。（而且ai还告诉我错的信息，太太太离谱了）</p>\n<p>逆旅是旅馆，旅店。</p>\n<p>我：哈哈哈哈哈人生原来就是黑盒游戏，我只是里边的npc<br>AI：哈哈，有趣的类比！让我们延伸一下这个想法：<br>游戏视角：<br>人生 &#x3D; 开放世界游戏</p>\n<ul>\n<li>每个人都是主角</li>\n<li>也都是别人的NPC</li>\n<li>没有攻略和存档</li>\n<li>实时渲染，无法倒带</li>\n</ul>\n<p>NPC的觉醒</p>\n<ul>\n<li>我们都以为自己是主角</li>\n<li>其实也都是别人故事里的配角</li>\n<li>每个NPC都有自己的故事线</li>\n<li>每个人都在演绎自己的剧情</li>\n</ul>\n<p>游戏特点：</p>\n<ul>\n<li>无法预知剧情</li>\n<li>没有存档点</li>\n<li>选择会影响结局</li>\n<li>随机事件很多</li>\n</ul>\n<p>游戏攻略：（这个自动生成居然给我生成一个：没有！！！哈哈哈哈哈它太会了</p>\n<ul>\n<li>享受过程</li>\n<li>善待他人</li>\n<li>保持好奇</li>\n<li>勇于探索</li>\n</ul>\n<p>我： 哈哈哈哈哈你说得对，开放世界，你想把什么当成主线都可以</p>\n<p>游戏特色：<br>自由度MAX：</p>\n<ul>\n<li>随时切换主线</li>\n<li>支线任务无限</li>\n<li>剧情可以重写</li>\n<li>结局由你决定</li>\n</ul>\n<p>游戏提示：</p>\n<ul>\n<li>没有”最佳路线”</li>\n<li>每个选择都有意义</li>\n<li>失败也是游戏内容</li>\n<li>享受探索的过程</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm5uhmavm0001tkug4rjr8wiy","category_id":"cm5uhmavq0004tkugc6tfa13a","_id":"cm5uhmavv000htkugfeu96g6t"},{"post_id":"cm5uhmavp0003tkugfdxeg4nz","category_id":"cm5uhmavu000ctkuger1lbggf","_id":"cm5uhmavz000otkug9qdw6tlz"},{"post_id":"cm5uhmavr0007tkugd69ea86l","category_id":"cm5uhmavu000ctkuger1lbggf","_id":"cm5uhmaw2000ttkughjvg66bp"},{"post_id":"cm5uhmavs0009tkugatnq4573","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaw3000ztkuggs0y5vxc"},{"post_id":"cm5uhmavt000btkug0zmn6qge","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaw50014tkug5n0zfh2l"},{"post_id":"cm5uhmavu000ftkug8e2iexes","category_id":"cm5uhmaw3000ytkugcg5eg03b","_id":"cm5uhmaw50019tkugc18cdf9r"},{"post_id":"cm5uhmaw40013tkug7k5s0kda","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaw7001btkug1ee96bh0"},{"post_id":"cm5uhmavv000gtkugeff086or","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaw7001etkug3sc7763d"},{"post_id":"cm5uhmavx000ktkugbbt2g4rc","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaw8001itkughxlj4455"},{"post_id":"cm5uhmavy000mtkug4g1uez1e","category_id":"cm5uhmaw7001dtkug093cdhmi","_id":"cm5uhmaw8001ltkugdfac68hk"},{"post_id":"cm5uhmavz000qtkuga0rd3qy7","category_id":"cm5uhmaw8001jtkug0s6n23it","_id":"cm5uhmaw9001ptkugbyva6px6"},{"post_id":"cm5uhmaw0000stkughh4wby0p","category_id":"cm5uhmaw8001mtkug5ips03v5","_id":"cm5uhmawb001ttkug7if84fgh"},{"post_id":"cm5uhmaw2000wtkug4wdzek2u","category_id":"cm5uhmaw9001qtkug63hbalq5","_id":"cm5uhmawc001xtkugcl17eslz"},{"post_id":"cm5uhmaw2000xtkugd9bxa2ai","category_id":"cm5uhmawb001utkugdcm4avne","_id":"cm5uhmawe0022tkugh3g63b6i"},{"post_id":"cm5uhmaw30010tkug0lrl4ywc","category_id":"cm5uhmawc001ztkugg54452z0","_id":"cm5uhmawe0025tkuge7v7eb06"},{"post_id":"cm5uhmax8002htkugazt6hx9f","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaxd002ntkug6j7idxwo"},{"post_id":"cm5uhmaxa002ktkug75fv9ise","category_id":"cm5uhmaw8001mtkug5ips03v5","_id":"cm5uhmaxe002qtkug7wnxcn7o"},{"post_id":"cm5uhmaxb002ltkugf6kv1na0","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaxf002stkug3eh2aa15"},{"post_id":"cm5uhmax7002gtkuggmj55h3q","category_id":"cm5uhmax9002itkug4r0gbvy6","_id":"cm5uhmaxg002vtkugfvsaghnx"},{"post_id":"cm5uhmaxd002mtkug1k7ndw0c","category_id":"cm5uhmawc001ztkugg54452z0","_id":"cm5uhmaxh002ytkug4p8q72tb"},{"post_id":"cm5uhmaxe002ptkugdm497w1d","category_id":"cm5uhmavy000ntkugdjoq50qz","_id":"cm5uhmaxi0032tkug9v0z4pzc"},{"post_id":"cm5uhmaxe002rtkughw64h3cd","category_id":"cm5uhmavu000ctkuger1lbggf","_id":"cm5uhmaxj0034tkug0r1q06lw"},{"post_id":"cm5uhmaxg002xtkug0xk9anj5","category_id":"cm5uhmawc001ztkugg54452z0","_id":"cm5uhmaxj0037tkugax4l6zhm"},{"post_id":"cm5uhmaxf002utkug8mk3csjc","category_id":"cm5uhmaxh0031tkugh7ia1up5","_id":"cm5uhmaxk0039tkug685w4bea"}],"PostTag":[{"post_id":"cm5uhmavm0001tkug4rjr8wiy","tag_id":"cm5uhmavq0005tkug34gl0mqy","_id":"cm5uhmavu000etkug8k350d0f"},{"post_id":"cm5uhmavp0003tkugfdxeg4nz","tag_id":"cm5uhmavu000dtkuggg5s8ynn","_id":"cm5uhmavy000ltkug1l5e6k42"},{"post_id":"cm5uhmavr0007tkugd69ea86l","tag_id":"cm5uhmavw000jtkug0g5xdk20","_id":"cm5uhmaw0000rtkug0dyyfnwf"},{"post_id":"cm5uhmavs0009tkugatnq4573","tag_id":"cm5uhmavz000ptkugem52f9ku","_id":"cm5uhmaw40012tkug7rhr7mcd"},{"post_id":"cm5uhmavs0009tkugatnq4573","tag_id":"cm5uhmaw2000vtkugagh52duj","_id":"cm5uhmaw50016tkug4o8o5zta"},{"post_id":"cm5uhmavt000btkug0zmn6qge","tag_id":"cm5uhmavz000ptkugem52f9ku","_id":"cm5uhmaw7001ctkuga7vbdnv2"},{"post_id":"cm5uhmavt000btkug0zmn6qge","tag_id":"cm5uhmaw50017tkug6lt52y4u","_id":"cm5uhmaw7001ftkug05nz3qxv"},{"post_id":"cm5uhmavu000ftkug8e2iexes","tag_id":"cm5uhmaw6001atkugdzg086sa","_id":"cm5uhmaw8001htkug7e3wa112"},{"post_id":"cm5uhmavv000gtkugeff086or","tag_id":"cm5uhmavz000ptkugem52f9ku","_id":"cm5uhmaw9001otkug3hz53bfb"},{"post_id":"cm5uhmavv000gtkugeff086or","tag_id":"cm5uhmaw8001ktkug1wtma7ow","_id":"cm5uhmawb001rtkug60g5afdn"},{"post_id":"cm5uhmavx000ktkugbbt2g4rc","tag_id":"cm5uhmavz000ptkugem52f9ku","_id":"cm5uhmawc001wtkugfivy4mr6"},{"post_id":"cm5uhmavx000ktkugbbt2g4rc","tag_id":"cm5uhmawb001stkuga7s99avn","_id":"cm5uhmawc001ytkug2el1481e"},{"post_id":"cm5uhmavy000mtkug4g1uez1e","tag_id":"cm5uhmawc001vtkug6bne0i68","_id":"cm5uhmawd0021tkugd0po8wh9"},{"post_id":"cm5uhmavz000qtkuga0rd3qy7","tag_id":"cm5uhmawd0020tkugb5k08p2f","_id":"cm5uhmawe0024tkug2n4l13xx"},{"post_id":"cm5uhmaw0000stkughh4wby0p","tag_id":"cm5uhmawe0023tkugcvrg066t","_id":"cm5uhmawe0027tkug9lnbgjaq"},{"post_id":"cm5uhmaw2000wtkug4wdzek2u","tag_id":"cm5uhmawe0026tkugf2mac556","_id":"cm5uhmawf0029tkughq9y5ajh"},{"post_id":"cm5uhmaw2000xtkugd9bxa2ai","tag_id":"cm5uhmawe0028tkug536n02nf","_id":"cm5uhmawf002btkugd6oe2s9h"},{"post_id":"cm5uhmaw30010tkug0lrl4ywc","tag_id":"cm5uhmawf002atkug1qu46rce","_id":"cm5uhmawg002dtkugcr911ze2"},{"post_id":"cm5uhmaw40013tkug7k5s0kda","tag_id":"cm5uhmavz000ptkugem52f9ku","_id":"cm5uhmawg002etkugf7zid46d"},{"post_id":"cm5uhmaw40013tkug7k5s0kda","tag_id":"cm5uhmawf002ctkug5jwc2a7m","_id":"cm5uhmawg002ftkug5yaz51vr"},{"post_id":"cm5uhmax7002gtkuggmj55h3q","tag_id":"cm5uhmawc001vtkug6bne0i68","_id":"cm5uhmaxg002wtkug842j21o8"},{"post_id":"cm5uhmax7002gtkuggmj55h3q","tag_id":"cm5uhmaxa002jtkugg7i34vky","_id":"cm5uhmaxh002ztkug55gp4obp"},{"post_id":"cm5uhmax7002gtkuggmj55h3q","tag_id":"cm5uhmaxd002otkug4ewz7nes","_id":"cm5uhmaxi0033tkugf0uyfzzr"},{"post_id":"cm5uhmax8002htkugazt6hx9f","tag_id":"cm5uhmaxf002ttkug2mwkdsf7","_id":"cm5uhmaxj0035tkug2lfi4dpv"},{"post_id":"cm5uhmaxa002ktkug75fv9ise","tag_id":"cm5uhmaxh0030tkug5wps3n7e","_id":"cm5uhmaxk0038tkug3ki48jx8"},{"post_id":"cm5uhmaxb002ltkugf6kv1na0","tag_id":"cm5uhmaxj0036tkug2sdx8w7s","_id":"cm5uhmaxl003btkug4t9f1iha"},{"post_id":"cm5uhmaxd002mtkug1k7ndw0c","tag_id":"cm5uhmaxk003atkug6ftb7p01","_id":"cm5uhmaxm003etkuggtu827zq"},{"post_id":"cm5uhmaxd002mtkug1k7ndw0c","tag_id":"cm5uhmaxl003ctkuggrg3g2tz","_id":"cm5uhmaxm003ftkugftw35nti"},{"post_id":"cm5uhmaxe002ptkugdm497w1d","tag_id":"cm5uhmaxl003dtkugb03gbh0h","_id":"cm5uhmaxm003htkug74nya807"},{"post_id":"cm5uhmaxe002rtkughw64h3cd","tag_id":"cm5uhmaxm003gtkugdrml1x04","_id":"cm5uhmaxn003mtkug50ana7f2"},{"post_id":"cm5uhmaxe002rtkughw64h3cd","tag_id":"cm5uhmaxm003itkugam133sk7","_id":"cm5uhmaxn003ntkug2bgccztb"},{"post_id":"cm5uhmaxe002rtkughw64h3cd","tag_id":"cm5uhmaxn003jtkughusl3gc7","_id":"cm5uhmaxo003ptkug7ssea6vp"},{"post_id":"cm5uhmaxe002rtkughw64h3cd","tag_id":"cm5uhmaxn003ktkugdsl397g6","_id":"cm5uhmaxo003qtkugbsw16yid"},{"post_id":"cm5uhmaxf002utkug8mk3csjc","tag_id":"cm5uhmaxn003ltkug1x60fhin","_id":"cm5uhmaxo003stkughgiz3a6p"},{"post_id":"cm5uhmaxg002xtkug0xk9anj5","tag_id":"cm5uhmaxn003otkug6c4wavdl","_id":"cm5uhmaxp003utkug9tcxgnm1"},{"post_id":"cm5uhmaxg002xtkug0xk9anj5","tag_id":"cm5uhmaxo003rtkug72m2dldq","_id":"cm5uhmaxp003vtkugb63c0yi0"},{"post_id":"cm5uhmaxg002xtkug0xk9anj5","tag_id":"cm5uhmaxl003ctkuggrg3g2tz","_id":"cm5uhmaxp003wtkug6828bjws"}],"Tag":[{"name":"cron","_id":"cm5uhmavq0005tkug34gl0mqy"},{"name":"奇淫技巧","_id":"cm5uhmavu000dtkuggg5s8ynn"},{"name":"基础属性","_id":"cm5uhmavw000jtkug0g5xdk20"},{"name":"js","_id":"cm5uhmavz000ptkugem52f9ku"},{"name":"this","_id":"cm5uhmaw2000vtkugagh52duj"},{"name":"原型链","_id":"cm5uhmaw50017tkug6lt52y4u"},{"name":"test","_id":"cm5uhmaw6001atkugdzg086sa"},{"name":"异步编程","_id":"cm5uhmaw8001ktkug1wtma7ow"},{"name":"闭包","_id":"cm5uhmawb001stkuga7s99avn"},{"name":"debug","_id":"cm5uhmawc001vtkug6bne0i68"},{"name":"webpack","_id":"cm5uhmawd0020tkugb5k08p2f"},{"name":"图片","_id":"cm5uhmawe0023tkugcvrg066t"},{"name":"web安全","_id":"cm5uhmawe0026tkugf2mac556"},{"name":"数据结构","_id":"cm5uhmawe0028tkug536n02nf"},{"name":"数据分析","_id":"cm5uhmawf002atkug1qu46rce"},{"name":"事件流","_id":"cm5uhmawf002ctkug5jwc2a7m"},{"name":"测试","_id":"cm5uhmaxa002jtkugg7i34vky"},{"name":"自动化","_id":"cm5uhmaxd002otkug4ewz7nes"},{"name":"脚手架","_id":"cm5uhmaxf002ttkug2mwkdsf7"},{"name":"http","_id":"cm5uhmaxh0030tkug5wps3n7e"},{"name":"跨域","_id":"cm5uhmaxj0036tkug2sdx8w7s"},{"name":"谷歌插件","_id":"cm5uhmaxk003atkug6ftb7p01"},{"name":"cursor","_id":"cm5uhmaxl003ctkuggrg3g2tz"},{"name":"路由","_id":"cm5uhmaxl003dtkugb03gbh0h"},{"name":"flex","_id":"cm5uhmaxm003gtkugdrml1x04"},{"name":"float","_id":"cm5uhmaxm003itkugam133sk7"},{"name":"前端","_id":"cm5uhmaxn003jtkughusl3gc7"},{"name":"布局","_id":"cm5uhmaxn003ktkugdsl397g6"},{"name":"英语单词","_id":"cm5uhmaxn003ltkug1x60fhin"},{"name":"计算机原理","_id":"cm5uhmaxn003otkug6c4wavdl"},{"name":"计算机基础知识","_id":"cm5uhmaxo003rtkug72m2dldq"}]}}