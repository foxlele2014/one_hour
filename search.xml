<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>人生如逆旅，我亦是行人</title>
      <link href="/one_hour/2025/01/13/%E4%BA%BA%E7%94%9F%E5%A6%82%E9%80%86%E6%97%85%EF%BC%8C%E6%88%91%E4%BA%A6%E6%98%AF%E8%A1%8C%E4%BA%BA/"/>
      <url>/one_hour/2025/01/13/%E4%BA%BA%E7%94%9F%E5%A6%82%E9%80%86%E6%97%85%EF%BC%8C%E6%88%91%E4%BA%A6%E6%98%AF%E8%A1%8C%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>这句居然是出自《临江仙·送钱穆父》，我居然不知道。（而且ai还告诉我错的信息，太太太离谱了）</p><p>逆旅是旅馆，旅店。</p><p>我：哈哈哈哈哈人生原来就是黑盒游戏，我只是里边的npc<br>AI：哈哈，有趣的类比！让我们延伸一下这个想法：<br>游戏视角：<br>人生 &#x3D; 开放世界游戏</p><ul><li>每个人都是主角</li><li>也都是别人的NPC</li><li>没有攻略和存档</li><li>实时渲染，无法倒带</li></ul><p>NPC的觉醒</p><ul><li>我们都以为自己是主角</li><li>其实也都是别人故事里的配角</li><li>每个NPC都有自己的故事线</li><li>每个人都在演绎自己的剧情</li></ul><p>游戏特点：</p><ul><li>无法预知剧情</li><li>没有存档点</li><li>选择会影响结局</li><li>随机事件很多</li></ul><p>游戏攻略：（这个自动生成居然给我生成一个：没有！！！哈哈哈哈哈它太会了</p><ul><li>享受过程</li><li>善待他人</li><li>保持好奇</li><li>勇于探索</li></ul><p>我： 哈哈哈哈哈你说得对，开放世界，你想把什么当成主线都可以</p><p>游戏特色：<br>自由度MAX：</p><ul><li>随时切换主线</li><li>支线任务无限</li><li>剧情可以重写</li><li>结局由你决定</li></ul><p>游戏提示：</p><ul><li>没有”最佳路线”</li><li>每个选择都有意义</li><li>失败也是游戏内容</li><li>享受探索的过程</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据分析的学习路径</title>
      <link href="/one_hour/2025/01/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
      <url>/one_hour/2025/01/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><ol><li>数据的收集和预处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：文本数据处理</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_text</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 分词</span></span><br><span class="line">    tokens = nltk.word_tokenize(text)</span><br><span class="line">    <span class="comment"># 词性标注</span></span><br><span class="line">    tagged = nltk.pos_tag(tokens)</span><br><span class="line">    <span class="keyword">return</span> tagged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取语料库</span></span><br><span class="line">  data = pd.read_csv(<span class="string">&#x27;corpus.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>语法规则分析</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计语法模式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_patterns</span>(<span class="params">sentences</span>):</span><br><span class="line">    patterns = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> sentences:</span><br><span class="line">        <span class="comment"># 例如：分析 &quot;is + article + noun&quot; 模式</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;is a teacher&quot;</span> <span class="keyword">in</span> sent:</span><br><span class="line">            patterns[<span class="string">&#x27;is_a_noun&#x27;</span>] = patterns.get(<span class="string">&#x27;is_a_noun&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> patterns</span><br></pre></td></tr></table></figure><ol start="3"><li>机器学习模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本向量化</span></span><br><span class="line">vectorizer = TfidfVectorizer()</span><br><span class="line">X = vectorizer.fit_transform(texts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练测试集分割</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>常用工具和库：</li></ol><p>数据处理：Pandas, NumPy<br>文本处理：NLTK, SpaCy<br>机器学习：Scikit-learn<br>深度学习：PyTorch, TensorFlow</p><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><ol><li>网络爬虫采集</li><li>官网开放数据集<br>Common Crawl（网页数据）<br>Wikipedia dumps（维基百科数据）<br>各国政府开放数据平台<br>研究机构发布的语料库</li><li>付费数据服务<br>API 服务<br>数据供应商<br>专业数据平台</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词记录1</title>
      <link href="/one_hour/2025/01/13/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E8%AE%B0%E5%BD%951/"/>
      <url>/one_hour/2025/01/13/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<p>老外常说的I have company是啥意思？<br>01<br> company</p><p>经常看美剧的同学一定遇到过一句台词：<br>I have company.</p><p>这是啥意思？我有一家公司吗？</p><p>这么理解的话就大错特错了。<br>company 作「公司」讲时，是可数名词。<br>而可数名词不能裸奔，使用时前面要么加上a &#x2F; an &#x2F; the或物主代词（比如my），要么后面加s，以复数形式出现。</p><p>因此「我有公司」的正确写法是：I have a company. 或者 I have companies.</p><p>而I have company 中的company 是不可数名词。</p><p>company 作不可数名词时，是「陪伴」的意思。<br>图片<br>I have company 直译就是：我有陪伴了。<br>说人话就是：我有人陪。我有客人。</p><p>我们来看两个美剧里的例子：图片Would you put on some pants? We have company.<br>图片Now? You want to come over now? You have company.<br>我把《绝望的主妇》这个片段剪辑下来，大家看一看~<br>再比如《经济学人》一篇关于老龄化的文章有这样一句话：<br>Nearly half of Britons over the age of 65 say that television or pets are their main form of company.<br>近一半65岁以上的英国人称陪伴自己最多的是电视机或宠物。<br>很多同学经常问我：明明文章都读懂了，为什么还是做不对题？<br>但如果你回头仔细精读原文，就会发现，99%的情况都是——你误以为自己读懂了文章，但其实很多细节都完全理解错了。<br>其中，最容易出错的地方之一就是「熟词僻义」或者说「一词多义」。 </p><p>一些看似简单的词有着你完全陌生的意思，一旦理解错，整个句子就变得不知所云。</p><p>因此，我们在积累单词的时候，不仅要追求词汇的广度，也要关注词汇的深度，要把高频词的常见意思都记一记，而且要放在语境里去记忆。<br>我们再回到company这个词：<br>company 作此义讲时，还有几个高频搭配：<br>enjoy one’s company 喜欢某人的陪伴，喜欢和某人在一起<br>keep sb’s company 陪伴某人<br>in the company of sb 和某人在一起，相当于with sb。</p><p>再提醒一下大家，背单词要以词组为单位，不要一个词一个词去记，而是要一个词组、一个词组去记。</p><p>背单词的时候就要把一个词常见的搭配（尤其是介词搭配）都记一记、有个印象，放在语境里才能快速识别出来。</p><p>我们来看几个例句：<br>I felt nervous in the company of such an important man.<br>和这么一个重要人物在一起我感到很不自在。<br>图片Did you tell Clara that you enjoyed the dog’s company more than hers?<br>图片And I was wondering if you’d like to keep her company this evening?</p><p>再分享一句我很喜欢的台词：<br>图片You can never be lonely with the company of a good book.</p><p>再给同学们讲一讲它的同根词，大家串联起来一起记忆，事半功倍：</p><p>02<br> companion</p><p>companion [kəmˈpænjən] 为可数名词，指「同伴，伴侣」(someone you spend a lot of time with, especially a friend)，有时候可以替换friend。<br>举个BBC版《小妇人》里的例子：<br>图片And she says that she needs a companion for her daughter Florence.<br>图片<br>Almost as soon as I entered the house, I singled you out as the companion of my future life.</p><p>我们在可爱又心酸，做纸板狗的中国大学生 | 外媒说里也遇见过这个词：<br>In an attempt to ease their woes, students across the nation have begun making handicraft animal companions out of recycled cardboard.<br>为排解苦闷，全国各地的大学生开始利用废纸箱，制作手工宠物玩伴。</p><p>考研英语2005年Text 1的一个选项里也出现过这个词：<br>图片<br>[D] more generous than their male companions.比她们的雄性同伴更慷慨</p><p>03<br> companionship</p><p>companionship [kəmˈpænjənʃɪp] 为不可数名词，指「友谊，情谊」(Companionship is having someone you know and like with you, rather than being on your own)。</p><p>与company相比，companionship 描述人与人之间更深层次的情感纽带，比如家人、朋友、恋人间的关系。</p><p>而 company 既可以指家人、朋友、恋人的陪伴，也可以指临时的陪伴。</p><p>我们来看几个英美剧里的例子，体会一下：<br>图片Look, all I am saying is (that) wanting companionship is not shameful.<br>图片<br>You live alone, Mr Knightley and I do not think it possible for a man to appreciate how much a woman needs the companionship of another woman. Emma will miss company dreadfully.<br>我们在缅北诈骗集团猖獗，外媒如何报道？也遇见过这个词：<br>The financial victims of the online scams, which revolve around illusory promises of love and companionship, are global.<br>这些网络骗局的受害者遍布全球。骗子会假装与受害人交朋友、谈恋爱，然后再进行诈骗。</p><p>考研英语二2015年 Part B也考过这个词：<br>You may have a circle of friends who provide constant good humor, help and companionship.<br>你身边可能有一个朋友圈子，给你持续提供好心情，帮助以及陪伴。</p><p>04<br> accompany</p><p>accompany [əˈkʌmpəni] 为动词，后面跟人时，指「陪伴某人」，跟物时，指「伴随，与…同时发生」。<br>比如《经济学人》一篇关于医疗技术的文章有这样一句话：<br>As with all new technologies, pitfalls accompany the promise.<br>和所有的新技术一样，陷阱总是与希望相伴而来。</p><p>这句话可以背下来，用来作为论述科技的好处到科技的坏处的过渡句。<br>图片I had DJ very young, so as a child, she always accompanied me on the road.<br>图片<br>Aunt March is very ill, so Laurie will accompany them.</p><p>关于accompany 还有一个高频句式：<br>A，accompanied with &#x2F; by B, does sth. 表示「A，加上B，如何如何」。注意谓语动词的单复数由主语A决定。<br>比如《经济学人》一篇关于中国人口下降的文章有这样一句话：<br>This relaxation—accompanied by a slew of incentives to have children, ranging from cash handouts to tax breaks and longer maternity leave—has had little impact.<br>和政策一同到来的还有现金补贴、减税、产假延长等一系列生娃激励举措。但几乎并未溅起什么水花。<br>我们在第5季还讲过一系列类似的表达，大家顺便复习一下：<br>A, coupled with B, does sth.<br>A, combined with B, does sth.<br>A, paired with B, does sth.</p><p>accompany sb 还可以指「为…伴奏」。<br>图片Edie is going to accompany me on guitar.<br>图片Not exactly. I am accompanying the first graders.</p><p>05<br> accompanying</p><p>accompanying [əˈkʌmpəniɪŋ] 是个形容词，指「随之而来的，附带的」。</p><p>我们来看个剑桥雅思7里的例子：<br>The road improvements and accompanying maintenance system had helped make the district centre accessible throughout the year.<br>道路状况的改善以及配套的道路养护制度已经使得人们全年都可到达地区中心。<br>再来看两个考研英语里的例子：<br>Finally, the public （including other scientists） receives the new discovery and possibly accompanying technology.<br>最后，公众（包括其他科学家）接受这个新发现以及可能随之而来的技术。（考研英语一 2012年 Text 3）<br>Nearly 40% of the roughly 350 people who responded to an accompanying poll said, they had collaborated with artists；and almost all said they would consider doing so in future.<br>在大约350名接受随文所附问卷调查的人中，有近40%的人表示，他们曾与艺术家合作过；而且几乎所有人都表示他们会考虑在未来与艺术家合作。（考研英语一 2022年 Text 3）</p><p>来源：独霸上海的妖怪</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌插件编写</title>
      <link href="/one_hour/2025/01/13/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
      <url>/one_hour/2025/01/13/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<ol><li>配置manifest.json 文件（必需）</li></ol><ul><li>主要是包含基础信息，权限，以及功能组件等</li><li>插件的配置文件</li></ul>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GitHub Issue Creator&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快速将选中文本添加到 GitHub Issues&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;storage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;activeTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;contextMenus&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scripting&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host_permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&lt;all_urls&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>     <span class="comment">// 在哪些页面注入</span></span><br><span class="line">      <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content-styles.css&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 注入的样式文件</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content-script.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>   <span class="comment">// 注入的脚本文件</span></span><br><span class="line">      <span class="attr">&quot;run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_end&quot;</span>       <span class="comment">// 在什么时候注入</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icons/icon48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icons/icon128.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><ol start="2"><li>popup相关文件（可选， 假如需要点击插件图标弹出页面）</li></ol><ul><li>popup.html 文件：插件的弹出页面</li><li>popup.js 文件：插件的弹出页面逻辑</li></ul><ol start="3"><li>配置background.js 文件（可选）</li></ol><ul><li>插件的背景脚本，用于处理插件的后台逻辑</li><li>可以一直运行在后台</li><li>菜单右键，快捷键等功能处理</li></ul><ol start="4"><li>配置content-script.js 文件（可选，也需要配置到manifest.json 中）</li></ol><ul><li>插件的页面脚本，用于处理插件的页面逻辑</li><li>可以访问页面DOM</li><li>可以访问页面JS API</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>manifest.json (配置)<br>    ↓<br>background.js (后台逻辑)<br>    ↓<br>popup.html&#x2F;js (用户界面) ←→ content-script.js (网页交互)</p><h2 id="API-相关"><a href="#API-相关" class="headerlink" title="API 相关"></a>API 相关</h2><ol><li>chrome.storage 类似localStorage， 但是可以跨域， 跨设备， 跨会话（local本地存储，sync同步存储，managed托管存储，大小是100kb，存储操作时异步的）</li><li>chrome.runtime.sendMessage 和 chrome.runtime.onMessage.addListener 用于在插件和后台脚本之间通信（类似Electron渲染进程和主进程）</li><li>chrome.runtime.onInstalled.addListener 用于在插件安装时执行一些操作</li><li>chrome.runtime.onStartup.addListener 用于在插件启动时执行一些操作</li><li>chrome.runtime.onConnect.addListener 用于在插件和后台脚本之间建立连接</li><li>chrome.runtime.onSuspend.addListener 用于在插件休眠时执行一些操作</li><li>chrome.windows.create 用于创建新窗口</li><li>chrome.windows.onClicked.addListener 用于监听新窗口的点击事件</li><li>chrome.contextMenus.create 用于创建右键菜单</li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>安装&#x2F;更新时</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">details</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (details.<span class="property">reason</span> === <span class="string">&#x27;install&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 首次安装时的初始化</span></span><br><span class="line">    <span class="comment">// 例如：创建右键菜单、设置默认配置等</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (details.<span class="property">reason</span> === <span class="string">&#x27;update&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新时的处理</span></span><br><span class="line">    <span class="comment">// 例如：迁移旧数据、更新配置等</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>启动时</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onStartup</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 启动时的处理</span></span><br><span class="line">  <span class="comment">// 例如：检查更新、恢复状态等</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>激活&#x2F;休眠</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js 在 Service Worker 模式下</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onSuspend</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Service Worker 即将被终止时的清理工作</span></span><br><span class="line">  <span class="comment">// 保存状态、清理资源等</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>激活的时机</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下事件会唤醒 Service Worker：</span></span><br><span class="line"><span class="comment">// 1. 扩展安装或更新时</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">details</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 被安装/更新激活&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接收到消息时</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">message, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 被消息激活&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 右键菜单被点击时</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">info, tab</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 被菜单点击激活&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 浏览器启动时</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onStartup</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 被浏览器启动激活&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）"><a href="#github-issue-插件（主要是为了方便我记录一些文字，然后一键创建github-issue）" class="headerlink" title="github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）"></a>github issue 插件（主要是为了方便我记录一些文字，然后一键创建github issue）</h2><ol><li>基础配置</li></ol><p>  manifest.json  (插件配置文件)<br>  ├── 定义插件权限 (permissions)<br>  ├── 注册后台脚本 (background.js)<br>  ├── 定义弹出窗口 (popup.html)<br>  └── 配置图标等基本信息</p><ol start="2"><li>设置功能</li></ol><p>  popup.html (设置界面)<br>  └── popup.js (设置逻辑)<br>      ├── 保存 GitHub Token<br>      ├── 保存仓库所有者<br>      └── 保存仓库名称</p><ol start="2"><li>核心功能</li></ol><p>  background.js (后台脚本)<br>  ├── 创建右键菜单<br>  ├── 处理菜单点击事件<br>  ├── 创建新 Issue 窗口<br>  └── 打开 Issue 选择器窗口</p><ol start="3"><li>创建新issue</li></ol><p>  create-issue.html (创建界面)<br>  └── create-issue.js (创建逻辑)<br>      ├── 加载选中的文本<br>      ├── 设置 Issue 标题<br>      ├── 加载标签列表<br>      └── 提交创建请求</p><ol start="4"><li>添加到已有的issue</li></ol><p>  issue-selector.html (选择界面)<br>  └── issue-selector.js (选择和评论逻辑)<br>      ├── 加载已有 Issues 列表<br>      ├── 搜索过滤功能<br>      ├── 显示评论表单<br>      └── 提交评论请求</p><ol start="5"><li>数据流向</li></ol><p>  选中文本 → background.js → chrome.storage → 功能窗口 → GitHub API</p><p>这个是菜单右键实现的。可以做成那种悬浮在选中文字上边，就出现工具栏的话，就需要用到content-script.js 了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌插件 </tag>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron时间格式的记录</title>
      <link href="/one_hour/2025/01/13/cron%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>/one_hour/2025/01/13/cron%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ol><li>凌晨3点每天</li></ol><p>┌───────────── 分钟 (0-59)<br>│ ┌───────────── 小时 (0-23)<br>│ │ ┌───────────── 日期 (1-31)<br>│ │ │ ┌───────────── 月份 (1-12)<br>│ │ │ │ ┌───────────── 星期 (0-6) (周日&#x3D;0)<br>│ │ │ │ │<br>0 3 * * *</p><p>第一个 0 表示分钟数为0<br>第二个 3 表示小时数为3<br>第三个 * 表示每天<br>第四个 * 表示每月<br>第五个 * 表示每周的每一天</p>]]></content>
      
      
      <categories>
          
          <category> 时间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据作为电信号存储的知识点</title>
      <link href="/one_hour/2025/01/02/%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%BA%E7%94%B5%E4%BF%A1%E5%8F%B7%E5%AD%98%E5%82%A8%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
      <url>/one_hour/2025/01/02/%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%BA%E7%94%B5%E4%BF%A1%E5%8F%B7%E5%AD%98%E5%82%A8%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="数据作为电信号存在哪里"><a href="#数据作为电信号存在哪里" class="headerlink" title="数据作为电信号存在哪里"></a>数据作为电信号存在哪里</h2><ol><li>最基础的存储单元：晶体管和电容器组合<br>  a. 晶体管：能够放大或者控制电流的元器件。三大区域，中间有两个PN结。通过控制一个区域的电压，来达到控制其他两个区域的电流。<br>  b. 电容器：能够存储电荷的元器件。两个电极，中间有一层介质。电容器通电时，电荷会在电极之间的介质积聚。</li><li>内存（RAM）<br>  a. 使用DRAM（动态随机存取存储器）<br>  b. 每个位（bit），由一个晶体管和电容器组成<br>  c. 电容器充电表示1， 放电表示0<br>  d. 需要定期刷新</li><li>怎么定期刷新？<br>  a. DRAM的刷新过程是通过”读取-重写”操作完成的<br>  b. 刷新时，内存控制器会：<ul><li>读取内存单元中的数据</li><li>立即将数据重新写回该单元</li><li>这个过程会重新给电容充电，防止数据丢失<br>  c. 刷新频率通常是每64ms刷新一次<br>  d. 刷新过程是自动进行的，不会影响正常的数据访问</li></ul></li><li>为什么需要定期刷新？</li><li>那假如我一台电脑很久很久不使用，那里边的数据按理论是会丢失的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cursor </tag>
            
            <tag> 计算机原理 </tag>
            
            <tag> 计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug的各种姿势</title>
      <link href="/one_hour/2018/02/07/debug%E7%9A%84%E5%90%84%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
      <url>/one_hour/2018/02/07/debug%E7%9A%84%E5%90%84%E7%A7%8D%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> wireshark</li><li><input disabled="" type="checkbox"> pc端和移动端调试</li><li><input disabled="" type="checkbox"> node调试方法</li></ul><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h3 id="过滤器使用："><a href="#过滤器使用：" class="headerlink" title="过滤器使用："></a>过滤器使用：</h3><p>常用过滤语法：</p><ul><li>ip.addr &#x3D;&#x3D; 192.168.1.1    &#x2F;&#x2F; 指定IP</li><li>tcp.port &#x3D;&#x3D; 80            &#x2F;&#x2F; 指定端口</li><li>http                      &#x2F;&#x2F; HTTP协议</li><li>tcp.flags.syn &#x3D;&#x3D; 1        &#x2F;&#x2F; TCP SYN包</li><li>frame contains “password”  &#x2F;&#x2F; 包含关键字</li></ul><h3 id="抓包技巧"><a href="#抓包技巧" class="headerlink" title="抓包技巧"></a>抓包技巧</h3><p>定位问题：</p><ul><li>使用颜色标记重要数据包</li><li>跟踪TCP流</li><li>查看协议层级</li><li>分析握手过程</li><li>检查重传包</li></ul><h3 id="调试场景"><a href="#调试场景" class="headerlink" title="调试场景"></a>调试场景</h3><ul><li>网络连接问题</li><li>HTTP请求分析</li><li>WebSocket通信</li><li>DNS解析问题</li><li>SSL&#x2F;TLS问题</li></ul><h3 id="实用快捷键"><a href="#实用快捷键" class="headerlink" title="实用快捷键"></a>实用快捷键</h3><p>快捷操作：</p><ul><li>Ctrl + E    &#x2F;&#x2F; 开始&#x2F;停止捕获</li><li>Ctrl + R    &#x2F;&#x2F; 重新开始捕获</li><li>Ctrl + F    &#x2F;&#x2F; 查找</li><li>Ctrl + .    &#x2F;&#x2F; 转到下一个包</li><li>Ctrl + ,    &#x2F;&#x2F; 转到上一个包</li></ul><h3 id="调试建议"><a href="#调试建议" class="headerlink" title="调试建议"></a>调试建议</h3><ul><li>先用过滤器缩小范围</li><li>关注异常状态码</li><li>检查响应时间</li><li>分析错误包</li><li>保存重要捕获</li></ul><h2 id="PC端和移动端调试"><a href="#PC端和移动端调试" class="headerlink" title="PC端和移动端调试"></a>PC端和移动端调试</h2><h3 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h3><ol><li>console </li><li>断点</li><li>postman接口测试</li><li>性能分析（performance面板，memory面板）</li></ol><h4 id="Performance面板"><a href="#Performance面板" class="headerlink" title="Performance面板"></a>Performance面板</h4><p>录制步骤：</p><ol><li>点击录制按钮（⚫）</li><li>进行页面操作</li><li>停止录制</li><li>分析火焰图：<ul><li>红色：JavaScript执行</li><li>紫色：页面渲染</li><li>绿色：页面绘制</li><li>灰色：空闲时间</li></ul></li></ol><h4 id="Memory面板"><a href="#Memory面板" class="headerlink" title="Memory面板"></a>Memory面板</h4><p>Memory面板三种分析方式：</p><ol><li><p>Heap Snapshot（堆快照）</p><ul><li>拍摄快照</li><li>对比前后变化</li><li>查看内存占用</li></ul></li><li><p>Allocation Timeline（分配时间轴）</p><ul><li>记录内存分配</li><li>查看对象生命周期</li><li>定位频繁GC</li></ul></li><li><p>Allocation Sampling（分配采样）</p><ul><li>JS堆分配</li><li>定位大对象</li></ul></li></ol><h4 id="常见性能问题"><a href="#常见性能问题" class="headerlink" title="常见性能问题"></a>常见性能问题</h4><p>排查要点：</p><ul><li>长任务阻塞</li><li>频繁GC</li><li>DOM操作过多</li><li>图片资源过大</li><li>未释放的事件监听</li><li>闭包导致的内存泄露</li></ul><h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><ul><li>使用防抖节流</li><li>虚拟列表</li><li>图片懒加载</li><li>合理使用缓存</li><li>及时解绑事件</li><li>避免闭包滥用</li><li>代码分割</li><li>资源压缩</li><li>CDN加速</li><li>合理缓存</li></ul><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>常用方法：</p><ul><li>Chrome远程调试（Android）</li><li>Safari调试（iOS）</li><li>vConsole（移动端调试工具）</li><li>Eruda（移动端调试面板）</li><li>Charles&#x2F;Fiddler（抓包）</li></ul><p>Charles&#x2F;Fiddler 本地文件映射（https需要额外的配置）</p><h4 id="Charles配置"><a href="#Charles配置" class="headerlink" title="Charles配置"></a>Charles配置</h4><p>本地文件映射步骤：</p><ol><li>Tools -&gt; Map Local</li><li>Add New Mapping</li><li>设置：<ul><li>远程URL路径</li><li>本地文件路径</li><li>启用&#x2F;禁用规则</li></ul></li></ol><h3 id="Fiddler配置"><a href="#Fiddler配置" class="headerlink" title="Fiddler配置"></a>Fiddler配置</h3><p>AutoResponder设置：</p><ol><li>切换到AutoResponder标签</li><li>Enable rules</li><li>添加规则：<ul><li>匹配规则（正则&#x2F;通配符）</li><li>选择本地文件</li><li>设置响应类型</li></ul></li></ol><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>替换线上JS&#x2F;CSS文件</li><li>修改API响应数据</li><li>测试不同版本</li><li>调试线上问题</li><li>模拟各种响应</li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试</title>
      <link href="/one_hour/2018/02/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/one_hour/2018/02/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>部署</li><li>jest+enzyme</li><li>注意点</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> 测试 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由实现</title>
      <link href="/one_hour/2018/02/07/%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/"/>
      <url>/one_hour/2018/02/07/%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>history</li><li>hash</li><li>原理</li><li>实现</li><li>注意点</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚手架实现</title>
      <link href="/one_hour/2018/02/07/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E7%8E%B0/"/>
      <url>/one_hour/2018/02/07/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>实现原理</li><li>hexo</li><li>metalsmith</li><li>yeoman</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/one_hour/2018/02/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/one_hour/2018/02/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li>原理</li><li>解决方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型链</title>
      <link href="/one_hour/2018/02/07/js%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/one_hour/2018/02/07/js%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>prototype</li><li>constructor</li><li>new</li></ul><h2 id="原型链的构成"><a href="#原型链的构成" class="headerlink" title="原型链的构成"></a>原型链的构成</h2><p>对象.<strong>proto</strong> -&gt; 原型对象<br>原型对象.constructor -&gt; 构造函数<br>构造函数.prototype -&gt; 原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; eating&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);  <span class="comment">// 继承属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查原型链</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)    <span class="comment">// 获取原型</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;prop&#x27;</span>)    <span class="comment">// 是否自身属性</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>     <span class="comment">// 是否在原型链上</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(proto)          <span class="comment">// 创建指定原型的对象</span></span><br></pre></td></tr></table></figure><h2 id="属性查找过程"><a href="#属性查找过程" class="headerlink" title="属性查找过程"></a>属性查找过程</h2><p>obj.prop<br>-&gt; obj自身属性<br>-&gt; obj.__proto__属性<br>-&gt; obj.<strong>proto</strong>.__proto__属性<br>-&gt; … 直到null</p><h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><ul><li>标识对象由哪个构造函数创建</li><li>维护正确的原型链关系</li><li>方便实例识别其构造函数</li></ul><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul><li>创建空对象</li><li>将空对象的__proto__指向构造函数的prototype</li><li>将构造函数的this指向空对象</li><li>执行构造函数</li><li>返回空对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Person(&#x27;张三&#x27;) 实际上做了：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newOperator</span>(<span class="params">Constructor, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个空对象，原型指向构造函数的prototype</span></span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 将构造函数的this指向这个对象</span></span><br><span class="line">    <span class="comment">// 3. 执行构造函数</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 如果构造函数返回对象，则返回该对象</span></span><br><span class="line">    <span class="comment">// 否则返回第一步创建的对象</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result !== <span class="literal">null</span>) ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>函数都可以作为构造函数，但是箭头函数不行</li><li>箭头函数没有自己的this</li><li>箭头函数的this是在定义时就确定的，指向外层作用域的this</li><li>箭头函数没有prototype属性</li><li>不能通过call&#x2F;apply&#x2F;bind改变箭头函数的this</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call：立即执行，参数列表</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply：立即执行，参数数组</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">apply</span>(thisArg, [arg1, arg2, ...])</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind：返回新函数，参数列表</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><h2 id="类和原型"><a href="#类和原型" class="headerlink" title="类和原型"></a>类和原型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js异步编程</title>
      <link href="/one_hour/2018/02/07/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/one_hour/2018/02/07/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="计划内容"><a href="#计划内容" class="headerlink" title="计划内容"></a>计划内容</h3><ul><li>单线程</li><li>事件驱动</li><li>callback</li><li>setTimeout、setInterval</li><li>Promise</li><li>generator</li><li>async&#x2F;await</li></ul><h3 id="JavaScript的单线程特性"><a href="#JavaScript的单线程特性" class="headerlink" title="JavaScript的单线程特性"></a>JavaScript的单线程特性</h3><p>JavaScript是一门单线程的编程语言，这意味着它只有一个主线程来处理所有的任务。这种设计是由其最初在浏览器环境下的应用场景决定的。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>JavaScript通过事件驱动的方式来处理异步操作：</p><ul><li>事件循环（Event Loop）</li><li>事件队列（Event Queue）</li><li>宏任务（Macro-task）和微任务（Micro-task）</li></ul><h4 id="1-事件循环（Event-Loop）"><a href="#1-事件循环（Event-Loop）" class="headerlink" title="1. 事件循环（Event Loop）"></a>1. 事件循环（Event Loop）</h4><p>事件循环是JavaScript实现异步的核心机制，它主要负责：</p><ul><li>执行同步代码</li><li>检查宏任务队列</li><li>执行微任务队列</li><li>更新渲染</li></ul><p>执行顺序：</p><ol><li>执行同步代码（主线程）</li><li>清空微任务队列（micro-task queue）</li><li>执行一个宏任务（macro-task queue）</li><li>重复步骤2-3<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件循环示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 同步代码</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 宏任务</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 微任务</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>); <span class="comment">// 同步代码</span></span><br><span class="line"><span class="comment">// 输出顺序：1 -&gt; 4 -&gt; 3 -&gt; 2</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-事件队列（Event-Queue）"><a href="#2-事件队列（Event-Queue）" class="headerlink" title="2. 事件队列（Event Queue）"></a>2. 事件队列（Event Queue）</h4><p>JavaScript中有两种主要的任务队列：</p><ol><li><p><strong>宏任务队列（Macro-task Queue）</strong></p><ul><li>setTimeout&#x2F;setInterval</li><li>setImmediate (Node.js)</li><li>requestAnimationFrame (浏览器)</li><li>I&#x2F;O操作</li><li>UI渲染</li><li>script标签</li></ul></li><li><p><strong>微任务队列（Micro-task Queue）</strong></p><ul><li>Promise.then&#x2F;catch&#x2F;finally</li><li>process.nextTick (Node.js)</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏任务和微任务的执行顺序</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;宏任务1&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微任务2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微任务1&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;宏任务2&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出顺序：微任务1 -&gt; 宏任务1 -&gt; 微任务2 -&gt; 宏任务2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-实际应用示例"><a href="#3-实际应用示例" class="headerlink" title="3. 实际应用示例"></a>3. 实际应用示例</h4><ol><li><strong>异步操作的优先级控制</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高优先级任务使用微任务</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">highPriorityTask</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;高优先级任务执行&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 低优先级任务使用宏任务</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lowPriorityTask</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;低优先级任务执行&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>避免回调地狱的最佳实践</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的实践</span></span><br><span class="line"><span class="comment">// 回调地狱示例</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Promise改写</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async/await改写（最优雅）</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sequence</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="title function_">sequence</span>();</span><br><span class="line"><span class="comment">// 好的实践</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">betterWay</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h4><ol><li><strong>性能考虑</strong></li></ol><ul><li>微任务优先级高，但不要过度使用</li><li>避免在微任务中执行耗时操作</li><li>合理使用宏任务分散负载</li></ul><ol start="2"><li><p><strong>常见陷阱</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 死循环微任务</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deadlock</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">deadlock</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这会阻塞事件循环，导致宏任务无法执行</span></span><br></pre></td></tr></table></figure></li><li><p><strong>最佳实践</strong></p></li></ol><ul><li>耗时操作放入宏任务队列</li><li>需要即时响应的放入微任务队列</li><li>合理组合async&#x2F;await与Promise</li><li>避免同步阻塞操作</li></ul><h3 id="回调函数（Callback）"><a href="#回调函数（Callback）" class="headerlink" title="回调函数（Callback）"></a>回调函数（Callback）</h3><p>最基础的异步编程方式，但可能导致回调地狱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调地狱示例</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="title function_">getMoreData</span>(a, <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="title function_">getMoreData</span>(b, <span class="keyword">function</span>(<span class="params">c</span>) &#123;</span><br><span class="line">      <span class="title function_">getMoreData</span>(c, <span class="keyword">function</span>(<span class="params">d</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据获取完成&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="setTimeout和setInterval"><a href="#setTimeout和setInterval" class="headerlink" title="setTimeout和setInterval"></a>setTimeout和setInterval</h3><p>用于延时执行和周期性执行任务的定时器函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout示例</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;延时执行&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是一种更优雅的异步编程解决方案，可以有效避免回调地狱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise示例</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;数据获取完成&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>生成器函数提供了一种可以暂停和恢复执行的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dataGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> data1 = <span class="keyword">yield</span> <span class="title function_">getData</span>();</span><br><span class="line"><span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getMoreData</span>(data1);</span><br><span class="line"><span class="keyword">const</span> data3 = <span class="keyword">yield</span> <span class="title function_">getMoreData</span>(data2);</span><br><span class="line"><span class="keyword">return</span> data3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用生成器</span></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">dataGenerator</span>();</span><br><span class="line">gen.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">data1</span> =&gt;</span> &#123;</span><br><span class="line">  gen.<span class="title function_">next</span>(data1).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">data2</span> =&gt;</span> &#123;</span><br><span class="line">    gen.<span class="title function_">next</span>(data2).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">data3</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最终数据:&#x27;</span>, data3);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p>async&#x2F;await是ES2017引入的一种更简洁的异步编程方式,它是Generator的语法糖:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async/await示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">getMoreData</span>(data1);</span><br><span class="line">  <span class="keyword">const</span> data3 = <span class="keyword">await</span> <span class="title function_">getMoreData</span>(data2);</span><br><span class="line">  <span class="keyword">return</span> data3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实践建议"><a href="#实践建议" class="headerlink" title="实践建议"></a>实践建议</h3><ol><li>优先使用async&#x2F;await进行异步编程</li><li>合理使用Promise.all()处理并发请求</li><li>注意错误处理和异常捕获</li><li>避免回调地狱</li><li>合理使用定时器，注意及时清除不需要的定时器</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JavaScript的异步编程经历了从回调函数、Promise、Generator到async&#x2F;await的演进过程，每种方式都有其适用场景：</p><ul><li>回调函数：简单场景</li><li>Promise：中等复杂度的异步操作</li><li>Generator：需要精细控制执行流程的场景</li><li>async&#x2F;await：复杂的异步流程控制</li></ul><h3 id="异步编程方案对比"><a href="#异步编程方案对比" class="headerlink" title="异步编程方案对比"></a>异步编程方案对比</h3><h4 id="1-回调函数（Callback）"><a href="#1-回调函数（Callback）" class="headerlink" title="1. 回调函数（Callback）"></a>1. 回调函数（Callback）</h4><p>优点：</p><ul><li>简单直接，容易理解</li><li>适用于简单的异步操作</li><li>基础代码量少</li></ul><p>缺点：</p><ul><li>容易产生回调地狱</li><li>错误处理复杂</li><li>代码可读性差</li><li>不能使用try-catch捕获错误</li></ul><p>适用场景：</p><ul><li>简单的一次性异步操作</li><li>事件监听处理</li></ul><h4 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h4><p>优点：</p><ul><li>链式调用，避免回调地狱</li><li>统一的错误处理机制</li><li>多个异步操作的状态管理</li><li>支持并行操作（Promise.all&#x2F;race）</li></ul><p>缺点：</p><ul><li>无法取消执行</li><li>无法获取执行进度</li><li>代码较callback略微复杂</li></ul><p>适用场景：</p><ul><li>多个依赖异步操作</li><li>需要错误统一处理</li><li>并行异步操作</li></ul><h4 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3. Generator"></a>3. Generator</h4><p>默认执行之后会返回一个迭代器，<br>优点：</p><ul><li>可以暂停和恢复执行</li><li>提供了更好的异步流程控制</li><li>可以在生成器函数内部捕获错误</li></ul><p>缺点：</p><ul><li>需要手动执行next()</li><li>代码较复杂</li><li>不直观，理解成本高</li></ul><p>适用场景：</p><ul><li>需要精确控制异步流程</li><li>需要实现迭代器</li><li>复杂的状态管理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建自定义的迭代规则</span></span><br><span class="line"><span class="comment">// 创建一个范围迭代器</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">range</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2状态机管理：</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">playerStateMachine</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> state = <span class="string">&#x27;IDLE&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(state) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;IDLE&#x27;</span>:</span><br><span class="line">                state = <span class="keyword">yield</span> <span class="string">&#x27;等待操作&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;RUNNING&#x27;</span>:</span><br><span class="line">                state = <span class="keyword">yield</span> <span class="string">&#x27;正在奔跑&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;JUMPING&#x27;</span>:</span><br><span class="line">                state = <span class="keyword">yield</span> <span class="string">&#x27;正在跳跃&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> player = <span class="title function_">playerStateMachine</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// &quot;等待操作&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="title function_">next</span>(<span class="string">&#x27;RUNNING&#x27;</span>).<span class="property">value</span>); <span class="comment">// &quot;正在奔跑&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="title function_">next</span>(<span class="string">&#x27;JUMPING&#x27;</span>).<span class="property">value</span>); <span class="comment">// &quot;正在跳跃&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 异步操作控制</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">dataFetchFlow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 显示加载状态</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">showLoading</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">fetchData</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">processData</span>(data);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 隐藏加载状态</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">hideLoading</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">handleError</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 工作流程控制</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">uploadProcess</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 检查文件</span></span><br><span class="line">    <span class="keyword">const</span> file = <span class="keyword">yield</span> <span class="string">&#x27;检查文件&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!file) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 压缩文件</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;压缩文件&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 上传</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="string">&#x27;上传中&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新界面</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;更新完成&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表单验证流程</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">formValidation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 验证用户名</span></span><br><span class="line">    <span class="keyword">const</span> username = <span class="keyword">yield</span> <span class="string">&#x27;请输入用户名&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!username) <span class="keyword">yield</span> <span class="string">&#x27;用户名不能为空&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证密码</span></span><br><span class="line">    <span class="keyword">const</span> password = <span class="keyword">yield</span> <span class="string">&#x27;请输入密码&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (password.<span class="property">length</span> &lt; <span class="number">6</span>) <span class="keyword">yield</span> <span class="string">&#x27;密码太短&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证邮箱</span></span><br><span class="line">    <span class="keyword">const</span> email = <span class="keyword">yield</span> <span class="string">&#x27;请输入邮箱&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!email.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>)) <span class="keyword">yield</span> <span class="string">&#x27;邮箱格式错误&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;验证通过&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><ol><li>for of这里为啥没有使用next()?<br>可以手动使用next，也可以直接使用for of，Generator函数自动实现了迭代器协议，返回的对象自动实现Symbol.iterator方法;for of 循环内部自动调用next了;展开运算符；解构赋值；Array.from都会自动调用迭代器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for...of 循环内部大致相当于：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">forOf</span>(<span class="params">iterator</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = iterator.<span class="title function_">next</span>();</span><br><span class="line">    <span class="keyword">while</span>(!result.<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>);</span><br><span class="line">        result = iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这些语法都会自动调用迭代器：</span></span><br><span class="line"><span class="keyword">const</span> numbers = [...<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>)];  <span class="comment">// 展开运算符</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">3</span>);     <span class="comment">// 解构赋值</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>));           <span class="comment">// Array.from</span></span><br></pre></td></tr></table></figure></li><li>Generator函数是为啥没有显式的return，但是却可以调用它的返回值？<br>Generator函数的隐式返回是Javascript引擎在调用时自动完成的，创建迭代器对象，设置内部状态，实现迭代器协议，返回这个迭代器对象。所以它总是会返回一个迭代器对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Generator函数的简化实现原理</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">simpleGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;    <span class="comment">// 第一个暂停点</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;    <span class="comment">// 第二个暂停点</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束执行&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们调用Generator函数时，JavaScript引擎实际上会：</span></span><br><span class="line"><span class="comment">// 1. 创建一个迭代器对象</span></span><br><span class="line"><span class="comment">// 2. 设置初始状态</span></span><br><span class="line"><span class="comment">// 大致相当于以下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建迭代器对象</span></span><br><span class="line">    <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">        <span class="comment">// 内部状态</span></span><br><span class="line">        <span class="attr">_state</span>: <span class="number">0</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// next方法实现</span></span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">_state</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_state</span> = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_state</span> = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实现迭代器协议</span></span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>有什么更真实的场景会使用到状态机呢？（TODO: 还需要更深入的学习了解）<br>游戏角色的状态（初始化，攻击，受伤，死亡等），中间可以加入其他不是这几个的动作或者事件。（状态可以自动保存在闭包中，不需要额外的状态管理代码）其他的需要手动维护状态，保存和恢复需要显示编写。</li></ol><h4 id="使用Generator的关键考虑因素"><a href="#使用Generator的关键考虑因素" class="headerlink" title="使用Generator的关键考虑因素"></a>使用Generator的关键考虑因素</h4><ol><li>何时使用：</li></ol><ul><li>需要延迟计算</li><li>需要控制执行流程</li><li>需要自定义迭代逻辑</li><li>处理大量数据时需要分步处理</li></ul><ol start="2"><li>何时不使用：</li></ol><ul><li>简单的异步操作（用async&#x2F;await更合适）</li><li>不需要暂停&#x2F;恢复的操作</li><li>团队对Generator不熟悉的情况</li></ul><ol start="3"><li>注意事项：</li></ol><ul><li>Generator函数的错误处理需要特别注意</li><li>需要考虑内存使用（特别是无限序列）</li><li>调试可能比普通函数更复杂</li></ul><h4 id="4-Async-Await"><a href="#4-Async-Await" class="headerlink" title="4. Async&#x2F;Await"></a>4. Async&#x2F;Await</h4><p>优点：</p><ul><li>同步代码风格编写异步</li><li>简洁直观，易于理解</li><li>更好的错误处理机制</li><li>支持try-catch捕获异常</li><li>便于调试</li></ul><p>缺点：</p><ul><li>可能导致性能问题（如果使用不当）</li><li>无法处理取消操作</li><li>await会阻塞后续代码执行</li></ul><p>适用场景：</p><ul><li>复杂的异步业务逻辑</li><li>需要顺序执行的异步操作</li><li>依赖前一个异步结果的操作</li></ul><h4 id="如何取消异步操作"><a href="#如何取消异步操作" class="headerlink" title="如何取消异步操作"></a>如何取消异步操作</h4><p>如果是fetch请求，优先使用AbortController<br>如果需要精细控制，考虑Generator<br>如果是复杂的异步流程，考虑RxJS<br>如果是简单场景，可以使用自定义Promise</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js里的this</title>
      <link href="/one_hour/2018/02/07/js%E9%87%8C%E7%9A%84this/"/>
      <url>/one_hour/2018/02/07/js%E9%87%8C%E7%9A%84this/</url>
      
        <content type="html"><![CDATA[<h3 id="计划内容"><a href="#计划内容" class="headerlink" title="计划内容"></a>计划内容</h3><ul><li>bind</li><li>es5里的，es6里的</li></ul><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式下，this指向全局对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// window/global</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式下，this指向undefined</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为对象方法调用时，this指向该对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>();  <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：方法单独使用会丢失this</span></span><br><span class="line"><span class="keyword">const</span> say = obj.<span class="property">sayHi</span>;</span><br><span class="line"><span class="title function_">say</span>();  <span class="comment">// undefined，this指向全局</span></span><br></pre></td></tr></table></figure><h3 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call/apply/bind 可以指定this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span> &#125;;</span><br><span class="line">greet.<span class="title function_">call</span>(person);    <span class="comment">// &#x27;李四&#x27;</span></span><br><span class="line">greet.<span class="title function_">apply</span>(person);   <span class="comment">// &#x27;李四&#x27;</span></span><br><span class="line">greet.<span class="title function_">bind</span>(person)();  <span class="comment">// &#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数中的this指向新创建的实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;王五&#x27;</span>);  <span class="comment">// this指向p</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数没有自己的this，它的this继承自外层作用域的this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">// undefined，this指向全局</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>();  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>假如想要在sayHi里读取到obj的name</p><ol><li>使用普通函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);  <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>();  <span class="comment">// &#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure></li><li>保存外部引用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// 直接引用obj</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>new绑定</li><li>显式绑定（call&#x2F;apply&#x2F;bind）</li><li>隐式绑定（对象方法）</li><li>默认绑定（全局&#x2F;undefined）</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包</title>
      <link href="/one_hour/2018/02/07/js%E9%97%AD%E5%8C%85/"/>
      <url>/one_hour/2018/02/07/js%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="计划内容"><a href="#计划内容" class="headerlink" title="计划内容"></a>计划内容</h3><ul><li>经典问题for循环</li><li>函数式编程、柯里化</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件流</title>
      <link href="/one_hour/2018/02/07/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/one_hour/2018/02/07/%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<ul><li>冒泡</li><li>捕获</li><li>target、currentTarget</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 事件流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法</title>
      <link href="/one_hour/2018/02/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/one_hour/2018/02/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>快速排序</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack注意事项</title>
      <link href="/one_hour/2018/02/07/webpack%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/one_hour/2018/02/07/webpack%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="计划写的内容"><a href="#计划写的内容" class="headerlink" title="计划写的内容"></a>计划写的内容</h3><ul><li>publicPath</li><li>outputPath</li><li>contentBase</li><li>webpack runtime code </li><li>等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web常见的安全问题</title>
      <link href="/one_hour/2018/02/07/web%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/one_hour/2018/02/07/web%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li>xss</li><li>csrf</li><li>等</li><li>解决方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器输入URL后发生了什么</title>
      <link href="/one_hour/2018/02/07/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/one_hour/2018/02/07/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<ul><li>相对路径、绝对路径</li><li>http(请求头、状态码)</li><li>dns</li><li>tcp三次握手</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片格式的区别</title>
      <link href="/one_hour/2018/02/07/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/one_hour/2018/02/07/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ul><li>png（还分几位)</li><li>jpg</li><li>jpeg</li><li>gif</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css奇淫技巧</title>
      <link href="/one_hour/2018/02/07/css%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
      <url>/one_hour/2018/02/07/css%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="border实现三角小图标"><a href="#border实现三角小图标" class="headerlink" title="border实现三角小图标"></a>border实现三角小图标</h3><ul><li>原理</li></ul><h3 id="display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果"><a href="#display-none-visibility-hidden-区别，以及使用visibility实现神奇的效果" class="headerlink" title="display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果"></a>display:none;visibility:hidden;区别，以及使用visibility实现神奇的效果</h3>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇淫技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础属性解析</title>
      <link href="/one_hour/2018/02/07/css%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7%E8%A7%A3%E6%9E%90/"/>
      <url>/one_hour/2018/02/07/css%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><pre><code>常见的`div、p、ul、li、ol、h1~h6、`特点：- 定义`width、height`有效### 行内元素`span、a、i`特点：- 定义`width、height`无效。- padding有效，margin只有左右的有效，上下的无效</code></pre><p>元素类型由以下两项定义：</p><ul><li><a href="https://www.w3.org/TR/html/dom.html#element-dfn-categories">Catagories</a></li><li><a href="https://www.w3.org/TR/html/dom.html#element-dfn-content-model">Content Model</a></li></ul><h3 id="元素包含规则"><a href="#元素包含规则" class="headerlink" title="元素包含规则"></a>元素包含规则</h3><p>由Content Model决定，</p><h3 id="Catagories"><a href="#Catagories" class="headerlink" title="Catagories"></a>Catagories</h3><h3 id="Content-Model"><a href="#Content-Model" class="headerlink" title="Content Model"></a>Content Model</h3><ul><li>text-align基于文本元素</li><li>line-height</li><li>vertical-align：设置元素的垂直对齐方式<br>该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。<br><img src= "/one_hour/img/loading.gif" data-src="/one_hour/images/vertical_align.jpeg" alt="image"></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://www.zhihu.com/question/48130783/answer/109271752">元素的使用姿势</a><br><a href="http://www.cnblogs.com/xiaohuochai/p/5271217.html">line-height 和vertical-align</a><br><a href="https://zhuanlan.zhihu.com/p/25808995">line-height 和vertical-align</a><br><a href="http://v.youku.com/v_show/id_XMzg4NDUzMDUy.html">字体设计的视频</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面布局</title>
      <link href="/one_hour/2018/02/07/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
      <url>/one_hour/2018/02/07/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p><img src= "/one_hour/img/loading.gif" data-src="/one_hour/images/box_pattern.jpeg" alt="box"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* content-box */</span></span><br><span class="line"><span class="attribute">box-sizing</span>:border-box;</span><br></pre></td></tr></table></figure><p>故名思议就是我们在页面定义<code>width</code>以及<code>height</code>的时候如何计算。<br>默认的模型<code>content-box</code>,即定义的就是content里的<code>width</code>、<code>height</code>.<br>IE里的诡异模型即<code>border-box</code>，即定义的<code>width = content+padding+border</code><br><code>height</code>同理。</p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p><code>vertical-align</code>会失效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line"><span class="comment">/*flex:flex-grow,flex-shrink,flex-basis*/</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">2</span> <span class="number">2</span> <span class="number">10%</span>;</span><br><span class="line"><span class="comment">/* 属性</span></span><br><span class="line"><span class="comment">flex-direction</span></span><br><span class="line"><span class="comment">flex-wrap</span></span><br><span class="line"><span class="comment">flex-flow</span></span><br><span class="line"><span class="comment">justify-content</span></span><br><span class="line"><span class="comment">align-items</span></span><br><span class="line"><span class="comment">align-content</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*作用于item</span></span><br><span class="line"><span class="comment">order</span></span><br><span class="line"><span class="comment">flex-grow</span></span><br><span class="line"><span class="comment">flex-shrink</span></span><br><span class="line"><span class="comment">flex-basis</span></span><br><span class="line"><span class="comment">flex</span></span><br><span class="line"><span class="comment">align-self</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*relative|fixed|static*/</span></span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br></pre></td></tr></table></figure><p><code>relative</code>相对于自身，但是自己的位置依旧霸占着<br><code>fixed</code>相对于浏览器窗口<br><code>absolute</code>相对于离他最近的有定位的父元素<br><code>z-index很关键</code></p><h3 id="float布局"><a href="#float布局" class="headerlink" title="float布局"></a>float布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*right|none*/</span></span><br><span class="line"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br></pre></td></tr></table></figure><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><h4 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h4><h3 id="圣杯布局、双飞翼布局"><a href="#圣杯布局、双飞翼布局" class="headerlink" title="圣杯布局、双飞翼布局"></a>圣杯布局、双飞翼布局</h3><p>三栏布局，左右两边固定，中间自适应<br>浮动+负margin</p><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><ul><li>Css3 Media Queries<br><code>max-width,min-width,max-device-width</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 大于1200px的屏幕则这样子显示 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>)&#123; </span><br><span class="line">   <span class="selector-class">.style</span>  &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="number">#ccc</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>link里的media来指定使用条件<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel= &quot;stylesheet&quot;  media= &quot;only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)<span class="string">&quot;  type= &quot;</span>text/css<span class="string">&quot;  href= &quot;</span>style.css<span class="string">&quot;  /&gt;</span></span><br></pre></td></tr></table></figure></li><li>viewport<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, initial-scale=<span class="number">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>使用百分比定义宽度、em定义字体大小</li></ul><h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">flex布局属性介绍</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> float </tag>
            
            <tag> 前端 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test hexo</title>
      <link href="/one_hour/2018/02/05/test/"/>
      <url>/one_hour/2018/02/05/test/</url>
      
        <content type="html"><![CDATA[<ul><li>诞生日：2018&#x2F;02&#x2F;05<br><img src= "/one_hour/img/loading.gif" data-src="/one_hour/images/girl.jpeg" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
